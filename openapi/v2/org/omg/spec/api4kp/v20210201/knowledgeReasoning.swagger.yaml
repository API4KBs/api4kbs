swagger: '2.0'
info:
  version: "5.0.0"
  title: 'API4KP Knowledge Reasoning API'
  contact:
    name: Davide Sottara
    email: sottara.davide@mayo.edu
  license:
    name: Apache License, Version 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  description: |
    Maturity - MEDIUM (may be subject to changes)

    ### Summary

    ** Knowledge-Driven Reasoning (web) Service that supports the execution of
    Inferences, Queries, and related information processing tasks on one or more Knowledge Bases

    #### Identification
    In this context, a Knowledge Base deployed in a runtime environment that is paired
    with an execution engine will also be summarily denoted with the term '(executable) Model'.



tags:
  - name: Model
    description: "Endpoints that expose (metadata about) the deployed model itself"
  - name: Reasoning
    description: "Endpoints that expose a model's computation capabilities as a function"
  #- name: asynch
  #  description: "Endpoints that expose the model's asynchronous computation"

paths:

  /models:
    get:
      tags:
        - Model
      summary: List Models
      operationId: listModels
      description: "List the Models running on this server."
      produces:
        - application/json
        - application/xml
      # TODO: Apply the pagination trait
      # TODO: Apply the asset type filter trait - other search/filter parameters?
      responses:
        200:
          description: "List of References to available Models"
          schema:
            type: array
            items:
              $ref: '#/definitions/Pointer'

  /models/{modelId}/versions/{versionTag}:
    get:
      tags:
        - Model
      summary: Describe Model
      operationId: getModel
      description: "Return descriptive metadata about a specific model"
      produces:
        - application/json
        - application/xml
      parameters:
        - $ref: '#/parameters/modelId'
        - $ref: '#/parameters/versionTag'
      responses:
        200:
          description: "Information about the computable knowledge that is being executed
          as a service, including enough information to resolve the Knowledge Asset of
          which the model is an instantiation."
          schema:
            $ref: '#/definitions/KnowledgeCarrier'


  ##########################################################################################

  /models/{modelId}/versions/{versionTag}/reasoners/inferences:
    post:
      tags:
        - Reasoning
      operationId: infer
      summary: performs an inference, deriving all logical consequences of the KB
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/modelId'
        - $ref: '#/parameters/versionTag'
        - in: body
          name: features
          required: true
          schema:
            $ref: '#/definitions/Bindings'
      responses:
        200:
          description: "The results of the computation, returned synchronously"
          schema:
            $ref: '#/definitions/KnowledgeCarrier'


  /models/{modelId}/versions/{versionTag}/reasoners/inferences/consequents:
    post:
      tags:
        - Reasoning
      operationId: evaluate
      summary: performs an inference, and returns the derived facts as bound variables
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/modelId'
        - $ref: '#/parameters/versionTag'
        - in: body
          name: features
          required: true
          schema:
            $ref: '#/definitions/Bindings'
      responses:
        200:
          description: "The results of the computation, returned synchronously"
          schema:
            $ref: '#/definitions/Bindings'


  /models/{modelId}/versions/{versionTag}/reasoners/inferences/entailments:
    post:
      tags:
        - Reasoning
      operationId: entails
      summary: performs an inference, testing whether a set of statements is derived in the process
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/modelId'
        - $ref: '#/parameters/versionTag'
        - in: body
          name: potentialConsequence
          required: true
          schema:
            $ref: '#/definitions/KnowledgeCarrier'
      responses:
        200:
          description: "The results of the computation, returned synchronously"



  /models/{modelId}/versions/{versionTag}/reasoners/queryanswers:
    post:
      tags:
        - Reasoning
      operationId: askQuery
      summary: queries the KB, returning bindings to the query's variables
      parameters:
        - $ref: '#/parameters/modelId'
        - $ref: '#/parameters/versionTag'
        - name: query
          in: body
          required: true
          schema:
            $ref: '#/definitions/KnowledgeCarrier'
      responses:
        200:
          description: The bound expression
          schema:
            type: array
            items:
              $ref: '#/definitions/Bindings'



  /models/{modelId}/versions/{versionTag}/reasoners/checks:
    post:
      tags:
        - Reasoning
      operationId: checkConsistency
      summary: determines whether the KB is internally logically consistent
      parameters:
        - $ref: '#/parameters/modelId'
        - $ref: '#/parameters/versionTag'
      responses:
        200:
          description: The bound expression


  /models/{modelId}/versions/{versionTag}/reasoners/sats:
    post:
      tags:
        - Reasoning
      operationId: checkSatisfiability
      description: determines whether the KB is satisfiable
      parameters:
        - $ref: '#/parameters/modelId'
        - $ref: '#/parameters/versionTag'
      responses:
        200:
          description: The bound expression
          schema:
            type: array
            items:
              $ref: '#/definitions/Bindings'


  /models/{modelId}/versions/{versionTag}/reasoners/classifiers/individuals/{entityId}:
    get:
      tags:
        - Reasoning
      operationId: listMembership
      description: lists all the classes that an individual is member of
      parameters:
        - $ref: '#/parameters/modelId'
        - $ref: '#/parameters/versionTag'
        - $ref: '#/parameters/entityId'
      responses:
        200:
          description: The bound expression
          schema:
            type: array
            items:
              $ref: '#/definitions/Pointer'
    post:
      tags:
        - Reasoning
      operationId: checkMembership
      description: determines if an individual is member of a class
      parameters:
        - $ref: '#/parameters/modelId'
        - $ref: '#/parameters/versionTag'
        - $ref: '#/parameters/entityId'
        - $ref: '#/parameters/classId'
      responses:
        200:
          description: Success

  /models/{modelId}/versions/{versionTag}/reasoners/classifiers/classes/{entityId}:
    get:
      tags:
        - Reasoning
      operationId: listSubsumptions
      description: lists all the superclasses of a given Class
      parameters:
        - $ref: '#/parameters/modelId'
        - $ref: '#/parameters/versionTag'
        - $ref: '#/parameters/entityId'
      responses:
        200:
          description: The bound expression
          schema:
            type: array
            items:
              $ref: '#/definitions/Pointer'
    post:
      tags:
        - Reasoning
      operationId: checkSubsumption
      description: determines if a Class is a subclass of another class
      parameters:
        - $ref: '#/parameters/modelId'
        - $ref: '#/parameters/versionTag'
        - $ref: '#/parameters/entityId'
        - $ref: '#/parameters/classId'
      responses:
        200:
          description: Success





parameters:
  modelId:
    in: path
    name: modelId
    type: string
    format: uuid
    required: true
    description: "The Identifier of a known Inferential Knowledge Asset (aka kao#Assessment) that
    is deployed and executed as a Service. This identifier SHOULD be an ID of the Asset itself,
    not of the manifestation of the Asset within the server."



  versionTag:
    in: path
    name: versionTag
    type: string
    required: true
    description: "The Identifier os a specific version of a Model, within the series identified
    by a modelId."

  entityId:
    in: path
    name: entityId
    type: string
    format: uuid
    required: true

  classId:
    in: query
    name: classId
    type: string
    format: uuid
    required: true



  lambdaId:
    in: path
    name: lambdaId
    description: TODO
    required: true
    type: string
    format: uuid

  sourceArtifact:
    name: sourceArtifact
    in: body
    required: true
    schema:
      $ref: '#/definitions/KnowledgeCarrier'

  xAccept:
    in: query
    name: xAccept
    description: |
      A formal MIME type used for content negotiation
    required: false
    type: string


definitions:
  Pointer:
    type: object
    description: "Compact proxy object that carries references to another Resource. This object
    used in operations that browse and list collections."

  KnowledgeCarrier:
    type: object
    description: "A Resource that describes a particular representation of a Knowledge Asset."

  Map:
    type: object
    description: "A single table row, implemented by means of a map, where the 'column' keys
    SHALL correspond to either the names or the concept URIs of one or more Data Concepts,
    and the values is one array of uniform length."

  Bindings:
    type: object

# Added by API Auto Mocking Plugin
schemes:
  - https
basePath: /omg.org/spec/API4KP/20200801/api/inference/v5