openapi: 3.0.1
info:
  title: Terminology Server API
  description: "This is a Terminology API built on top of the API4KP framework that\
    \ provides \naccess to Terminologies and Concepts.\n\nIn this context, \n\nTerminologies\
    \ are loosely defined as sets of Concepts, e.g. in the sense \nof SKOS ConceptSchemes\
    \ or Collections, or OWL Ontology Documents.\nConcepts are atomic units of knowledge\
    \ that can be described/defined, can\nbe related to each other, and can be evoked\
    \ by means of linguistic terms.\n\nImplementations of this API can be more formal\
    \ in their definition, e.g.\nby enforcing the separation of Class and Concept.\n\
    \nThis API is designed for Knowledge-Based implementations\n"
  contact:
    email: dsotty@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 4.1.0
servers:
  - url: https://virtserver.swaggerhub.com/omg.org/spec/API4KP/20200801/api/terminology/v4
tags:
  - name: Terms
    description: Terminology related operations
paths:
  /terminologies:
    get:
      tags:
        - Terms
      summary: Lists available terminologies
      description: |
        Enumerates the Terminologies currently managed by this server
      operationId: listTerminologies
      responses:
        200:
          description: |
            Returns a list of Pointers to the known Terminologies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pointer'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pointer'
        500:
          description: |
            Internal error
          content: {}
    delete:
      tags:
        - Terms
      summary: Clear the terminology content
      description: |
        Clears the server content.
        For proxy-oriented servers, this request should invalidate the internal caches
      operationId: clearTerminologies
      responses:
        200:
          description: |
            Success
          content: {}
        500:
          description: |
            Internal error
          content: {}
        501:
          description: "Not Implemented\n\n  \n"
          content: {}
  /terminologies/{vocabularyId}/versions/{versionTag}:
    get:
      tags:
        - Terms
      summary: Retrieves some representation of a terminology system
      description: |
        Returns a representation of a specific version of the given terminology.
        The terminology is supposed to define
        Supports content negotiation to handle e.g. RDF vs FHIR
      operationId: getVocabulary
      parameters:
        - name: vocabularyId
          in: path
          description: The id of the terminology system
          required: true
          schema:
            type: string
            format: uuid
        - name: versionTag
          in: path
          description: The version of the terminology system
          required: true
          schema:
            type: string
        - name: X-Accept
          in: header
          description: A formal MIME type that express the client's preferences during
            content negotiation
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeCarrier'
            application/xml:
              schema:
                $ref: '#/components/schemas/KnowledgeCarrier'
            text/html:
              schema:
                $ref: '#/components/schemas/KnowledgeCarrier'
        400:
          description: vocabulary not found
          content: {}
    post:
      tags:
        - Terms
      summary: Resolves a concept (expression) within a terminology system
      description: |
        Determines is a concept is a member of this vocabulary.
        Implementations depend on whether the vocabulary is enumerated, vs having
        a computable definition.
        The client can provide either a concept identifier, or a post-coordinated expression
      operationId: isMember
      parameters:
        - name: vocabularyId
          in: path
          description: The id of the terminology system
          required: true
          schema:
            type: string
            format: uuid
        - name: versionTag
          in: path
          description: The version of the terminology system
          required: true
          schema:
            type: string
        - name: conceptExpression
          in: query
          description: The id of a concept
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content: {}
        400:
          description: vocabulary not found
          content: {}
  /terminologies/{vocabularyId}/versions/{versionTag}/terms:
    get:
      tags:
        - Terms
      summary: Lists terms in a terminology system
      description: |
        Lists the terms in a given Vocabulary. Supports simple search by filtering
      operationId: getTerms
      parameters:
        - name: vocabularyId
          in: path
          description: The id of the terminology system
          required: true
          schema:
            type: string
            format: uuid
        - name: versionTag
          in: path
          description: The version of the terminology system
          required: true
          schema:
            type: string
        - name: label
          in: query
          description: Filters by terms with matching label
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConceptDescriptor'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConceptDescriptor'
        400:
          description: vocabulary not found
          content: {}
  /terminologies/{vocabularyId}/versions/{versionTag}/terms/{conceptId}:
    get:
      tags:
        - Terms
      summary: Describes a concept
      operationId: getTerm
      parameters:
        - name: vocabularyId
          in: path
          description: The id of the terminology system
          required: true
          schema:
            type: string
            format: uuid
        - name: versionTag
          in: path
          description: The version of the terminology system
          required: true
          schema:
            type: string
        - name: conceptId
          in: path
          description: The id of a concept
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptDescriptor'
            application/xml:
              schema:
                $ref: '#/components/schemas/ConceptDescriptor'
        400:
          description: vocabulary or concept not found
          content: {}
  /terminologies/{vocabularyId}/versions/{versionTag}/terms/{conceptId}/ancestors:
    get:
      tags:
        - Terms
      summary: List the ancestor(s) of the selected concept
      operationId: listAncestors
      parameters:
        - name: vocabularyId
          in: path
          description: The id of the terminology system
          required: true
          schema:
            type: string
            format: uuid
        - name: versionTag
          in: path
          description: The version of the terminology system
          required: true
          schema:
            type: string
        - name: conceptId
          in: path
          description: The id of a concept
          required: true
          schema:
            type: string
      responses:
        200:
          description: The query was executed successfully.  Does not imply that any
            result will be returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConceptDescriptor'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConceptDescriptor'
        400:
          description: vocabulary not found
          content: {}
    post:
      tags:
        - Terms
      summary: Determines the target concept is an ancestor of the selected concept
      operationId: isAncestor
      parameters:
        - name: vocabularyId
          in: path
          description: The id of the terminology system
          required: true
          schema:
            type: string
            format: uuid
        - name: versionTag
          in: path
          description: The version of the terminology system
          required: true
          schema:
            type: string
        - name: conceptId
          in: path
          description: The id of a concept
          required: true
          schema:
            type: string
        - name: testConceptId
          in: query
          description: The id of a concept
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: boolean
            application/xml:
              schema:
                type: boolean
        400:
          description: vocabulary not found
          content: {}
  /terminologies/terms:
    post:
      tags:
        - Terms
      summary: Searches for concepts by label
      operationId: searchTerms
      parameters:
        - name: searchQuery
          in: query
          description: The search query
          required: true
          schema:
            type: string
      responses:
        200:
          description: Matching terms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pointer'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pointer'
            text/html:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pointer'
  /terminologies/terms/{vocabularyTag}/{conceptId}:
    get:
      tags:
        - Terms
      summary: Looks up a concept in the context of a given vocabulary
      operationId: lookupTermInVocabulary
      parameters:
        - name: vocabularyTag
          in: path
          description: The id of the terminology system
          required: true
          schema:
            type: string
        - name: conceptId
          in: path
          description: The id of a concept
          required: true
          schema:
            type: string
        - name: X-Accept
          in: header
          description: A formal MIME type that express the client's preferences during
            content negotiation
          schema:
            type: string
      responses:
        200:
          description: concept resolved in at least one terminology
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeCarrier'
            application/xml:
              schema:
                $ref: '#/components/schemas/KnowledgeCarrier'
            text/html:
              schema:
                $ref: '#/components/schemas/KnowledgeCarrier'
        400:
          description: concept not found in any terminology
          content: {}
  /terminologies/terms/{conceptId}:
    get:
      tags:
        - Terms
      summary: Looks up a concept across terminology systems
      description: |
        Tries to resolve a concept, by id, across all known terminologies.
        Returns the most recent description of that concept, as represented by _any_ terminology
        in which the concept was (re)defined. If there are multiple definitions that cannot be sorted
        temporally, the server SHOULD validate that all the definitions are consistent.
        If not, the server MAY reconcile the descriptions, but COULD also
        return any one of the representations, non-deterministically
      operationId: lookupTerm
      parameters:
        - name: conceptId
          in: path
          description: The id of a concept
          required: true
          schema:
            type: string
        - name: X-Accept
          in: header
          description: A formal MIME type that express the client's preferences during
            content negotiation
          schema:
            type: string
      responses:
        200:
          description: concept resolved in at least one terminology
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptDescriptor'
            application/xml:
              schema:
                $ref: '#/components/schemas/ConceptDescriptor'
            text/html:
              schema:
                $ref: '#/components/schemas/ConceptDescriptor'
        400:
          description: concept not found in any terminology
          content: {}
components:
  schemas:
    Pointer:
      type: object
    ConceptDescriptor:
      type: object
    KnowledgeCarrier:
      type: object
  parameters:
    vocabularyId:
      name: vocabularyId
      in: path
      description: The id of the terminology system
      required: true
      schema:
        type: string
        format: uuid
    vocabularyTag:
      name: vocabularyTag
      in: path
      description: The id of the terminology system
      required: true
      schema:
        type: string
    conceptId:
      name: conceptId
      in: path
      description: The id of a concept
      required: true
      schema:
        type: string
    testConceptId:
      name: testConceptId
      in: query
      description: The id of a concept
      required: true
      schema:
        type: string
    conceptExpression:
      name: conceptExpression
      in: query
      description: The id of a concept
      required: true
      schema:
        type: string
    relationshipId:
      name: relationshipId
      in: query
      description: The id of a concept relationship
      schema:
        type: string
    versionTag:
      name: versionTag
      in: path
      description: The version of the terminology system
      required: true
      schema:
        type: string
    searchQuery:
      name: searchQuery
      in: query
      description: The search query
      required: true
      schema:
        type: string
    xAccept:
      name: X-Accept
      in: header
      description: A formal MIME type that express the client's preferences during
        content negotiation
      schema:
        type: string
