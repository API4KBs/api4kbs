### Feature Pipeline
### Feature Snapshot Branch X.X.X-SNAPSHOT
### No deployments to artifacts

trigger:
- feature*

pool:
  vmImage: 'ubuntu-latest'

variables: 
- group: kmdp-platform-variables

steps:

# STARTER STEP
- script: |
    echo Starting KMDP Feature Branch Pipeline!
  displayName: 'Pipeline Started'

# STEP 1: Read POM File and Set GAV Variables
- task: PowerShell@2
  displayName: 'Read POM and Set GAV Variables'
  inputs:
    targetType: 'inline'
    script: |
      [xml]$pomXml = Get-Content .\pom.xml
      # version
      Write-Host GroupId: $pomXml.project.groupId
      Write-Host ArtifactId: $pomXml.project.artifactId
      Write-Host Version: $pomXml.project.version
      $groupId=$pomXml.project.groupId
      $artifactId=$pomXml.project.artifactId
      $version=$pomXml.project.version
      $projectVersion=$version.replace("-SNAPSHOT","")
      Write-Host "##vso[task.setvariable variable=projectSnapShotVersion]$version"
      Write-Host "##vso[task.setvariable variable=projectVersion]$projectVersion"
      Write-Host "##vso[task.setvariable variable=projectGroupId]$groupId"
      Write-Host "##vso[task.setvariable variable=projectArtifactId]$artifactId"

# STEP 2: Write out all variables for validation
- task: PowerShell@2
  displayName: 'Write Env Variables'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host --------------------------------
      Write-Host POM Variables:
      Write-Host Project Group ID: $env:GROUP_ID
      Write-Host Project Artifact ID: $env:PROJECT_VERSION
      Write-Host Project Snapshot Version: $env:PROJECT_SNAPSHOT_VERSION
      Write-Host Project Version: $env:PROJECT_VERSION
      Write-Host --------------------------------
      Write-Host Variable Group:
      Write-Host Dev Version: $env:DEV_VERSION
      Write-Host Next Version: $env:NEXT_VERSION
      Write-Host Master Version: $env:MASTER_VERSION
      Write-Host Release Version: $env:RELEASE_VERSION
  env: 
    PROJECT_VERSION: $(projectVersion)
    ARTIFACT_ID: $(projectArtifactId)
    PROJECT_SNAPSHOT_VERSION: $(projectSnapShotVersion)
    GROUP_ID: $(projectGroupId)
    NEXT_VERSION: $(nextVersion)
    DEV_VERSION: $(devVersion)
    MASTER_VERSION: $(masterVersion)
    RELEASE_VERSION: $(releaseVersion)

# STEP 3 SLM Versioning Policy
- task: AlmVersioning@4
  displayName: 'SLM Update Version and Build Number'
  inputs:
    projectType: java
    versionFilePath: pom.xml
    versionTransformation: none

# STEP 4 Authenticate to Maven Feed 
- task: MavenAuthenticate@0
  displayName: 'Maven Authenticate'
  inputs:
    artifactsFeeds: 'KMD'

# STEP 5 Test Maven to AzDo KMD Artifacts
- task: Maven@3
  displayName: 'Maven Clean Test'
  inputs:
    mavenPomFile: 'pom.xml'
    goals: 'clean test'
    javaHomeOption: 'JDKVersion'
    jdkVersionOption: '1.8'
    jdkArchitectureOption: 'x64'
    options: '-q'

# ENDING STEP
- script: |
    echo Ending Feature Branch Pipeline!
  displayName: 'Pipeline Ended' 
