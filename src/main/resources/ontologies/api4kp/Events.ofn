Prefix(:=<http://www.omg.org/spec/API4KP/Events/>)
Prefix(sm:=<http://www.omg.org/techprocess/ab/SpecificationMetadata/>)
Prefix(dol:=<http://www.omg.org/spec/DOL/DOL-terms/>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(skos:=<http://www.w3.org/2004/02/skos/core#>)
Prefix(api4kp-op:=<http://www.omg.org/spec/API4KP/Operations/>)
Prefix(api4kp-tr:=<http://www.omg.org/spec/API4KP/Tries/>)
Prefix(api4kp-term:=<http://www.omg.org/spec/API4KP/Terminology/>)


Ontology(<http://www.omg.org/spec/API4KP/Events/>
<http://www.omg.org/spec/API4KP/20160801/Events/>
Import(<http://www.omg.org/techprocess/ab/SpecificationMetadata/>)
Import(<http://www.omg.org/spec/DOL/DOL-terms/>)
Annotation(<http://purl.org/dc/terms/license> "http://www.omg.org/techprocess/ab/SpecificationMetadata/MITLicense"^^xsd:anyURI)
Annotation(sm:contentLanguage "http://www.omg.org/spec/ODM/"^^xsd:anyURI)
Annotation(sm:contentLanguage "http://www.w3.org/standards/techs/owl#w3c_all"^^xsd:anyURI)
Annotation(sm:copyright "Copyright (c) 2014 Athan Services
      Copyright (c) 2014 Thematix Partners LLC
      Copyright (c) 2014 Object Management Group, Inc."^^xsd:string)
Annotation(sm:fileAbbreviation "api4kp-ev"^^xsd:string)
Annotation(sm:fileAbstract "This ontology covers terminology used for describing events defined by the API4KP specification."^^xsd:string)
Annotation(sm:filename "API4KPTerminologyEvent.rdf"^^xsd:string)
Annotation(rdfs:label "API4KP Event Terminology Ontology")

Declaration(Class(:ActionEvent-ExpressionIn))
Declaration(Class(:ActionEvent-ResourceIn))
Declaration(Class(:AddingEvent))
Declaration(Class(:AtomicEvent))
Declaration(Class(:AtomicEvent-AdditionToKnowledgeExpression))
Declaration(Class(:ConceptualizingEvent))
Declaration(Class(:CurriedActionEvent))
Declaration(Class(:CurriedActionEvent-HorizontalExpressionActionOut))
Declaration(Class(:ExpressingEvent))
Declaration(Class(:HorizontalAssetEvent))
Declaration(Class(:HorizontalEncodingEvent))
Declaration(Class(:HorizontalEvent))
Declaration(Class(:HorizontalExpressionEvent))
Declaration(Class(:HorizontalItemEvent))
Declaration(Class(:HorizontalManifestationEvent))
Declaration(Class(:InStreamEvent))
Declaration(Class(:InStreamingEvent))
Declaration(Class(:InternalAddingEvent))
Declaration(Class(:KnowledgeEvent))
Declaration(Class(:LiftingEvent))
Declaration(Class(:LoweringEvent))
Declaration(Class(:ManifestingEvent))
Declaration(Class(:MarshallingEvent))
Declaration(Class(:NullaryEvent))
Declaration(Class(:OutStreamingEvent))
Declaration(Class(:ParsingEvent))
Declaration(Class(:PublicAddingEvent-KnowledgeResourceToImmutableKB))
Declaration(Class(:PublicQueryingResourceEvent))
Declaration(Class(:QueryingEvent))
Declaration(Class(:SideEffectFreeEvent))
Declaration(Class(:SideEffectfulEvent))
Declaration(Class(:UnaryEvent))
Declaration(Class(:UnmarshallingEvent))
Declaration(Class(:VoidActionEvent))
Declaration(Class(api4kp-op:AdditionToKnowledgeExpressionOperation))
Declaration(Class(api4kp-op:AtomicKOperation))
Declaration(Class(api4kp-op:ConceptualizingAction))
Declaration(Class(api4kp-op:ExpressingAction))
Declaration(Class(api4kp-op:HigherOrderAtomicKOperation))
Declaration(Class(api4kp-op:HorizontalAtomicKOperation))
Declaration(Class(api4kp-op:HorizontalExpressionAction))
Declaration(Class(api4kp-op:InStreamingAction))
Declaration(Class(api4kp-op:KnowledgeOperation))
Declaration(Class(api4kp-op:LiftingAtomicKOperation))
Declaration(Class(api4kp-op:LoweringAtomicKOperation))
Declaration(Class(api4kp-op:ManifestingAction))
Declaration(Class(api4kp-op:MarshallingAction))
Declaration(Class(api4kp-op:NullaryOperation))
Declaration(Class(api4kp-op:OutStreamingAction))
Declaration(Class(api4kp-op:ParsingAction))
Declaration(Class(api4kp-op:SideEffectFreeOperation))
Declaration(Class(api4kp-op:SideEffectfulOperation))
Declaration(Class(api4kp-op:UnaryOperation))
Declaration(Class(api4kp-op:UnmarshallingAction))
Declaration(Class(api4kp-op:Void))
Declaration(Class(api4kp-op:VoidOperation))
Declaration(Class(api4kp-term:AnswerSubstitutionCollectionResource))
Declaration(Class(api4kp-term:ExtensionExpressionMapping))
Declaration(Class(api4kp-term:ImmutableKnowledgeBase))
Declaration(Class(api4kp-term:KnowledgeAsset))
Declaration(Class(api4kp-term:KnowledgeEncoding))
Declaration(Class(api4kp-term:KnowledgeExpression))
Declaration(Class(api4kp-term:KnowledgeItem))
Declaration(Class(api4kp-term:KnowledgeManifestation))
Declaration(Class(api4kp-term:KnowledgePlatform))
Declaration(Class(api4kp-term:KnowledgeResource))
Declaration(Class(api4kp-term:KnowledgeSource))
Declaration(Class(api4kp-term:Mapping))
Declaration(Class(api4kp-term:QueryResource))
Declaration(Class(api4kp-term:QuerySource))
Declaration(ObjectProperty(:adds))
Declaration(ObjectProperty(:addsTo))
Declaration(ObjectProperty(:appliesQuery))
Declaration(ObjectProperty(:appliesQueryTo))
Declaration(ObjectProperty(:hasInput))
Declaration(ObjectProperty(:hasKPOutput))
Declaration(ObjectProperty(:hasOutput))
Declaration(ObjectProperty(:hasOutputFromConceptualizing))
Declaration(ObjectProperty(:hasOutputFromInStreaming))
Declaration(ObjectProperty(:hasOutputFromParsing))
Declaration(ObjectProperty(:hasOutputFromUnmarshalling))
Declaration(ObjectProperty(:hasUnaryInput))
Declaration(ObjectProperty(:isInputOf))
Declaration(ObjectProperty(:isKPOutputOf))
Declaration(ObjectProperty(:isOutputOf))
Declaration(ObjectProperty(:isUnaryInputOf))
Declaration(ObjectProperty(api4kp-term:isEventOf))
Declaration(ObjectProperty(api4kp-term:matchesMapping))
Declaration(ObjectProperty(api4kp-tr:hasInput))
Declaration(ObjectProperty(api4kp-tr:isEventOf))

############################
#   Object Properties
############################

# Object Property: :adds (adds resource)

AnnotationAssertion(rdfs:label :adds "adds resource")
AnnotationAssertion(skos:note :adds "need inverse")
SubObjectPropertyOf(:adds :hasInput)
ObjectPropertyDomain(:adds :InternalAddingEvent)
ObjectPropertyRange(:adds api4kp-term:KnowledgeSource)

# Object Property: :addsTo (adds resource to)

AnnotationAssertion(rdfs:label :addsTo "adds resource to")
AnnotationAssertion(skos:note :addsTo "need inverse")
SubObjectPropertyOf(:addsTo :hasInput)
FunctionalObjectProperty(:addsTo)
ObjectPropertyDomain(:addsTo :InternalAddingEvent)
ObjectPropertyRange(:addsTo api4kp-term:KnowledgeSource)

# Object Property: :appliesQuery (applies query resource)

AnnotationAssertion(rdfs:label :appliesQuery "applies query resource")
AnnotationAssertion(skos:definition :appliesQuery "TBD"^^xsd:string)
AnnotationAssertion(skos:note :appliesQuery "need inverse")
SubObjectPropertyOf(:appliesQuery :hasInput)
ObjectPropertyDomain(:appliesQuery :QueryingEvent)
ObjectPropertyRange(:appliesQuery api4kp-term:QuerySource)

# Object Property: :appliesQueryTo (applies query to resource)

AnnotationAssertion(rdfs:label :appliesQueryTo "applies query to resource")
AnnotationAssertion(skos:definition :appliesQueryTo "TBD"^^xsd:string)
AnnotationAssertion(skos:note :appliesQueryTo "need inverse")
SubObjectPropertyOf(:appliesQueryTo :hasInput)
FunctionalObjectProperty(:appliesQueryTo)
ObjectPropertyDomain(:appliesQueryTo :QueryingEvent)
ObjectPropertyRange(:appliesQueryTo api4kp-term:KnowledgeSource)

# Object Property: :hasInput (has input)

AnnotationAssertion(rdfs:label :hasInput "has input")
AnnotationAssertion(skos:definition :hasInput "input of an event"^^xsd:string)
InverseObjectProperties(:hasInput :isInputOf)
ObjectPropertyDomain(:hasInput :KnowledgeEvent)

# Object Property: :hasKPOutput (has knowledge platform output)

AnnotationAssertion(rdfs:label :hasKPOutput "has knowledge platform output")
SubObjectPropertyOf(:hasKPOutput :hasOutput)
InverseObjectProperties(:hasKPOutput :isKPOutputOf)
ObjectPropertyRange(:hasKPOutput api4kp-term:KnowledgePlatform)

# Object Property: :hasOutput (has output)

AnnotationAssertion(rdfs:label :hasOutput "has output")
AnnotationAssertion(skos:definition :hasOutput "output of an event"^^xsd:string)
AnnotationAssertion(skos:note :hasOutput "      
    <owl:propertyChainAxiom rdf:parseType=\"Collection\">
    <rdf:Description rdf:about=\"http://www.omg.org/spec/API4KP/Tries/isEventOf\"/>
    <rdf:Description rdf:about=\"http://www.omg.org/spec/API4KP/Tries/isDelegatedTo\"/>
    <rdf:Description rdf:about=\"http://www.omg.org/spec/API4KP/Tries/hasOutput\"/>
    </owl:propertyChainAxiom>
    ")
InverseObjectProperties(:hasOutput :isOutputOf)
FunctionalObjectProperty(:hasOutput)
ObjectPropertyDomain(:hasOutput :KnowledgeEvent)

# Object Property: :hasOutputFromConceptualizing (has output from conceptualizing)

AnnotationAssertion(rdfs:label :hasOutputFromConceptualizing "has output from conceptualizing")
AnnotationAssertion(skos:note :hasOutputFromConceptualizing "need inverse")
SubObjectPropertyOf(:hasOutputFromConceptualizing :hasOutput)
ObjectPropertyDomain(:hasOutputFromConceptualizing :ConceptualizingEvent)
ObjectPropertyRange(:hasOutputFromConceptualizing api4kp-term:KnowledgeAsset)

# Object Property: :hasOutputFromInStreaming (has output from instreaming)

AnnotationAssertion(rdfs:label :hasOutputFromInStreaming "has output from instreaming")
AnnotationAssertion(skos:note :hasOutputFromInStreaming "need inverse")
SubObjectPropertyOf(:hasOutputFromInStreaming :hasOutput)
ObjectPropertyDomain(:hasOutputFromInStreaming :InStreamEvent)
ObjectPropertyRange(:hasOutputFromInStreaming api4kp-term:KnowledgeEncoding)

# Object Property: :hasOutputFromParsing (has output from parsing)

AnnotationAssertion(rdfs:label :hasOutputFromParsing "has output from parsing")
AnnotationAssertion(skos:note :hasOutputFromParsing "need inverse")
SubObjectPropertyOf(:hasOutputFromParsing :hasOutput)
ObjectPropertyDomain(:hasOutputFromParsing :ParsingEvent)
ObjectPropertyRange(:hasOutputFromParsing api4kp-term:KnowledgeExpression)

# Object Property: :hasOutputFromUnmarshalling (has output from unmarshalling)

AnnotationAssertion(rdfs:label :hasOutputFromUnmarshalling "has output from unmarshalling")
AnnotationAssertion(skos:note :hasOutputFromUnmarshalling "need inverse")
SubObjectPropertyOf(:hasOutputFromUnmarshalling :hasOutput)
ObjectPropertyDomain(:hasOutputFromUnmarshalling :UnmarshallingEvent)
ObjectPropertyRange(:hasOutputFromUnmarshalling api4kp-term:KnowledgeManifestation)

# Object Property: :hasUnaryInput (has unary input)

AnnotationAssertion(rdfs:label :hasUnaryInput "has unary input")
SubObjectPropertyOf(:hasUnaryInput :hasInput)
InverseObjectProperties(:hasUnaryInput :isUnaryInputOf)
FunctionalObjectProperty(:hasUnaryInput)

# Object Property: :isInputOf (is input of)

AnnotationAssertion(rdfs:label :isInputOf "is input of")

# Object Property: :isKPOutputOf (is knowledge platform that is output of)

AnnotationAssertion(rdfs:label :isKPOutputOf "is knowledge platform that is output of")

# Object Property: :isOutputOf (is output of)

AnnotationAssertion(rdfs:label :isOutputOf "is output of")

# Object Property: :isUnaryInputOf (is unary input of)

AnnotationAssertion(rdfs:label :isUnaryInputOf "is unary input of")



############################
#   Classes
############################

# Class: :ActionEvent-ExpressionIn (action event - resource in)

AnnotationAssertion(rdfs:label :ActionEvent-ExpressionIn "action event - resource in")
AnnotationAssertion(skos:definition :ActionEvent-ExpressionIn "action event whose input is a knowledge expression"^^xsd:string)
SubClassOf(:ActionEvent-ExpressionIn :ActionEvent-ResourceIn)
SubClassOf(:ActionEvent-ExpressionIn ObjectSomeValuesFrom(:hasInput api4kp-term:KnowledgeExpression))

# Class: :ActionEvent-ResourceIn (action event - resource in)

AnnotationAssertion(rdfs:label :ActionEvent-ResourceIn "action event - resource in")
AnnotationAssertion(skos:definition :ActionEvent-ResourceIn "action event whose input is a knowledge resources"^^xsd:string)
SubClassOf(:ActionEvent-ResourceIn :AtomicEvent)
SubClassOf(:ActionEvent-ResourceIn ObjectSomeValuesFrom(:hasInput api4kp-term:KnowledgeResource))

# Class: :AddingEvent (adding event)

AnnotationAssertion(rdfs:label :AddingEvent "adding event")
AnnotationAssertion(skos:definition :AddingEvent "event of an adding operation"^^xsd:string)
SubClassOf(:AddingEvent :KnowledgeEvent)

# Class: :AtomicEvent (action event)

AnnotationAssertion(rdfs:label :AtomicEvent "action event")
AnnotationAssertion(skos:definition :AtomicEvent "event of an Action."^^xsd:string)
EquivalentClasses(:AtomicEvent ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:AtomicKOperation))
SubClassOf(:AtomicEvent :UnaryEvent)

# Class: :AtomicEvent-AdditionToKnowledgeExpression (action event - addition to knowledge expression)

AnnotationAssertion(rdfs:label :AtomicEvent-AdditionToKnowledgeExpression "action event - addition to knowledge expression")
AnnotationAssertion(skos:definition :AtomicEvent-AdditionToKnowledgeExpression "'addition to' action event that maps knowledge expressions into knowledge expressions."^^xsd:string)
EquivalentClasses(:AtomicEvent-AdditionToKnowledgeExpression ObjectIntersectionOf(:AddingEvent :AtomicEvent ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:AdditionToKnowledgeExpressionOperation)))
SubClassOf(:AtomicEvent-AdditionToKnowledgeExpression :AddingEvent)
SubClassOf(:AtomicEvent-AdditionToKnowledgeExpression :AtomicEvent)
SubClassOf(:AtomicEvent-AdditionToKnowledgeExpression :HorizontalExpressionEvent)
SubClassOf(:AtomicEvent-AdditionToKnowledgeExpression ObjectSomeValuesFrom(api4kp-term:matchesMapping api4kp-term:ExtensionExpressionMapping))

# Class: :ConceptualizingEvent (conceptualizinging event)

AnnotationAssertion(rdfs:label :ConceptualizingEvent "conceptualizinging event")
AnnotationAssertion(skos:definition :ConceptualizingEvent "event of a conceptualizing operation."^^xsd:string)
EquivalentClasses(:ConceptualizingEvent ObjectIntersectionOf(:LiftingEvent ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:ConceptualizingAction)))
SubClassOf(:ConceptualizingEvent :LiftingEvent)
SubClassOf(:ConceptualizingEvent ObjectSomeValuesFrom(:hasInput api4kp-term:KnowledgeExpression))
SubClassOf(:ConceptualizingEvent ObjectSomeValuesFrom(:hasOutput api4kp-term:KnowledgeAsset))

# Class: :CurriedActionEvent (curried action event)

AnnotationAssertion(rdfs:label :CurriedActionEvent "curried action event"@en)
AnnotationAssertion(skos:definition :CurriedActionEvent "side-effect free action event that maps to an action"^^xsd:string)
EquivalentClasses(:CurriedActionEvent ObjectIntersectionOf(:AtomicEvent ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:HigherOrderAtomicKOperation)))
SubClassOf(:CurriedActionEvent :AtomicEvent)
SubClassOf(:CurriedActionEvent :SideEffectFreeEvent)
SubClassOf(:CurriedActionEvent ObjectSomeValuesFrom(:hasOutput api4kp-op:AtomicKOperation))

# Class: :CurriedActionEvent-HorizontalExpressionActionOut (curried action event - horizontal expression action out)

AnnotationAssertion(rdfs:label :CurriedActionEvent-HorizontalExpressionActionOut "curried action event - horizontal expression action out"@en)
AnnotationAssertion(skos:definition :CurriedActionEvent-HorizontalExpressionActionOut "curried action event whose output is a horizontal expression action")
SubClassOf(:CurriedActionEvent-HorizontalExpressionActionOut :CurriedActionEvent)
SubClassOf(:CurriedActionEvent-HorizontalExpressionActionOut ObjectSomeValuesFrom(:hasOutput api4kp-op:HorizontalExpressionAction))

# Class: :ExpressingEvent (expressing event)

AnnotationAssertion(rdfs:label :ExpressingEvent "expressing event")
AnnotationAssertion(skos:definition :ExpressingEvent "lowering event transforming a knowledge asset into
      a generalized expression."^^xsd:string)
EquivalentClasses(:ExpressingEvent ObjectIntersectionOf(:LoweringEvent ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:ExpressingAction)))
SubClassOf(:ExpressingEvent :LoweringEvent)
SubClassOf(:ExpressingEvent ObjectSomeValuesFrom(:hasInput api4kp-term:KnowledgeAsset))
SubClassOf(:ExpressingEvent ObjectSomeValuesFrom(:hasOutput api4kp-term:KnowledgeExpression))

# Class: :HorizontalEvent (horizontal event)

AnnotationAssertion(rdfs:label :HorizontalEvent "horizontal event"@en)
AnnotationAssertion(skos:definition :HorizontalEvent "side-effect-free unary event whose input and output are knowledge resources at the same level of abstraction that are related by a mapping (sensu DOL)"^^xsd:string)
EquivalentClasses(:HorizontalEvent ObjectIntersectionOf(:AtomicEvent ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:HorizontalAtomicKOperation)))
SubClassOf(:HorizontalEvent :AtomicEvent)
SubClassOf(:HorizontalEvent :SideEffectFreeEvent)
SubClassOf(:HorizontalEvent ObjectSomeValuesFrom(:hasInput api4kp-term:KnowledgeResource))
SubClassOf(:HorizontalEvent ObjectSomeValuesFrom(:hasOutput api4kp-term:KnowledgeResource))
SubClassOf(:HorizontalEvent ObjectSomeValuesFrom(api4kp-term:matchesMapping api4kp-term:Mapping))
DisjointUnion(:HorizontalEvent :HorizontalAssetEvent :HorizontalEncodingEvent :HorizontalExpressionEvent :HorizontalItemEvent :HorizontalManifestationEvent)

# Class: :InStreamingEvent (instreaming event)

AnnotationAssertion(rdfs:label :InStreamingEvent "instreaming event")
AnnotationAssertion(skos:definition :InStreamingEvent "lifting event transforming a knowledge item into a
      knowledge encoding."^^xsd:string)
EquivalentClasses(:InStreamingEvent ObjectIntersectionOf(:LiftingEvent ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:InStreamingAction)))
SubClassOf(:InStreamingEvent :LiftingEvent)
SubClassOf(:InStreamingEvent ObjectSomeValuesFrom(:hasInput api4kp-term:KnowledgeItem))
SubClassOf(:InStreamingEvent ObjectSomeValuesFrom(:hasOutput api4kp-term:KnowledgeEncoding))

# Class: :KnowledgeEvent (knowledge event)

AnnotationAssertion(rdfs:label :KnowledgeEvent "knowledge event")
AnnotationAssertion(skos:definition :KnowledgeEvent "successful evaluation or execution of a knowledge operation by a particular application at a particular time"^^xsd:string)
AnnotationAssertion(skos:example :KnowledgeEvent "Example: the adding of an Asset to an immutable KB to generate a new immutable KB,
      executed by some application. "^^xsd:string)
AnnotationAssertion(skos:example :KnowledgeEvent "a specialist, like a cardiologist, taps the heartrate symbol on a touchscreen that results in the submission of a SPARQL query about a semantically-defined subset of a patient's vital signs.")
AnnotationAssertion(skos:example :KnowledgeEvent "when a nurse activates a biomedical device, a stream of RDF graphs is ``published'' describing a patient's vital signs")
AnnotationAssertion(skos:scopeNote :KnowledgeEvent "Some Knowledge Operations can be used as transition functions for a mutable knowledge source, where their evaluation describes an event in the sense of \\cite{Rosemann2002}, as a state transition of a dynamic entity; we generalize this concept of events because not all API4KP Knowledge Events correspond to state transitions.")
EquivalentClasses(:KnowledgeEvent ObjectIntersectionOf(owl:Thing ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:KnowledgeOperation)))

# Class: :LiftingEvent (lifting event)

AnnotationAssertion(rdfs:label :LiftingEvent "lifting event")
AnnotationAssertion(skos:definition :LiftingEvent "event of a lifting action."^^xsd:string)
EquivalentClasses(:LiftingEvent ObjectIntersectionOf(:AtomicEvent ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:LiftingAtomicKOperation)))
SubClassOf(:LiftingEvent :AtomicEvent)
SubClassOf(:LiftingEvent :SideEffectFreeEvent)
SubClassOf(:LiftingEvent ObjectSomeValuesFrom(:hasInput api4kp-term:KnowledgeResource))
SubClassOf(:LiftingEvent ObjectSomeValuesFrom(:hasOutput api4kp-term:KnowledgeResource))
DisjointUnion(:LiftingEvent :ConceptualizingEvent :InStreamingEvent :ParsingEvent :UnmarshallingEvent)

# Class: :LoweringEvent (lowering event)

AnnotationAssertion(rdfs:label :LoweringEvent "lowering event")
AnnotationAssertion(skos:definition :LoweringEvent "event of a lowering action."^^xsd:string)
EquivalentClasses(:LoweringEvent ObjectIntersectionOf(:AtomicEvent ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:LoweringAtomicKOperation)))
SubClassOf(:LoweringEvent :AtomicEvent)
SubClassOf(:LoweringEvent :SideEffectFreeEvent)
SubClassOf(:LoweringEvent ObjectSomeValuesFrom(:hasInput api4kp-term:KnowledgeResource))
SubClassOf(:LoweringEvent ObjectSomeValuesFrom(:hasOutput api4kp-term:KnowledgeResource))
DisjointUnion(:LoweringEvent :ExpressingEvent :ManifestingEvent :MarshallingEvent :OutStreamingEvent)

# Class: :ManifestingEvent (manifesting event)

AnnotationAssertion(rdfs:label :ManifestingEvent "manifesting event")
AnnotationAssertion(skos:definition :ManifestingEvent "lowering event transforming a generalized
      expression into a knowledge manifestation."^^xsd:string)
EquivalentClasses(:ManifestingEvent ObjectIntersectionOf(:LoweringEvent ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:ManifestingAction)))
SubClassOf(:ManifestingEvent :LoweringEvent)
SubClassOf(:ManifestingEvent ObjectSomeValuesFrom(:hasInput api4kp-term:KnowledgeExpression))
SubClassOf(:ManifestingEvent ObjectSomeValuesFrom(:hasOutput api4kp-term:KnowledgeManifestation))

# Class: :MarshallingEvent (marshalling event)

AnnotationAssertion(rdfs:label :MarshallingEvent "marshalling event")
AnnotationAssertion(skos:definition :MarshallingEvent "lowering event transforming a knowledge
      manifestation into a knowledge encoding."^^xsd:string)
EquivalentClasses(:MarshallingEvent ObjectIntersectionOf(:LoweringEvent ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:MarshallingAction)))
SubClassOf(:MarshallingEvent :LoweringEvent)
SubClassOf(:MarshallingEvent ObjectSomeValuesFrom(:hasInput api4kp-term:KnowledgeManifestation))
SubClassOf(:MarshallingEvent ObjectSomeValuesFrom(:hasOutput api4kp-term:KnowledgeEncoding))

# Class: :NullaryEvent (nullary event)

AnnotationAssertion(rdfs:label :NullaryEvent "nullary event"@en)
EquivalentClasses(:NullaryEvent ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:NullaryOperation))
SubClassOf(:NullaryEvent :KnowledgeEvent)
SubClassOf(:NullaryEvent ObjectExactCardinality(0 api4kp-tr:hasInput))

# Class: :OutStreamingEvent (outstreaming event)

AnnotationAssertion(rdfs:label :OutStreamingEvent "outstreaming event")
AnnotationAssertion(skos:definition :OutStreamingEvent "lowering event transforming a knowledge encoding into a
      knowledge item."^^xsd:string)
EquivalentClasses(:OutStreamingEvent ObjectIntersectionOf(:LoweringEvent ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:OutStreamingAction)))
SubClassOf(:OutStreamingEvent :LoweringEvent)
SubClassOf(:OutStreamingEvent ObjectSomeValuesFrom(:hasInput api4kp-term:KnowledgeEncoding))
SubClassOf(:OutStreamingEvent ObjectSomeValuesFrom(:hasOutput api4kp-term:KnowledgeItem))

# Class: :ParsingEvent (parsing event)

AnnotationAssertion(rdfs:label :ParsingEvent "parsing event")
AnnotationAssertion(skos:definition :ParsingEvent "action event of transforming a knowledge
      manifestation into a generalized expression."^^xsd:string)
EquivalentClasses(:ParsingEvent ObjectIntersectionOf(:LiftingEvent ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:ParsingAction)))
SubClassOf(:ParsingEvent :LiftingEvent)
SubClassOf(:ParsingEvent ObjectSomeValuesFrom(:hasInput api4kp-term:KnowledgeManifestation))
SubClassOf(:ParsingEvent ObjectSomeValuesFrom(:hasOutput api4kp-term:KnowledgeExpression))

# Class: :PublicAddingEvent-KnowledgeResourceToImmutableKB (public event adding knowledge resources to immutable KBs)

AnnotationAssertion(rdfs:label :PublicAddingEvent-KnowledgeResourceToImmutableKB "public event adding knowledge resources to immutable KBs")
AnnotationAssertion(skos:definition :PublicAddingEvent-KnowledgeResourceToImmutableKB "public event adding a knowlede
      resource to an immutable knowledge base producing an immutable knowledge base"^^xsd:string)
SubClassOf(:PublicAddingEvent-KnowledgeResourceToImmutableKB :AddingEvent)
SubClassOf(:PublicAddingEvent-KnowledgeResourceToImmutableKB :SideEffectFreeEvent)
SubClassOf(:PublicAddingEvent-KnowledgeResourceToImmutableKB ObjectSomeValuesFrom(:adds api4kp-term:KnowledgeResource))
SubClassOf(:PublicAddingEvent-KnowledgeResourceToImmutableKB ObjectSomeValuesFrom(:addsTo api4kp-term:ImmutableKnowledgeBase))
SubClassOf(:PublicAddingEvent-KnowledgeResourceToImmutableKB ObjectSomeValuesFrom(:hasOutput api4kp-term:ImmutableKnowledgeBase))

# Class: :PublicQueryingResourceEvent (public querying resource event)

AnnotationAssertion(rdfs:label :PublicQueryingResourceEvent "public querying resource event")
AnnotationAssertion(skos:definition :PublicQueryingResourceEvent "public event that applies a query resource to a focused resource producing a (resource) collection of answer
      substitutions."^^xsd:string)
SubClassOf(:PublicQueryingResourceEvent :QueryingEvent)
SubClassOf(:PublicQueryingResourceEvent ObjectSomeValuesFrom(:appliesQuery api4kp-term:QueryResource))
SubClassOf(:PublicQueryingResourceEvent ObjectSomeValuesFrom(:appliesQueryTo api4kp-term:KnowledgeAsset))
SubClassOf(:PublicQueryingResourceEvent ObjectSomeValuesFrom(:hasOutput api4kp-term:AnswerSubstitutionCollectionResource))

# Class: :SideEffectFreeEvent (side-effect-free event)

AnnotationAssertion(rdfs:label :SideEffectFreeEvent "side-effect-free event")
AnnotationAssertion(skos:definition :SideEffectFreeEvent "event of a side-effect-free operation"^^xsd:string)
EquivalentClasses(:SideEffectFreeEvent ObjectIntersectionOf(owl:Thing ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:SideEffectFreeOperation)))
SubClassOf(:SideEffectFreeEvent :KnowledgeEvent)

# Class: :SideEffectfulEvent (side-effectful event)

AnnotationAssertion(rdfs:label :SideEffectfulEvent "side-effectful event")
AnnotationAssertion(skos:definition :SideEffectfulEvent "event of a side-effectful operation"^^xsd:string)
EquivalentClasses(:SideEffectfulEvent ObjectIntersectionOf(owl:Thing ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:SideEffectfulOperation)))
SubClassOf(:SideEffectfulEvent :KnowledgeEvent)

# Class: :UnaryEvent (unary event)

AnnotationAssertion(rdfs:label :UnaryEvent "unary event")
AnnotationAssertion(skos:definition :UnaryEvent "event of a unary operation"^^xsd:string)
EquivalentClasses(:UnaryEvent ObjectIntersectionOf(owl:Thing ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:UnaryOperation)))
SubClassOf(:UnaryEvent :KnowledgeEvent)
SubClassOf(:UnaryEvent ObjectSomeValuesFrom(:hasUnaryInput owl:Thing))

# Class: :UnmarshallingEvent (unmarshalling event)

AnnotationAssertion(rdfs:label :UnmarshallingEvent "unmarshalling event")
AnnotationAssertion(skos:definition :UnmarshallingEvent "lifting event that transforms knowledge encodings into knowledge manifestations."^^xsd:string)
EquivalentClasses(:UnmarshallingEvent ObjectIntersectionOf(:LiftingEvent ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:UnmarshallingAction)))
SubClassOf(:UnmarshallingEvent :LiftingEvent)
SubClassOf(:UnmarshallingEvent ObjectSomeValuesFrom(:hasInput api4kp-term:KnowledgeEncoding))
SubClassOf(:UnmarshallingEvent ObjectSomeValuesFrom(:hasOutput api4kp-term:KnowledgeManifestation))

# Class: :VoidActionEvent (void action event)

AnnotationAssertion(rdfs:label :VoidActionEvent "void action event"@en)
AnnotationAssertion(skos:definition :VoidActionEvent "side-effectful action event whose output is void"^^xsd:string)
EquivalentClasses(:VoidActionEvent ObjectIntersectionOf(:AtomicEvent ObjectSomeValuesFrom(api4kp-term:isEventOf api4kp-op:VoidOperation)))
SubClassOf(:VoidActionEvent :AtomicEvent)
SubClassOf(:VoidActionEvent :SideEffectfulEvent)
SubClassOf(:VoidActionEvent ObjectSomeValuesFrom(:hasOutput api4kp-op:Void))


SubObjectPropertyOf(ObjectPropertyChain(api4kp-tr:isEventOf api4kp-tr:hasInput) :hasInput)
)