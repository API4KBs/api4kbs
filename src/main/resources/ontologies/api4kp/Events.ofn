Prefix(:=<http://www.omg.org/spec/API4KP/Events>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.omg.org/spec/API4KP/Events>
<http://www.omg.org/spec/API4KP/20160801/Events>
Import(<http://www.omg.org/techprocess/ab/SpecificationMetadata/>)
Import(<http://www.omg.org/spec/DOL/DOL-terms/>)
Annotation(<http://purl.org/dc/terms/license> "http://www.omg.org/techprocess/ab/SpecificationMetadata/MITLicense"^^xsd:anyURI)
Annotation(<http://www.omg.org/techprocess/ab/SpecificationMetadata/contentLanguage> "http://www.omg.org/spec/ODM/"^^xsd:anyURI)
Annotation(<http://www.omg.org/techprocess/ab/SpecificationMetadata/contentLanguage> "http://www.w3.org/standards/techs/owl#w3c_all"^^xsd:anyURI)
Annotation(<http://www.omg.org/techprocess/ab/SpecificationMetadata/copyright> "Copyright (c) 2014 Athan Services
      Copyright (c) 2014 Thematix Partners LLC
      Copyright (c) 2014 Object Management Group, Inc."^^xsd:string)
Annotation(<http://www.omg.org/techprocess/ab/SpecificationMetadata/fileAbbreviation> "api4kp-ev"^^xsd:string)
Annotation(<http://www.omg.org/techprocess/ab/SpecificationMetadata/fileAbstract> "This ontology covers terminology used for describing events defined by the API4KP specification."^^xsd:string)
Annotation(<http://www.omg.org/techprocess/ab/SpecificationMetadata/filename> "API4KPTerminologyEvent.rdf"^^xsd:string)
Annotation(rdfs:label "API4KP Event Terminology Ontology")

Declaration(Class(<http://www.omg.org/spec/API4KP/Terminology/AnswerSubstitutionCollectionResource>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Terminology/ExtensionExpressionMapping>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Terminology/ImmutableKnowledgeBase>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Terminology/KnowledgeAsset>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Terminology/KnowledgeEncoding>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Terminology/KnowledgeExpression>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Terminology/KnowledgeItem>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Terminology/KnowledgeManifestation>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Terminology/KnowledgePlatform>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Terminology/KnowledgeResource>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Terminology/KnowledgeSource>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Terminology/Mapping>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Terminology/QueryResource>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Terminology/QuerySource>))
Declaration(Class(:ActionEvent-ExpressionIn))
Declaration(Class(:ActionEvent-ResourceIn))
Declaration(Class(:AddingEvent))
Declaration(Class(:AtomicEvent))
Declaration(Class(:AtomicEvent-AdditionToKnowledgeExpression))
Declaration(Class(:ConceptualizingEvent))
Declaration(Class(:CurriedActionEvent))
Declaration(Class(:CurriedActionEvent-HorizontalExpressionActionOut))
Declaration(Class(:ExpressingEvent))
Declaration(Class(:HorizontalAssetEvent))
Declaration(Class(:HorizontalEncodingEvent))
Declaration(Class(:HorizontalEvent))
Declaration(Class(:HorizontalExpressionEvent))
Declaration(Class(:HorizontalItemEvent))
Declaration(Class(:HorizontalManifestationEvent))
Declaration(Class(:InStreamEvent))
Declaration(Class(:InStreamingEvent))
Declaration(Class(:InternalAddingEvent))
Declaration(Class(:KnowledgeEvent))
Declaration(Class(:LiftingEvent))
Declaration(Class(:LoweringEvent))
Declaration(Class(:ManifestingEvent))
Declaration(Class(:MarshallingEvent))
Declaration(Class(:NullaryEvent))
Declaration(Class(:OutStreamingEvent))
Declaration(Class(:ParsingEvent))
Declaration(Class(:PublicAddingEvent-KnowledgeResourceToImmutableKB))
Declaration(Class(:PublicQueryingResourceEvent))
Declaration(Class(:QueryingEvent))
Declaration(Class(:SideEffectFreeEvent))
Declaration(Class(:SideEffectfulEvent))
Declaration(Class(:UnaryEvent))
Declaration(Class(:UnmarshallingEvent))
Declaration(Class(:VoidActionEvent))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/AdditionToKnowledgeExpressionOperation>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/AtomicKOperation>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/ConceptualizingAction>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/ExpressingAction>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/HigherOrderAtomicKOperation>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/HorizontalAtomicKOperation>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/HorizontalExpressionAction>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/InStreamingAction>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/KnowledgeOperation>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/LiftingAtomicKOperation>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/LoweringAtomicKOperation>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/ManifestingAction>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/MarshallingAction>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/NullaryOperation>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/OutStreamingAction>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/ParsingAction>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/SideEffectFreeOperation>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/SideEffectfulOperation>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/UnaryOperation>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/UnmarshallingAction>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/Void>))
Declaration(Class(<http://www.omg.org/spec/API4KP/Operations/VoidOperation>))
Declaration(ObjectProperty(<http://www.omg.org/spec/API4KP/Terminology/isEventOf>))
Declaration(ObjectProperty(<http://www.omg.org/spec/API4KP/Terminology/matchesMapping>))
Declaration(ObjectProperty(:adds))
Declaration(ObjectProperty(:addsTo))
Declaration(ObjectProperty(:appliesQuery))
Declaration(ObjectProperty(:appliesQueryTo))
Declaration(ObjectProperty(:hasInput))
Declaration(ObjectProperty(:hasKPOutput))
Declaration(ObjectProperty(:hasOutput))
Declaration(ObjectProperty(:hasOutputFromConceptualizing))
Declaration(ObjectProperty(:hasOutputFromInStreaming))
Declaration(ObjectProperty(:hasOutputFromParsing))
Declaration(ObjectProperty(:hasOutputFromUnmarshalling))
Declaration(ObjectProperty(:hasUnaryInput))
Declaration(ObjectProperty(:isInputOf))
Declaration(ObjectProperty(:isKPOutputOf))
Declaration(ObjectProperty(:isOutputOf))
Declaration(ObjectProperty(:isUnaryInputOf))
Declaration(ObjectProperty(<http://www.omg.org/spec/API4KP/Tries/hasInput>))
Declaration(ObjectProperty(<http://www.omg.org/spec/API4KP/Tries/isEventOf>))

############################
#   Object Properties
############################

# Object Property: :adds (adds resource)

AnnotationAssertion(rdfs:label :adds "adds resource")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#note> :adds "need inverse")
SubObjectPropertyOf(:adds :hasInput)
ObjectPropertyDomain(:adds :InternalAddingEvent)
ObjectPropertyRange(:adds <http://www.omg.org/spec/API4KP/Terminology/KnowledgeSource>)

# Object Property: :addsTo (adds resource to)

AnnotationAssertion(rdfs:label :addsTo "adds resource to")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#note> :addsTo "need inverse")
SubObjectPropertyOf(:addsTo :hasInput)
FunctionalObjectProperty(:addsTo)
ObjectPropertyDomain(:addsTo :InternalAddingEvent)
ObjectPropertyRange(:addsTo <http://www.omg.org/spec/API4KP/Terminology/KnowledgeSource>)

# Object Property: :appliesQuery (applies query resource)

AnnotationAssertion(rdfs:label :appliesQuery "applies query resource")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :appliesQuery "TBD"^^xsd:string)
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#note> :appliesQuery "need inverse")
SubObjectPropertyOf(:appliesQuery :hasInput)
ObjectPropertyDomain(:appliesQuery :QueryingEvent)
ObjectPropertyRange(:appliesQuery <http://www.omg.org/spec/API4KP/Terminology/QuerySource>)

# Object Property: :appliesQueryTo (applies query to resource)

AnnotationAssertion(rdfs:label :appliesQueryTo "applies query to resource")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :appliesQueryTo "TBD"^^xsd:string)
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#note> :appliesQueryTo "need inverse")
SubObjectPropertyOf(:appliesQueryTo :hasInput)
FunctionalObjectProperty(:appliesQueryTo)
ObjectPropertyDomain(:appliesQueryTo :QueryingEvent)
ObjectPropertyRange(:appliesQueryTo <http://www.omg.org/spec/API4KP/Terminology/KnowledgeSource>)

# Object Property: :hasInput (has input)

AnnotationAssertion(rdfs:label :hasInput "has input")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :hasInput "input of an event"^^xsd:string)
InverseObjectProperties(:hasInput :isInputOf)
ObjectPropertyDomain(:hasInput :KnowledgeEvent)

# Object Property: :hasKPOutput (has knowledge platform output)

AnnotationAssertion(rdfs:label :hasKPOutput "has knowledge platform output")
SubObjectPropertyOf(:hasKPOutput :hasOutput)
InverseObjectProperties(:hasKPOutput :isKPOutputOf)
ObjectPropertyRange(:hasKPOutput <http://www.omg.org/spec/API4KP/Terminology/KnowledgePlatform>)

# Object Property: :hasOutput (has output)

AnnotationAssertion(rdfs:label :hasOutput "has output")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :hasOutput "output of an event"^^xsd:string)
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#note> :hasOutput "      
    <owl:propertyChainAxiom rdf:parseType=\"Collection\">
    <rdf:Description rdf:about=\"http://www.omg.org/spec/API4KP/Tries/isEventOf\"/>
    <rdf:Description rdf:about=\"http://www.omg.org/spec/API4KP/Tries/isDelegatedTo\"/>
    <rdf:Description rdf:about=\"http://www.omg.org/spec/API4KP/Tries/hasOutput\"/>
    </owl:propertyChainAxiom>
    ")
InverseObjectProperties(:hasOutput :isOutputOf)
FunctionalObjectProperty(:hasOutput)
ObjectPropertyDomain(:hasOutput :KnowledgeEvent)

# Object Property: :hasOutputFromConceptualizing (has output from conceptualizing)

AnnotationAssertion(rdfs:label :hasOutputFromConceptualizing "has output from conceptualizing")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#note> :hasOutputFromConceptualizing "need inverse")
SubObjectPropertyOf(:hasOutputFromConceptualizing :hasOutput)
ObjectPropertyDomain(:hasOutputFromConceptualizing :ConceptualizingEvent)
ObjectPropertyRange(:hasOutputFromConceptualizing <http://www.omg.org/spec/API4KP/Terminology/KnowledgeAsset>)

# Object Property: :hasOutputFromInStreaming (has output from instreaming)

AnnotationAssertion(rdfs:label :hasOutputFromInStreaming "has output from instreaming")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#note> :hasOutputFromInStreaming "need inverse")
SubObjectPropertyOf(:hasOutputFromInStreaming :hasOutput)
ObjectPropertyDomain(:hasOutputFromInStreaming :InStreamEvent)
ObjectPropertyRange(:hasOutputFromInStreaming <http://www.omg.org/spec/API4KP/Terminology/KnowledgeEncoding>)

# Object Property: :hasOutputFromParsing (has output from parsing)

AnnotationAssertion(rdfs:label :hasOutputFromParsing "has output from parsing")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#note> :hasOutputFromParsing "need inverse")
SubObjectPropertyOf(:hasOutputFromParsing :hasOutput)
ObjectPropertyDomain(:hasOutputFromParsing :ParsingEvent)
ObjectPropertyRange(:hasOutputFromParsing <http://www.omg.org/spec/API4KP/Terminology/KnowledgeExpression>)

# Object Property: :hasOutputFromUnmarshalling (has output from unmarshalling)

AnnotationAssertion(rdfs:label :hasOutputFromUnmarshalling "has output from unmarshalling")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#note> :hasOutputFromUnmarshalling "need inverse")
SubObjectPropertyOf(:hasOutputFromUnmarshalling :hasOutput)
ObjectPropertyDomain(:hasOutputFromUnmarshalling :UnmarshallingEvent)
ObjectPropertyRange(:hasOutputFromUnmarshalling <http://www.omg.org/spec/API4KP/Terminology/KnowledgeManifestation>)

# Object Property: :hasUnaryInput (has unary input)

AnnotationAssertion(rdfs:label :hasUnaryInput "has unary input")
SubObjectPropertyOf(:hasUnaryInput :hasInput)
InverseObjectProperties(:hasUnaryInput :isUnaryInputOf)
FunctionalObjectProperty(:hasUnaryInput)

# Object Property: :isInputOf (is input of)

AnnotationAssertion(rdfs:label :isInputOf "is input of")

# Object Property: :isKPOutputOf (is knowledge platform that is output of)

AnnotationAssertion(rdfs:label :isKPOutputOf "is knowledge platform that is output of")

# Object Property: :isOutputOf (is output of)

AnnotationAssertion(rdfs:label :isOutputOf "is output of")

# Object Property: :isUnaryInputOf (is unary input of)

AnnotationAssertion(rdfs:label :isUnaryInputOf "is unary input of")



############################
#   Classes
############################

# Class: :ActionEvent-ExpressionIn (action event - resource in)

AnnotationAssertion(rdfs:label :ActionEvent-ExpressionIn "action event - resource in")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :ActionEvent-ExpressionIn "action event whose input is a knowledge expression"^^xsd:string)
SubClassOf(:ActionEvent-ExpressionIn :ActionEvent-ResourceIn)
SubClassOf(:ActionEvent-ExpressionIn ObjectSomeValuesFrom(:hasInput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeExpression>))

# Class: :ActionEvent-ResourceIn (action event - resource in)

AnnotationAssertion(rdfs:label :ActionEvent-ResourceIn "action event - resource in")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :ActionEvent-ResourceIn "action event whose input is a knowledge resources"^^xsd:string)
SubClassOf(:ActionEvent-ResourceIn :AtomicEvent)
SubClassOf(:ActionEvent-ResourceIn ObjectSomeValuesFrom(:hasInput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeResource>))

# Class: :AddingEvent (adding event)

AnnotationAssertion(rdfs:label :AddingEvent "adding event")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :AddingEvent "event of an adding operation"^^xsd:string)
SubClassOf(:AddingEvent :KnowledgeEvent)

# Class: :AtomicEvent (action event)

AnnotationAssertion(rdfs:label :AtomicEvent "action event")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :AtomicEvent "event of an Action."^^xsd:string)
EquivalentClasses(:AtomicEvent ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/AtomicKOperation>))
SubClassOf(:AtomicEvent :UnaryEvent)

# Class: :AtomicEvent-AdditionToKnowledgeExpression (action event - addition to knowledge expression)

AnnotationAssertion(rdfs:label :AtomicEvent-AdditionToKnowledgeExpression "action event - addition to knowledge expression")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :AtomicEvent-AdditionToKnowledgeExpression "'addition to' action event that maps knowledge expressions into knowledge expressions."^^xsd:string)
EquivalentClasses(:AtomicEvent-AdditionToKnowledgeExpression ObjectIntersectionOf(:AddingEvent :AtomicEvent ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/AdditionToKnowledgeExpressionOperation>)))
SubClassOf(:AtomicEvent-AdditionToKnowledgeExpression :AddingEvent)
SubClassOf(:AtomicEvent-AdditionToKnowledgeExpression :AtomicEvent)
SubClassOf(:AtomicEvent-AdditionToKnowledgeExpression :HorizontalExpressionEvent)
SubClassOf(:AtomicEvent-AdditionToKnowledgeExpression ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/matchesMapping> <http://www.omg.org/spec/API4KP/Terminology/ExtensionExpressionMapping>))

# Class: :ConceptualizingEvent (conceptualizinging event)

AnnotationAssertion(rdfs:label :ConceptualizingEvent "conceptualizinging event")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :ConceptualizingEvent "event of a conceptualizing operation."^^xsd:string)
EquivalentClasses(:ConceptualizingEvent ObjectIntersectionOf(:LiftingEvent ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/ConceptualizingAction>)))
SubClassOf(:ConceptualizingEvent :LiftingEvent)
SubClassOf(:ConceptualizingEvent ObjectSomeValuesFrom(:hasInput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeExpression>))
SubClassOf(:ConceptualizingEvent ObjectSomeValuesFrom(:hasOutput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeAsset>))

# Class: :CurriedActionEvent (curried action event)

AnnotationAssertion(rdfs:label :CurriedActionEvent "curried action event"@en)
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :CurriedActionEvent "side-effect free action event that maps to an action"^^xsd:string)
EquivalentClasses(:CurriedActionEvent ObjectIntersectionOf(:AtomicEvent ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/HigherOrderAtomicKOperation>)))
SubClassOf(:CurriedActionEvent :AtomicEvent)
SubClassOf(:CurriedActionEvent :SideEffectFreeEvent)
SubClassOf(:CurriedActionEvent ObjectSomeValuesFrom(:hasOutput <http://www.omg.org/spec/API4KP/Operations/AtomicKOperation>))

# Class: :CurriedActionEvent-HorizontalExpressionActionOut (curried action event - horizontal expression action out)

AnnotationAssertion(rdfs:label :CurriedActionEvent-HorizontalExpressionActionOut "curried action event - horizontal expression action out"@en)
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :CurriedActionEvent-HorizontalExpressionActionOut "curried action event whose output is a horizontal expression action")
SubClassOf(:CurriedActionEvent-HorizontalExpressionActionOut :CurriedActionEvent)
SubClassOf(:CurriedActionEvent-HorizontalExpressionActionOut ObjectSomeValuesFrom(:hasOutput <http://www.omg.org/spec/API4KP/Operations/HorizontalExpressionAction>))

# Class: :ExpressingEvent (expressing event)

AnnotationAssertion(rdfs:label :ExpressingEvent "expressing event")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :ExpressingEvent "lowering event transforming a knowledge asset into
      a generalized expression."^^xsd:string)
EquivalentClasses(:ExpressingEvent ObjectIntersectionOf(:LoweringEvent ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/ExpressingAction>)))
SubClassOf(:ExpressingEvent :LoweringEvent)
SubClassOf(:ExpressingEvent ObjectSomeValuesFrom(:hasInput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeAsset>))
SubClassOf(:ExpressingEvent ObjectSomeValuesFrom(:hasOutput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeExpression>))

# Class: :HorizontalEvent (horizontal event)

AnnotationAssertion(rdfs:label :HorizontalEvent "horizontal event"@en)
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :HorizontalEvent "side-effect-free unary event whose input and output are knowledge resources at the same level of abstraction that are related by a mapping (sensu DOL)"^^xsd:string)
EquivalentClasses(:HorizontalEvent ObjectIntersectionOf(:AtomicEvent ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/HorizontalAtomicKOperation>)))
SubClassOf(:HorizontalEvent :AtomicEvent)
SubClassOf(:HorizontalEvent :SideEffectFreeEvent)
SubClassOf(:HorizontalEvent ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/matchesMapping> <http://www.omg.org/spec/API4KP/Terminology/Mapping>))
SubClassOf(:HorizontalEvent ObjectSomeValuesFrom(:hasInput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeResource>))
SubClassOf(:HorizontalEvent ObjectSomeValuesFrom(:hasOutput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeResource>))
DisjointUnion(:HorizontalEvent :HorizontalAssetEvent :HorizontalEncodingEvent :HorizontalExpressionEvent :HorizontalItemEvent :HorizontalManifestationEvent)

# Class: :InStreamingEvent (instreaming event)

AnnotationAssertion(rdfs:label :InStreamingEvent "instreaming event")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :InStreamingEvent "lifting event transforming a knowledge item into a
      knowledge encoding."^^xsd:string)
EquivalentClasses(:InStreamingEvent ObjectIntersectionOf(:LiftingEvent ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/InStreamingAction>)))
SubClassOf(:InStreamingEvent :LiftingEvent)
SubClassOf(:InStreamingEvent ObjectSomeValuesFrom(:hasInput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeItem>))
SubClassOf(:InStreamingEvent ObjectSomeValuesFrom(:hasOutput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeEncoding>))

# Class: :KnowledgeEvent (knowledge event)

AnnotationAssertion(rdfs:label :KnowledgeEvent "knowledge event")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :KnowledgeEvent "successful evaluation or execution of a knowledge operation by a particular application at a particular time"^^xsd:string)
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#example> :KnowledgeEvent "Example: the adding of an Asset to an immutable KB to generate a new immutable KB,
      executed by some application. "^^xsd:string)
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#example> :KnowledgeEvent "a specialist, like a cardiologist, taps the heartrate symbol on a touchscreen that results in the submission of a SPARQL query about a semantically-defined subset of a patient's vital signs.")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#example> :KnowledgeEvent "when a nurse activates a biomedical device, a stream of RDF graphs is ``published'' describing a patient's vital signs")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#scopeNote> :KnowledgeEvent "Some Knowledge Operations can be used as transition functions for a mutable knowledge source, where their evaluation describes an event in the sense of \\cite{Rosemann2002}, as a state transition of a dynamic entity; we generalize this concept of events because not all API4KP Knowledge Events correspond to state transitions.")
EquivalentClasses(:KnowledgeEvent ObjectIntersectionOf(owl:Thing ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/KnowledgeOperation>)))

# Class: :LiftingEvent (lifting event)

AnnotationAssertion(rdfs:label :LiftingEvent "lifting event")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :LiftingEvent "event of a lifting action."^^xsd:string)
EquivalentClasses(:LiftingEvent ObjectIntersectionOf(:AtomicEvent ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/LiftingAtomicKOperation>)))
SubClassOf(:LiftingEvent :AtomicEvent)
SubClassOf(:LiftingEvent :SideEffectFreeEvent)
SubClassOf(:LiftingEvent ObjectSomeValuesFrom(:hasInput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeResource>))
SubClassOf(:LiftingEvent ObjectSomeValuesFrom(:hasOutput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeResource>))
DisjointUnion(:LiftingEvent :ConceptualizingEvent :InStreamingEvent :ParsingEvent :UnmarshallingEvent)

# Class: :LoweringEvent (lowering event)

AnnotationAssertion(rdfs:label :LoweringEvent "lowering event")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :LoweringEvent "event of a lowering action."^^xsd:string)
EquivalentClasses(:LoweringEvent ObjectIntersectionOf(:AtomicEvent ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/LoweringAtomicKOperation>)))
SubClassOf(:LoweringEvent :AtomicEvent)
SubClassOf(:LoweringEvent :SideEffectFreeEvent)
SubClassOf(:LoweringEvent ObjectSomeValuesFrom(:hasInput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeResource>))
SubClassOf(:LoweringEvent ObjectSomeValuesFrom(:hasOutput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeResource>))
DisjointUnion(:LoweringEvent :ExpressingEvent :ManifestingEvent :MarshallingEvent :OutStreamingEvent)

# Class: :ManifestingEvent (manifesting event)

AnnotationAssertion(rdfs:label :ManifestingEvent "manifesting event")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :ManifestingEvent "lowering event transforming a generalized
      expression into a knowledge manifestation."^^xsd:string)
EquivalentClasses(:ManifestingEvent ObjectIntersectionOf(:LoweringEvent ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/ManifestingAction>)))
SubClassOf(:ManifestingEvent :LoweringEvent)
SubClassOf(:ManifestingEvent ObjectSomeValuesFrom(:hasInput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeExpression>))
SubClassOf(:ManifestingEvent ObjectSomeValuesFrom(:hasOutput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeManifestation>))

# Class: :MarshallingEvent (marshalling event)

AnnotationAssertion(rdfs:label :MarshallingEvent "marshalling event")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :MarshallingEvent "lowering event transforming a knowledge
      manifestation into a knowledge encoding."^^xsd:string)
EquivalentClasses(:MarshallingEvent ObjectIntersectionOf(:LoweringEvent ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/MarshallingAction>)))
SubClassOf(:MarshallingEvent :LoweringEvent)
SubClassOf(:MarshallingEvent ObjectSomeValuesFrom(:hasInput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeManifestation>))
SubClassOf(:MarshallingEvent ObjectSomeValuesFrom(:hasOutput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeEncoding>))

# Class: :NullaryEvent (nullary event)

AnnotationAssertion(rdfs:label :NullaryEvent "nullary event"@en)
EquivalentClasses(:NullaryEvent ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/NullaryOperation>))
SubClassOf(:NullaryEvent :KnowledgeEvent)
SubClassOf(:NullaryEvent ObjectExactCardinality(0 <http://www.omg.org/spec/API4KP/Tries/hasInput>))

# Class: :OutStreamingEvent (outstreaming event)

AnnotationAssertion(rdfs:label :OutStreamingEvent "outstreaming event")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :OutStreamingEvent "lowering event transforming a knowledge encoding into a
      knowledge item."^^xsd:string)
EquivalentClasses(:OutStreamingEvent ObjectIntersectionOf(:LoweringEvent ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/OutStreamingAction>)))
SubClassOf(:OutStreamingEvent :LoweringEvent)
SubClassOf(:OutStreamingEvent ObjectSomeValuesFrom(:hasInput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeEncoding>))
SubClassOf(:OutStreamingEvent ObjectSomeValuesFrom(:hasOutput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeItem>))

# Class: :ParsingEvent (parsing event)

AnnotationAssertion(rdfs:label :ParsingEvent "parsing event")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :ParsingEvent "action event of transforming a knowledge
      manifestation into a generalized expression."^^xsd:string)
EquivalentClasses(:ParsingEvent ObjectIntersectionOf(:LiftingEvent ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/ParsingAction>)))
SubClassOf(:ParsingEvent :LiftingEvent)
SubClassOf(:ParsingEvent ObjectSomeValuesFrom(:hasInput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeManifestation>))
SubClassOf(:ParsingEvent ObjectSomeValuesFrom(:hasOutput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeExpression>))

# Class: :PublicAddingEvent-KnowledgeResourceToImmutableKB (public event adding knowledge resources to immutable KBs)

AnnotationAssertion(rdfs:label :PublicAddingEvent-KnowledgeResourceToImmutableKB "public event adding knowledge resources to immutable KBs")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :PublicAddingEvent-KnowledgeResourceToImmutableKB "public event adding a knowlede
      resource to an immutable knowledge base producing an immutable knowledge base"^^xsd:string)
SubClassOf(:PublicAddingEvent-KnowledgeResourceToImmutableKB :AddingEvent)
SubClassOf(:PublicAddingEvent-KnowledgeResourceToImmutableKB :SideEffectFreeEvent)
SubClassOf(:PublicAddingEvent-KnowledgeResourceToImmutableKB ObjectSomeValuesFrom(:adds <http://www.omg.org/spec/API4KP/Terminology/KnowledgeResource>))
SubClassOf(:PublicAddingEvent-KnowledgeResourceToImmutableKB ObjectSomeValuesFrom(:addsTo <http://www.omg.org/spec/API4KP/Terminology/ImmutableKnowledgeBase>))
SubClassOf(:PublicAddingEvent-KnowledgeResourceToImmutableKB ObjectSomeValuesFrom(:hasOutput <http://www.omg.org/spec/API4KP/Terminology/ImmutableKnowledgeBase>))

# Class: :PublicQueryingResourceEvent (public querying resource event)

AnnotationAssertion(rdfs:label :PublicQueryingResourceEvent "public querying resource event")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :PublicQueryingResourceEvent "public event that applies a query resource to a focused resource producing a (resource) collection of answer
      substitutions."^^xsd:string)
SubClassOf(:PublicQueryingResourceEvent :QueryingEvent)
SubClassOf(:PublicQueryingResourceEvent ObjectSomeValuesFrom(:appliesQuery <http://www.omg.org/spec/API4KP/Terminology/QueryResource>))
SubClassOf(:PublicQueryingResourceEvent ObjectSomeValuesFrom(:appliesQueryTo <http://www.omg.org/spec/API4KP/Terminology/KnowledgeAsset>))
SubClassOf(:PublicQueryingResourceEvent ObjectSomeValuesFrom(:hasOutput <http://www.omg.org/spec/API4KP/Terminology/AnswerSubstitutionCollectionResource>))

# Class: :SideEffectFreeEvent (side-effect-free event)

AnnotationAssertion(rdfs:label :SideEffectFreeEvent "side-effect-free event")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :SideEffectFreeEvent "event of a side-effect-free operation"^^xsd:string)
EquivalentClasses(:SideEffectFreeEvent ObjectIntersectionOf(owl:Thing ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/SideEffectFreeOperation>)))
SubClassOf(:SideEffectFreeEvent :KnowledgeEvent)

# Class: :SideEffectfulEvent (side-effectful event)

AnnotationAssertion(rdfs:label :SideEffectfulEvent "side-effectful event")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :SideEffectfulEvent "event of a side-effectful operation"^^xsd:string)
EquivalentClasses(:SideEffectfulEvent ObjectIntersectionOf(owl:Thing ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/SideEffectfulOperation>)))
SubClassOf(:SideEffectfulEvent :KnowledgeEvent)

# Class: :UnaryEvent (unary event)

AnnotationAssertion(rdfs:label :UnaryEvent "unary event")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :UnaryEvent "event of a unary operation"^^xsd:string)
EquivalentClasses(:UnaryEvent ObjectIntersectionOf(owl:Thing ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/UnaryOperation>)))
SubClassOf(:UnaryEvent :KnowledgeEvent)
SubClassOf(:UnaryEvent ObjectSomeValuesFrom(:hasUnaryInput owl:Thing))

# Class: :UnmarshallingEvent (unmarshalling event)

AnnotationAssertion(rdfs:label :UnmarshallingEvent "unmarshalling event")
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :UnmarshallingEvent "lifting event that transforms knowledge encodings into knowledge manifestations."^^xsd:string)
EquivalentClasses(:UnmarshallingEvent ObjectIntersectionOf(:LiftingEvent ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/UnmarshallingAction>)))
SubClassOf(:UnmarshallingEvent :LiftingEvent)
SubClassOf(:UnmarshallingEvent ObjectSomeValuesFrom(:hasInput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeEncoding>))
SubClassOf(:UnmarshallingEvent ObjectSomeValuesFrom(:hasOutput <http://www.omg.org/spec/API4KP/Terminology/KnowledgeManifestation>))

# Class: :VoidActionEvent (void action event)

AnnotationAssertion(rdfs:label :VoidActionEvent "void action event"@en)
AnnotationAssertion(<http://www.w3.org/2004/02/skos/core#definition> :VoidActionEvent "side-effectful action event whose output is void"^^xsd:string)
EquivalentClasses(:VoidActionEvent ObjectIntersectionOf(:AtomicEvent ObjectSomeValuesFrom(<http://www.omg.org/spec/API4KP/Terminology/isEventOf> <http://www.omg.org/spec/API4KP/Operations/VoidOperation>)))
SubClassOf(:VoidActionEvent :AtomicEvent)
SubClassOf(:VoidActionEvent :SideEffectfulEvent)
SubClassOf(:VoidActionEvent ObjectSomeValuesFrom(:hasOutput <http://www.omg.org/spec/API4KP/Operations/Void>))


SubObjectPropertyOf(ObjectPropertyChain(<http://www.omg.org/spec/API4KP/Tries/isEventOf> <http://www.omg.org/spec/API4KP/Tries/hasInput>) :hasInput)
)