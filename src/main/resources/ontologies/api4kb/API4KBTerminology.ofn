Prefix(:=<http://www.omg.org/spec/API4KP/API4KPTerminology/>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(core:=<http://www.w3.org/2004/02/skos/core#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(api4kptry:=<http://www.omg.org/spec/API4KP/API4KPTerminology/API4KPTry/>)
Prefix(dol-terms:=<http://www.omg.org/spec/DOL/DOL-terms/>)
Prefix(api4kpevent:=<http://www.omg.org/spec/API4KP/API4KPTerminology/API4KPEvent/>)
Prefix(api4kpoperation:=<http://www.omg.org/spec/API4KP/API4KPTerminology/API4KPOperation/>)
Prefix(api4kpclassifier:=<http://www.omg.org/spec/API4KP/API4KPTerminology/API4KPClassifier#>)
Prefix(api4kpproficiency:=<http://www.omg.org/spec/API4KP/API4KPTerminology/API4KPProficiency/>)
Prefix(api4kpterminology:=<http://www.omg.org/spec/API4KP/API4KPTerminology/>)
Prefix(specificationmetadata:=<http://www.omg.org/techprocess/ab/SpecificationMetadata/>)
Prefix(api4kpoperationclassifier:=<http://www.omg.org/spec/API4KP/API4KPTerminology/API4KPOperationClassifier#>)


Ontology(<http://www.omg.org/spec/API4KP/API4KPTerminology/>
<http://www.omg.org/spec/API4KP/20150201/API4KPTerminology/>
Import(<http://www.omg.org/techprocess/ab/SpecificationMetadata/>)
Import(<http://www.omg.org/spec/API4KP/API4KPTerminology/API4KPOperationClassifier>)
Import(<http://www.omg.org/spec/DOL/DOL-terms/>)
Import(<http://www.omg.org/spec/API4KP/API4KPTerminology/API4KPEvent/>)
Import(<http://www.omg.org/spec/API4KP/API4KPTerminology/API4KPOperation/>)
Import(<http://www.omg.org/spec/API4KP/API4KPTerminology/API4KPProficiency/>)
Import(<http://www.omg.org/spec/API4KP/API4KPTerminology/API4KPTry/>)
Annotation(<http://purl.org/dc/terms/license> "http://www.omg.org/techprocess/ab/SpecificationMetadata/MITLicense"^^xsd:anyURI)
Annotation(specificationmetadata:contentLanguage "http://www.omg.org/spec/ODM/"^^xsd:anyURI)
Annotation(specificationmetadata:contentLanguage "http://www.w3.org/standards/techs/owl#w3c_all"^^xsd:anyURI)
Annotation(specificationmetadata:copyright "Copyright (c) 2014 Athan Services
Copyright (c) 2014 Thematix Partners LLC
Copyright (c) 2014 Object Management Group, Inc."^^xsd:string)
Annotation(specificationmetadata:fileAbbreviation "api4kp-trm"^^xsd:string)
Annotation(specificationmetadata:fileAbstract "This ontology covers terminology used for describing the main concepts used by the API4KP specification."^^xsd:string)
Annotation(specificationmetadata:filename "API4KPTerminology.rdf"^^xsd:string)
Annotation(rdfs:label "API4KP Terminology Ontology")

Declaration(Class(api4kpterminology:API4KP))
Declaration(Class(api4kpterminology:AssetEnvironment))
Declaration(Class(api4kpterminology:BasicEnvironment))
Declaration(Class(api4kpterminology:BasicKnowledgeAsset))
Declaration(Class(api4kpterminology:BasicKnowledgeEncoding))
Declaration(Class(api4kpterminology:BasicKnowledgeExpression))
Declaration(Class(api4kpterminology:BasicKnowledgeItem))
Declaration(Class(api4kpterminology:BasicKnowledgeManifestation))
Declaration(Class(api4kpterminology:BasicKnowledgeResource))
Declaration(Class(api4kpterminology:Callable))
Declaration(Class(api4kpterminology:CategoricalEnvironment))
Declaration(Class(api4kpterminology:Client))
Declaration(Class(api4kpterminology:CollectionOfAlgorithms))
Declaration(Class(api4kpterminology:CollectionOfFunctionalities))
Declaration(Class(api4kpterminology:CollectionOfProcesses))
Declaration(Class(api4kpterminology:CommunicatingEntity))
Declaration(Class(api4kpterminology:Component))
Declaration(Class(api4kpterminology:ComposableEnvironment))
Declaration(Class(api4kpterminology:CreateEmptyKPFunctionality))
Declaration(Class(api4kpterminology:Description))
Declaration(Class(api4kpterminology:EmptyEnvironment))
Declaration(Class(api4kpterminology:Environment))
Declaration(Class(api4kpterminology:EnvironmentWithIdentities))
Declaration(Class(api4kpterminology:EquivalenceRelation))
Declaration(Class(api4kpterminology:Event))
Declaration(Class(api4kpterminology:EventType))
Declaration(Class(api4kpterminology:Expression))
Declaration(Class(api4kpterminology:Failure))
Declaration(Class(api4kpterminology:FailureInstance))
Declaration(Class(api4kpterminology:FailureMonad))
Declaration(Class(api4kpterminology:FailureType))
Declaration(Class(api4kpterminology:FocusedEnvironment))
Declaration(Class(api4kpterminology:Functionality))
Declaration(Class(api4kpterminology:Immutable))
Declaration(Class(api4kpterminology:ImmutableKBFactoryRole))
Declaration(Class(api4kpterminology:ImmutableKnowledgeBase))
Declaration(Class(api4kpterminology:ImmutableView))
Declaration(Class(api4kpterminology:KPlatformDesign))
Declaration(Class(api4kpterminology:KPlatformImplementation))
Declaration(Class(api4kpterminology:KPlatformInstallation))
Declaration(Class(api4kpterminology:KPlatformSpecification))
Declaration(Class(api4kpterminology:KnowledgeAsset))
Declaration(Class(api4kpterminology:KnowledgeBase))
Declaration(Class(api4kpterminology:KnowledgeEncoding))
Declaration(Class(api4kpterminology:KnowledgeExpression))
Declaration(Class(api4kpterminology:KnowledgeItem))
Declaration(Class(api4kpterminology:KnowledgeManifestation))
Declaration(Class(api4kpterminology:KnowledgePlatform))
Declaration(Class(api4kpterminology:KnowledgePlatformManagerRole))
Declaration(Class(api4kpterminology:KnowledgeRepresentationAndReasoningLanguage))
Declaration(Class(api4kpterminology:KnowledgeResource))
Declaration(Class(api4kpterminology:KnowledgeSerialization))
Declaration(Class(api4kpterminology:KnowledgeSource))
Declaration(Class(api4kpterminology:KnowledgeSourceDescription))
Declaration(Class(api4kpterminology:LanguageEnvironment))
Declaration(Class(api4kpterminology:LanguageMapping))
Declaration(Class(api4kpterminology:Mapping))
Declaration(Class(api4kpterminology:Message))
Declaration(Class(api4kpterminology:MessageType))
Declaration(Class(api4kpterminology:Mutable))
Declaration(Class(api4kpterminology:MutableKnowledgeBase))
Declaration(Class(api4kpterminology:MutableSource))
Declaration(Class(api4kpterminology:NonemptyEnvironment))
Declaration(Class(api4kpterminology:Operation))
Declaration(Class(api4kpterminology:OperationColumn))
Declaration(Class(api4kpterminology:PIEventType))
Declaration(Class(api4kpterminology:PIFailureType))
Declaration(Class(api4kpterminology:PSEventType))
Declaration(Class(api4kpterminology:PSFailureType))
Declaration(Class(api4kpterminology:Platform))
Declaration(Class(api4kpterminology:PlatformDesign))
Declaration(Class(api4kpterminology:PlatformImplementation))
Declaration(Class(api4kpterminology:PlatformInstallation))
Declaration(Class(api4kpterminology:PlatformSpecification))
Declaration(Class(api4kpterminology:PlatformType))
Declaration(Class(api4kpterminology:PreservingEnvironment))
Declaration(Class(api4kpterminology:Program))
Declaration(Class(api4kpterminology:Proxy))
Declaration(Class(api4kpterminology:QueryAsset))
Declaration(Class(api4kpterminology:QueryEncoding))
Declaration(Class(api4kpterminology:QueryGeneralizedExpession))
Declaration(Class(api4kpterminology:QueryItem))
Declaration(Class(api4kpterminology:QueryLanguage))
Declaration(Class(api4kpterminology:QueryManifestation))
Declaration(Class(api4kpterminology:QueryResource))
Declaration(Class(api4kpterminology:QuerySerialization))
Declaration(Class(api4kpterminology:Request))
Declaration(Class(api4kpterminology:Response))
Declaration(Class(api4kpterminology:ResultAsset))
Declaration(Class(api4kpterminology:ResultEncoding))
Declaration(Class(api4kpterminology:ResultGeneralizedExpression))
Declaration(Class(api4kpterminology:ResultItem))
Declaration(Class(api4kpterminology:ResultLanguage))
Declaration(Class(api4kpterminology:ResultManifestation))
Declaration(Class(api4kpterminology:ResultResource))
Declaration(Class(api4kpterminology:ResultSerialization))
Declaration(Class(api4kpterminology:Role))
Declaration(Class(api4kpterminology:Serialization))
Declaration(Class(api4kpterminology:Source))
Declaration(Class(api4kpterminology:Specification))
Declaration(Class(api4kpterminology:Structured))
Declaration(Class(api4kpterminology:StructuredKnowledgeAsset))
Declaration(Class(api4kpterminology:StructuredKnowledgeEncoding))
Declaration(Class(api4kpterminology:StructuredKnowledgeExpression))
Declaration(Class(api4kpterminology:StructuredKnowledgeItem))
Declaration(Class(api4kpterminology:StructuredKnowledgeManifestation))
Declaration(Class(api4kpterminology:StructuredKnowledgeResource))
Declaration(Class(api4kpterminology:Success))
Declaration(Class(api4kpterminology:SuccessMonad))
Declaration(Class(dol-terms:OMSSerialization))
Declaration(Class(dol-terms:SetOfExpressions))
Declaration(ObjectProperty(api4kpterminology:about))
Declaration(ObjectProperty(api4kpterminology:accordingTo))
Declaration(ObjectProperty(api4kpterminology:actualizes))
Declaration(ObjectProperty(api4kpterminology:allPreserve))
Declaration(ObjectProperty(api4kpterminology:conceptualizes))
Declaration(ObjectProperty(api4kpterminology:conveys))
Declaration(ObjectProperty(api4kpterminology:decodes))
Declaration(ObjectProperty(api4kpterminology:encodes))
Declaration(ObjectProperty(api4kpterminology:executes))
Declaration(ObjectProperty(api4kpterminology:exposes))
Declaration(ObjectProperty(api4kpterminology:expresses))
Declaration(ObjectProperty(api4kpterminology:fillsRole))
Declaration(ObjectProperty(api4kpterminology:hasContent))
Declaration(ObjectProperty(api4kpterminology:hasEnvironmentMapping))
Declaration(ObjectProperty(api4kpterminology:hasEnvironmentMember))
Declaration(ObjectProperty(api4kpterminology:hasEvent))
Declaration(ObjectProperty(api4kpterminology:hasFocusMember))
Declaration(ObjectProperty(api4kpterminology:hasPart))
Declaration(ObjectProperty(api4kpterminology:hasProficiency))
Declaration(ObjectProperty(api4kpterminology:hasRegistrant))
Declaration(ObjectProperty(api4kpterminology:hasRequestee))
Declaration(ObjectProperty(api4kpterminology:hasSetOfMappings))
Declaration(ObjectProperty(api4kpterminology:hasSnapshot))
Declaration(ObjectProperty(api4kpterminology:hasStructuralComponent))
Declaration(ObjectProperty(api4kpterminology:hasSubenvironment))
Declaration(ObjectProperty(api4kpterminology:hasSubproficiency))
Declaration(ObjectProperty(api4kpterminology:implements))
Declaration(ObjectProperty(api4kpterminology:interactsWith))
Declaration(ObjectProperty(api4kpterminology:isActualizedBy))
Declaration(ObjectProperty(api4kpterminology:isConveyedBy))
Declaration(ObjectProperty(api4kpterminology:isDeployedWithin))
Declaration(ObjectProperty(api4kpterminology:isEnvironmentMappingOf))
Declaration(ObjectProperty(api4kpterminology:isEventOf))
Declaration(ObjectProperty(api4kpterminology:isExecutedBy))
Declaration(ObjectProperty(api4kpterminology:isExposedBy))
Declaration(ObjectProperty(api4kpterminology:isFilledBy))
Declaration(ObjectProperty(api4kpterminology:isImplementedBy))
Declaration(ObjectProperty(api4kpterminology:isManagedBy))
Declaration(ObjectProperty(api4kpterminology:isProficiencyOf))
Declaration(ObjectProperty(api4kpterminology:isRegisteredWith))
Declaration(ObjectProperty(api4kpterminology:isRequestedBy))
Declaration(ObjectProperty(api4kpterminology:isRequesteeOf))
Declaration(ObjectProperty(api4kpterminology:isRequiredBy))
Declaration(ObjectProperty(api4kpterminology:isSerializationOf))
Declaration(ObjectProperty(api4kpterminology:isSubenvironmentOf))
Declaration(ObjectProperty(api4kpterminology:isSubproficiencyOf))
Declaration(ObjectProperty(api4kpterminology:lifts))
Declaration(ObjectProperty(api4kpterminology:lowers))
Declaration(ObjectProperty(api4kpterminology:manages))
Declaration(ObjectProperty(api4kpterminology:manifests))
Declaration(ObjectProperty(api4kpterminology:parses))
Declaration(ObjectProperty(api4kpterminology:preserves))
Declaration(ObjectProperty(api4kpterminology:prototypes))
Declaration(ObjectProperty(api4kpterminology:reproduces))
Declaration(ObjectProperty(api4kpterminology:requests))
Declaration(ObjectProperty(api4kpterminology:requires))
Declaration(ObjectProperty(api4kpterminology:responds))
Declaration(ObjectProperty(api4kpterminology:supports))
Declaration(ObjectProperty(api4kpterminology:usesLanguage))
Declaration(ObjectProperty(api4kpterminology:usesSerialization))
Declaration(ObjectProperty(api4kpterminology:usesSpecification))

############################
#   Object Properties
############################

# Object Property: api4kpterminology:about (about)

AnnotationAssertion(rdfs:label api4kpterminology:about "about")
ObjectPropertyDomain(api4kpterminology:about api4kpterminology:Response)

# Object Property: api4kpterminology:accordingTo (according to)

AnnotationAssertion(rdfs:label api4kpterminology:accordingTo "according to")
AnnotationAssertion(core:definition api4kpterminology:accordingTo "relationship between a collection and an environment whereby the results of application of a mapping of the environment to a member of the collection are also members of the environment"^^xsd:string)
ObjectPropertyRange(api4kpterminology:accordingTo api4kpterminology:Environment)

# Object Property: api4kpterminology:actualizes (actualizes)

AnnotationAssertion(rdfs:label api4kpterminology:actualizes "actualizes")
InverseObjectProperties(api4kpterminology:actualizes api4kpterminology:isActualizedBy)
ObjectPropertyDomain(api4kpterminology:actualizes api4kpevent:KnowledgeEvent)
ObjectPropertyRange(api4kpterminology:actualizes api4kpproficiency:Proficiency)

# Object Property: api4kpterminology:allPreserve (all preserve)

AnnotationAssertion(rdfs:label api4kpterminology:allPreserve "all preserve")
ObjectPropertyDomain(api4kpterminology:allPreserve api4kpterminology:PreservingEnvironment)
ObjectPropertyRange(api4kpterminology:allPreserve api4kpterminology:EquivalenceRelation)

# Object Property: api4kpterminology:conceptualizes (conceptualizes)

AnnotationAssertion(rdfs:label api4kpterminology:conceptualizes "conceptualizes")
AnnotationAssertion(core:definition api4kpterminology:conceptualizes "inverse of 'expresses'"^^xsd:string)
SubObjectPropertyOf(api4kpterminology:conceptualizes api4kpterminology:lifts)
InverseObjectProperties(api4kpterminology:conceptualizes api4kpterminology:expresses)

# Object Property: api4kpterminology:conveys (conveys)

AnnotationAssertion(rdfs:label api4kpterminology:conveys "conveys")
InverseObjectProperties(api4kpterminology:conveys api4kpterminology:isConveyedBy)
ObjectPropertyDomain(api4kpterminology:conveys api4kpterminology:Proxy)
ObjectPropertyRange(api4kpterminology:conveys api4kpproficiency:Proficiency)

# Object Property: api4kpterminology:decodes (decodes)

AnnotationAssertion(rdfs:label api4kpterminology:decodes "decodes")
AnnotationAssertion(core:definition api4kpterminology:decodes "inverse of 'encodes'"^^xsd:string)
SubObjectPropertyOf(api4kpterminology:decodes api4kpterminology:lifts)
InverseObjectProperties(api4kpterminology:decodes api4kpterminology:encodes)

# Object Property: api4kpterminology:encodes (encodes)

AnnotationAssertion(rdfs:label api4kpterminology:encodes "encodes")
SubObjectPropertyOf(api4kpterminology:encodes api4kpterminology:lowers)
ObjectPropertyDomain(api4kpterminology:encodes api4kpterminology:KnowledgeEncoding)
ObjectPropertyRange(api4kpterminology:encodes api4kpterminology:KnowledgeManifestation)

# Object Property: api4kpterminology:executes (executes)

AnnotationAssertion(rdfs:label api4kpterminology:executes "executes")
InverseObjectProperties(api4kpterminology:executes api4kpterminology:isExecutedBy)
ObjectPropertyDomain(api4kpterminology:executes api4kpterminology:CommunicatingEntity)
ObjectPropertyRange(api4kpterminology:executes api4kpevent:KnowledgeEvent)

# Object Property: api4kpterminology:exposes (api4kpterminology:exposes)

InverseObjectProperties(api4kpterminology:exposes api4kpterminology:isExposedBy)
ObjectPropertyDomain(api4kpterminology:exposes api4kpterminology:Functionality)
ObjectPropertyRange(api4kpterminology:exposes api4kpproficiency:Proficiency)

# Object Property: api4kpterminology:expresses (expresses)

AnnotationAssertion(rdfs:label api4kpterminology:expresses "expresses")
AnnotationAssertion(core:altLabel api4kpterminology:expresses "is expression of")
AnnotationAssertion(core:definition api4kpterminology:expresses "knowledge asset that would be obtained by conceptualizing the generalized expression."^^xsd:string)
SubObjectPropertyOf(api4kpterminology:expresses api4kpterminology:lowers)
ObjectPropertyDomain(api4kpterminology:expresses api4kpterminology:KnowledgeExpression)
ObjectPropertyRange(api4kpterminology:expresses api4kpterminology:KnowledgeAsset)

# Object Property: api4kpterminology:fillsRole (fills role)

AnnotationAssertion(rdfs:label api4kpterminology:fillsRole "fills role")
InverseObjectProperties(api4kpterminology:fillsRole api4kpterminology:isFilledBy)

# Object Property: api4kpterminology:hasContent (has content)

AnnotationAssertion(rdfs:label api4kpterminology:hasContent "has content")
ObjectPropertyDomain(api4kpterminology:hasContent api4kpterminology:Response)

# Object Property: api4kpterminology:hasEnvironmentMapping (has environment mapping)

AnnotationAssertion(rdfs:label api4kpterminology:hasEnvironmentMapping "has environment mapping")
InverseObjectProperties(api4kpterminology:hasEnvironmentMapping api4kpterminology:isEnvironmentMappingOf)
ObjectPropertyRange(api4kpterminology:hasEnvironmentMapping api4kpterminology:Mapping)

# Object Property: api4kpterminology:hasEnvironmentMember (has environment member)

AnnotationAssertion(rdfs:label api4kpterminology:hasEnvironmentMember "has environment member")
ObjectPropertyDomain(api4kpterminology:hasEnvironmentMember api4kpterminology:NonemptyEnvironment)
ObjectPropertyRange(api4kpterminology:hasEnvironmentMember owl:Thing)

# Object Property: api4kpterminology:hasEvent (has event)

AnnotationAssertion(rdfs:label api4kpterminology:hasEvent "has event")
InverseObjectProperties(api4kpterminology:hasEvent api4kpterminology:isEventOf)

# Object Property: api4kpterminology:hasFocusMember (api4kpterminology:hasFocusMember)

SubObjectPropertyOf(api4kpterminology:hasFocusMember api4kpterminology:hasEnvironmentMember)

# Object Property: api4kpterminology:hasPart (has part)

AnnotationAssertion(rdfs:label api4kpterminology:hasPart "has part")

# Object Property: api4kpterminology:hasProficiency (has proficiency)

AnnotationAssertion(rdfs:label api4kpterminology:hasProficiency "has proficiency")
InverseObjectProperties(api4kpterminology:hasProficiency api4kpterminology:isProficiencyOf)

# Object Property: api4kpterminology:hasRegistrant (has registrant)

AnnotationAssertion(rdfs:label api4kpterminology:hasRegistrant "has registrant")
InverseObjectProperties(api4kpterminology:hasRegistrant api4kpterminology:isRegisteredWith)

# Object Property: api4kpterminology:hasRequestee (has requestee)

AnnotationAssertion(rdfs:label api4kpterminology:hasRequestee "has requestee"@en)
AnnotationAssertion(core:definition api4kpterminology:hasRequestee "application that is the recipient of the request"^^xsd:string)
InverseObjectProperties(api4kpterminology:hasRequestee api4kpterminology:isRequesteeOf)
FunctionalObjectProperty(api4kpterminology:hasRequestee)
ObjectPropertyDomain(api4kpterminology:hasRequestee api4kptry:Try)
ObjectPropertyRange(api4kpterminology:hasRequestee api4kpterminology:CommunicatingEntity)

# Object Property: api4kpterminology:hasSetOfMappings (has set of mappings)

AnnotationAssertion(rdfs:label api4kpterminology:hasSetOfMappings "has set of mappings")

# Object Property: api4kpterminology:hasSnapshot (has snapshot)

AnnotationAssertion(rdfs:label api4kpterminology:hasSnapshot "has snapshot")
AnnotationAssertion(core:definition api4kpterminology:hasSnapshot "relationship between a mutable source and its state at one timepoint."^^xsd:string)
ObjectPropertyDomain(api4kpterminology:hasSnapshot api4kpterminology:Mutable)
ObjectPropertyRange(api4kpterminology:hasSnapshot api4kpterminology:Immutable)

# Object Property: api4kpterminology:hasStructuralComponent (api4kpterminology:hasStructuralComponent)

SubObjectPropertyOf(api4kpterminology:hasStructuralComponent api4kpterminology:hasPart)
ObjectPropertyDomain(api4kpterminology:hasStructuralComponent api4kpterminology:Structured)

# Object Property: api4kpterminology:hasSubenvironment (has subenvironment)

AnnotationAssertion(rdfs:label api4kpterminology:hasSubenvironment "has subenvironment")
InverseObjectProperties(api4kpterminology:hasSubenvironment api4kpterminology:isSubenvironmentOf)

# Object Property: api4kpterminology:hasSubproficiency (has subproficiency)

AnnotationAssertion(rdfs:label api4kpterminology:hasSubproficiency "has subproficiency")
InverseObjectProperties(api4kpterminology:hasSubproficiency api4kpterminology:isSubproficiencyOf)

# Object Property: api4kpterminology:implements (implements)

AnnotationAssertion(rdfs:label api4kpterminology:implements "implements")
InverseObjectProperties(api4kpterminology:implements api4kpterminology:isImplementedBy)
ObjectPropertyDomain(api4kpterminology:implements api4kpterminology:CommunicatingEntity)
ObjectPropertyRange(api4kpterminology:implements api4kpoperation:KnowledgeOperation)

# Object Property: api4kpterminology:interactsWith (interacts with)

AnnotationAssertion(rdfs:label api4kpterminology:interactsWith "interacts with")
SymmetricObjectProperty(api4kpterminology:interactsWith)
ObjectPropertyDomain(api4kpterminology:interactsWith api4kpterminology:CommunicatingEntity)
ObjectPropertyRange(api4kpterminology:interactsWith api4kpterminology:CommunicatingEntity)

# Object Property: api4kpterminology:isActualizedBy (is actualized by)

AnnotationAssertion(rdfs:label api4kpterminology:isActualizedBy "is actualized by")

# Object Property: api4kpterminology:isConveyedBy (is conveyed by)

AnnotationAssertion(rdfs:label api4kpterminology:isConveyedBy "is conveyed by")

# Object Property: api4kpterminology:isDeployedWithin (is deployed within)

AnnotationAssertion(rdfs:label api4kpterminology:isDeployedWithin "is deployed within")
InverseObjectProperties(api4kpterminology:isDeployedWithin api4kpterminology:supports)
ObjectPropertyDomain(api4kpterminology:isDeployedWithin api4kpterminology:Component)
ObjectPropertyRange(api4kpterminology:isDeployedWithin api4kpterminology:KnowledgePlatform)

# Object Property: api4kpterminology:isEnvironmentMappingOf (is environment mapping of)

AnnotationAssertion(rdfs:label api4kpterminology:isEnvironmentMappingOf "is environment mapping of")

# Object Property: api4kpterminology:isEventOf (is event of)

AnnotationAssertion(rdfs:label api4kpterminology:isEventOf "is event of")
ObjectPropertyDomain(api4kpterminology:isEventOf api4kpevent:KnowledgeEvent)
ObjectPropertyRange(api4kpterminology:isEventOf api4kpoperation:KnowledgeOperation)

# Object Property: api4kpterminology:isExecutedBy (is executed by)

AnnotationAssertion(rdfs:label api4kpterminology:isExecutedBy "is executed by")
AnnotationAssertion(core:note api4kpterminology:isExecutedBy "
        <rdf:type rdf:resource=\"http://www.w3.org/2002/07/owl#FunctionalProperty\"/>            
      ")
AnnotationAssertion(core:note api4kpterminology:isExecutedBy "OWL does not let us declare this to be functional, while keeping the property chain for its inverse.")
ObjectPropertyDomain(api4kpterminology:isExecutedBy api4kpevent:KnowledgeEvent)
ObjectPropertyRange(api4kpterminology:isExecutedBy api4kpterminology:CommunicatingEntity)

# Object Property: api4kpterminology:isExposedBy (is exposed by)

AnnotationAssertion(rdfs:label api4kpterminology:isExposedBy "is exposed by")

# Object Property: api4kpterminology:isFilledBy (is filled by)

AnnotationAssertion(rdfs:label api4kpterminology:isFilledBy "is filled by")
ObjectPropertyDomain(api4kpterminology:isFilledBy api4kpterminology:Role)
ObjectPropertyRange(api4kpterminology:isFilledBy api4kpterminology:CommunicatingEntity)

# Object Property: api4kpterminology:isImplementedBy (is implemented by)

AnnotationAssertion(rdfs:label api4kpterminology:isImplementedBy "is implemented by")

# Object Property: api4kpterminology:isManagedBy (is managed by)

AnnotationAssertion(rdfs:label api4kpterminology:isManagedBy "is managed by")
AnnotationAssertion(core:note api4kpterminology:isManagedBy "
        <rdf:type rdf:resource=\"http://www.w3.org/2002/07/owl#FunctionalProperty\"/>            
      ")
AnnotationAssertion(core:note api4kpterminology:isManagedBy "OWL does not let us declare this to be functional, while keeping the property chain on its inverse.")
InverseObjectProperties(api4kpterminology:isManagedBy api4kpterminology:manages)

# Object Property: api4kpterminology:isProficiencyOf (is proficiency of)

AnnotationAssertion(rdfs:label api4kpterminology:isProficiencyOf "is proficiency of")
ObjectPropertyDomain(api4kpterminology:isProficiencyOf api4kpproficiency:Proficiency)
ObjectPropertyRange(api4kpterminology:isProficiencyOf api4kpterminology:CommunicatingEntity)

# Object Property: api4kpterminology:isRegisteredWith (is registered with)

AnnotationAssertion(rdfs:label api4kpterminology:isRegisteredWith "is registered with")
ObjectPropertyDomain(api4kpterminology:isRegisteredWith api4kpterminology:KnowledgeSource)
ObjectPropertyRange(api4kpterminology:isRegisteredWith api4kpterminology:KnowledgePlatform)

# Object Property: api4kpterminology:isRequestedBy (is requested by)

AnnotationAssertion(rdfs:label api4kpterminology:isRequestedBy "is requested by")
AnnotationAssertion(core:note api4kpterminology:isRequestedBy "
      <rdf:type rdf:resource=\"http://www.w3.org/2002/07/owl#FunctionalProperty\"/>            
    ")
AnnotationAssertion(core:note api4kpterminology:isRequestedBy "OWL does not let us declare this to be functional, while keeping the property chain for its inverse.")
InverseObjectProperties(api4kpterminology:isRequestedBy api4kpterminology:requests)

# Object Property: api4kpterminology:isRequesteeOf (is requestee of)

AnnotationAssertion(rdfs:label api4kpterminology:isRequesteeOf "is requestee of"@en)

# Object Property: api4kpterminology:isRequiredBy (is required by)

AnnotationAssertion(rdfs:label api4kpterminology:isRequiredBy "is required by")
InverseObjectProperties(api4kpterminology:isRequiredBy api4kpterminology:requires)

# Object Property: api4kpterminology:isSerializationOf (is serialization of)

AnnotationAssertion(rdfs:label api4kpterminology:isSerializationOf "is serialization of")
AnnotationAssertion(core:definition api4kpterminology:isSerializationOf "language that is manifested by the serialization"^^xsd:string)
ObjectPropertyDomain(api4kpterminology:isSerializationOf dol-terms:Language)
ObjectPropertyRange(api4kpterminology:isSerializationOf api4kpterminology:Serialization)

# Object Property: api4kpterminology:isSubenvironmentOf (is subenvironment of)

AnnotationAssertion(rdfs:label api4kpterminology:isSubenvironmentOf "is subenvironment of"@en)
AnnotationAssertion(core:definition api4kpterminology:isSubenvironmentOf "relationship between two environments that is a partial order where the language and logic graphs of the first enviroment are subgraphs, resp., of the language and logic graphs of the second environment"^^xsd:string)
TransitiveObjectProperty(api4kpterminology:isSubenvironmentOf)
ObjectPropertyDomain(api4kpterminology:isSubenvironmentOf api4kpterminology:Environment)
ObjectPropertyRange(api4kpterminology:isSubenvironmentOf api4kpterminology:Environment)

# Object Property: api4kpterminology:isSubproficiencyOf (is subproficiency of)

AnnotationAssertion(rdfs:label api4kpterminology:isSubproficiencyOf "is subproficiency of"@en)
AnnotationAssertion(core:definition api4kpterminology:isSubproficiencyOf "relationship between two proficiencies that is a partial order such that any operation that exposes a proficiency also exposes any subproficiency of it"^^xsd:string)
TransitiveObjectProperty(api4kpterminology:isSubproficiencyOf)
ObjectPropertyDomain(api4kpterminology:isSubproficiencyOf api4kpproficiency:Proficiency)
ObjectPropertyRange(api4kpterminology:isSubproficiencyOf api4kpproficiency:Proficiency)

# Object Property: api4kpterminology:lifts (lifts)

AnnotationAssertion(rdfs:label api4kpterminology:lifts "lifts")
AnnotationAssertion(core:definition api4kpterminology:lifts "relation between two knowledge resources where the first is an abstraction of the second by one level (e.g. if the first is an encoding, the second is an item, etc.).  Lifts relations are limited to one of the following: prototypes, decodes, parses, conceptualizes"^^xsd:string)
AnnotationAssertion(core:note api4kpterminology:lifts "OWL does not let us declare this to be functional, while keeping the property chains that link Events and Operations.")
InverseObjectProperties(api4kpterminology:lifts api4kpterminology:lowers)
ObjectPropertyDomain(api4kpterminology:lifts api4kpterminology:KnowledgeResource)
ObjectPropertyRange(api4kpterminology:lifts api4kpterminology:KnowledgeResource)

# Object Property: api4kpterminology:lowers (lowers)

AnnotationAssertion(rdfs:label api4kpterminology:lowers "lowers")
AnnotationAssertion(core:definition api4kpterminology:lowers "relation between two knowledge resources where the first is a deabstraction of the second by one level (e.g. if the first is an item, the second is an encoding, etc.).  Lowers relations are limited to one of the following: reproduces, encodes, manifests, expresses"^^xsd:string)
AnnotationAssertion(core:note api4kpterminology:lowers "
      <rdf:type rdf:resource=\"http://www.w3.org/2002/07/owl#FunctionalProperty\"/>            
    ")
AnnotationAssertion(core:note api4kpterminology:lowers "OWL does not let us declare this to be functional, while keeping the property chains that link Events and Operations.")

# Object Property: api4kpterminology:manages (manages)

AnnotationAssertion(rdfs:label api4kpterminology:manages "manages")
ObjectPropertyDomain(api4kpterminology:manages api4kpterminology:KnowledgePlatformManagerRole)
ObjectPropertyRange(api4kpterminology:manages api4kpterminology:KnowledgePlatform)

# Object Property: api4kpterminology:manifests (manifests)

AnnotationAssertion(rdfs:label api4kpterminology:manifests "manifests")
AnnotationAssertion(core:definition api4kpterminology:manifests "generalized expression that would be obtained from parsing the knowledge manifestation"^^xsd:string)
SubObjectPropertyOf(api4kpterminology:manifests api4kpterminology:lowers)
InverseObjectProperties(api4kpterminology:manifests api4kpterminology:parses)
ObjectPropertyDomain(api4kpterminology:manifests api4kpterminology:KnowledgeManifestation)
ObjectPropertyRange(api4kpterminology:manifests api4kpterminology:KnowledgeExpression)

# Object Property: api4kpterminology:parses (parses)

AnnotationAssertion(rdfs:label api4kpterminology:parses "parses")
AnnotationAssertion(core:definition api4kpterminology:parses "inverse of 'manifests'"^^xsd:string)
SubObjectPropertyOf(api4kpterminology:parses api4kpterminology:lifts)

# Object Property: api4kpterminology:preserves (preserves)

AnnotationAssertion(rdfs:label api4kpterminology:preserves "preserves")
ObjectPropertyDomain(api4kpterminology:preserves api4kpterminology:Mapping)
ObjectPropertyRange(api4kpterminology:preserves api4kpterminology:EquivalenceRelation)

# Object Property: api4kpterminology:prototypes (prototypes)

AnnotationAssertion(rdfs:label api4kpterminology:prototypes "prototypes")
AnnotationAssertion(core:definition api4kpterminology:prototypes "inverse of 'reproduces'"^^xsd:string)
SubObjectPropertyOf(api4kpterminology:prototypes api4kpterminology:lifts)
InverseObjectProperties(api4kpterminology:prototypes api4kpterminology:reproduces)

# Object Property: api4kpterminology:reproduces (reproduces)

AnnotationAssertion(rdfs:label api4kpterminology:reproduces "reproduces")
AnnotationAssertion(core:definition api4kpterminology:reproduces "knowledge encoding that would be obtained from instreaming the knowledge item"^^xsd:string)
SubObjectPropertyOf(api4kpterminology:reproduces api4kpterminology:lowers)
ObjectPropertyDomain(api4kpterminology:reproduces api4kpterminology:KnowledgeItem)
ObjectPropertyRange(api4kpterminology:reproduces api4kpterminology:KnowledgeEncoding)

# Object Property: api4kpterminology:requests (requests)

AnnotationAssertion(rdfs:label api4kpterminology:requests "requests")
ObjectPropertyDomain(api4kpterminology:requests api4kpterminology:CommunicatingEntity)
ObjectPropertyRange(api4kpterminology:requests api4kptry:Try)

# Object Property: api4kpterminology:requires (requires)

AnnotationAssertion(rdfs:label api4kpterminology:requires "requires")
ObjectPropertyDomain(api4kpterminology:requires api4kpterminology:Role)
ObjectPropertyRange(api4kpterminology:requires api4kpproficiency:Proficiency)

# Object Property: api4kpterminology:responds (responds)

AnnotationAssertion(rdfs:label api4kpterminology:responds "responds")
ObjectPropertyDomain(api4kpterminology:responds api4kpterminology:CommunicatingEntity)
ObjectPropertyRange(api4kpterminology:responds api4kpterminology:Response)

# Object Property: api4kpterminology:supports (supports)

AnnotationAssertion(rdfs:label api4kpterminology:supports "supports")

# Object Property: api4kpterminology:usesLanguage (uses language)

AnnotationAssertion(rdfs:label api4kpterminology:usesLanguage "uses language")
AnnotationAssertion(core:definition api4kpterminology:usesLanguage "language used by a generalized expression."^^xsd:string)
ObjectPropertyDomain(api4kpterminology:usesLanguage api4kpterminology:KnowledgeExpression)
ObjectPropertyRange(api4kpterminology:usesLanguage dol-terms:Language)

# Object Property: api4kpterminology:usesSerialization (uses serialization)

AnnotationAssertion(rdfs:label api4kpterminology:usesSerialization "uses serialization")
AnnotationAssertion(core:definition api4kpterminology:usesSerialization "serialization used by a knowledge manifestation"^^xsd:string)
ObjectPropertyDomain(api4kpterminology:usesSerialization api4kpterminology:KnowledgeManifestation)
ObjectPropertyRange(api4kpterminology:usesSerialization api4kpterminology:Serialization)

# Object Property: api4kpterminology:usesSpecification (uses specification)

AnnotationAssertion(rdfs:label api4kpterminology:usesSpecification "uses specification")
AnnotationAssertion(core:definition api4kpterminology:usesSpecification "specification used by an application"^^xsd:string)
ObjectPropertyDomain(api4kpterminology:usesSpecification api4kpterminology:CommunicatingEntity)
ObjectPropertyRange(api4kpterminology:usesSpecification api4kpterminology:Specification)



############################
#   Classes
############################

# Class: api4kpterminology:API4KP (API4KP)

AnnotationAssertion(rdfs:label api4kpterminology:API4KP "API4KP")
SubClassOf(api4kpterminology:API4KP api4kpterminology:Specification)

# Class: api4kpterminology:AssetEnvironment (asset environment)

AnnotationAssertion(rdfs:label api4kpterminology:AssetEnvironment "asset environment")
AnnotationAssertion(core:definition api4kpterminology:AssetEnvironment "focused, categorical, preserving language environment where the focus is a KRR language")
AnnotationAssertion(core:scopeNote api4kpterminology:AssetEnvironment "The special case where all languages in an asset environment are KRR languages supporting model-theoretic semantics without side-effects (logics), and the preserving property is characterized by a logical graph reduces to a heterogeneous logical environment as defined in DOL.")
SubClassOf(api4kpterminology:AssetEnvironment api4kpterminology:CategoricalEnvironment)
SubClassOf(api4kpterminology:AssetEnvironment api4kpterminology:FocusedEnvironment)
SubClassOf(api4kpterminology:AssetEnvironment api4kpterminology:LanguageEnvironment)
SubClassOf(api4kpterminology:AssetEnvironment api4kpterminology:PreservingEnvironment)

# Class: api4kpterminology:BasicEnvironment (basic environment)

AnnotationAssertion(rdfs:label api4kpterminology:BasicEnvironment "basic environment")
AnnotationAssertion(core:definition api4kpterminology:BasicEnvironment "a focused environment having exactly one member")
SubClassOf(api4kpterminology:BasicEnvironment api4kpterminology:FocusedEnvironment)
SubClassOf(api4kpterminology:BasicEnvironment ObjectExactCardinality(1 api4kpterminology:hasEnvironmentMapping))

# Class: api4kpterminology:BasicKnowledgeAsset (basic knowledge asset)

AnnotationAssertion(rdfs:label api4kpterminology:BasicKnowledgeAsset "basic knowledge asset")
AnnotationAssertion(core:definition api4kpterminology:BasicKnowledgeAsset "equivalence class of basic expressions determined by the equivalence relation of an asset environment")
AnnotationAssertion(core:example api4kpterminology:BasicKnowledgeAsset "KA1: an OWL2 DL series for a biomedical ontology, viewed as an equivalence class of basic knowledge expressions, including example KE1, according to a semantics-preserving environment for the OWL2 DL language where the mapping to the focus language strips the natural language definitions from the axioms")
EquivalentClasses(api4kpterminology:BasicKnowledgeAsset ObjectIntersectionOf(api4kpterminology:BasicKnowledgeResource api4kpterminology:KnowledgeAsset))
DisjointClasses(api4kpterminology:BasicKnowledgeAsset api4kpterminology:StructuredKnowledgeAsset)

# Class: api4kpterminology:BasicKnowledgeEncoding (basic knowledge encoding)

AnnotationAssertion(rdfs:label api4kpterminology:BasicKnowledgeEncoding "basic knowledge encoding")
EquivalentClasses(api4kpterminology:BasicKnowledgeEncoding ObjectIntersectionOf(api4kpterminology:BasicKnowledgeResource api4kpterminology:KnowledgeEncoding))
DisjointClasses(api4kpterminology:BasicKnowledgeEncoding api4kpterminology:StructuredKnowledgeEncoding)

# Class: api4kpterminology:BasicKnowledgeExpression (basic knowledge expression)

AnnotationAssertion(rdfs:label api4kpterminology:BasicKnowledgeExpression "basic knowledge expression")
AnnotationAssertion(core:definition api4kpterminology:BasicKnowledgeExpression "well-formed, stand-alone formula in the abstract syntax of a machine-readable language")
AnnotationAssertion(core:example api4kpterminology:BasicKnowledgeExpression "KE1: the instance of the OWL 2 DL abstract syntax for the latest version of a biomedical ontology from an ontology series KA1 defining observable entities, such as the 2015 international version of the SNOMED-CT knowledge base\\footnote{http://browser.ihtsdotools.org/} (see also the definition of Basic Knowledge Asset). 
This ontology differs from other versions of the series only in the natural language definitions.")
AnnotationAssertion(core:scopeNote api4kpterminology:BasicKnowledgeExpression "The use of \"basic\" in API4KP differs from its usage in DOL - a DOL basic OMS  (ontologies, models and specifications) is a set, and corresponds to a Set-structured knowledge asset in API4KP.")
EquivalentClasses(api4kpterminology:BasicKnowledgeExpression ObjectIntersectionOf(api4kpterminology:BasicKnowledgeResource api4kpterminology:KnowledgeExpression))
DisjointClasses(api4kpterminology:BasicKnowledgeExpression api4kpterminology:StructuredKnowledgeExpression)

# Class: api4kpterminology:BasicKnowledgeItem (basic knowledge item)

AnnotationAssertion(rdfs:label api4kpterminology:BasicKnowledgeItem "basic knowledge item")
AnnotationAssertion(core:definition api4kpterminology:BasicKnowledgeItem "single exemplar of a basic knowledge manifestation in a particular location")
AnnotationAssertion(core:example api4kpterminology:BasicKnowledgeItem "KI1: a file on a network server embodying example KM1")
EquivalentClasses(api4kpterminology:BasicKnowledgeItem ObjectIntersectionOf(api4kpterminology:BasicKnowledgeResource api4kpterminology:KnowledgeItem))
DisjointClasses(api4kpterminology:BasicKnowledgeItem api4kpterminology:StructuredKnowledgeItem)

# Class: api4kpterminology:BasicKnowledgeManifestation (basic knowledge manifestation)

AnnotationAssertion(rdfs:label api4kpterminology:BasicKnowledgeManifestation "basic knowledge manifestation")
AnnotationAssertion(core:definition api4kpterminology:BasicKnowledgeManifestation "character-based embodiment of a basic knowledge expression in a concrete dialect.")
AnnotationAssertion(core:example api4kpterminology:BasicKnowledgeManifestation "KM1: the OWL/RDF XML Document Object Model (DOM) document instance of example KE1")
EquivalentClasses(api4kpterminology:BasicKnowledgeManifestation ObjectIntersectionOf(api4kpterminology:BasicKnowledgeResource api4kpterminology:KnowledgeManifestation))
DisjointClasses(api4kpterminology:BasicKnowledgeManifestation api4kpterminology:StructuredKnowledgeManifestation)

# Class: api4kpterminology:BasicKnowledgeResource (basic knowledge resource)

AnnotationAssertion(rdfs:label api4kpterminology:BasicKnowledgeResource "basic knowledge resource")
SubClassOf(api4kpterminology:BasicKnowledgeResource api4kpterminology:KnowledgeResource)
DisjointClasses(api4kpterminology:BasicKnowledgeResource api4kpterminology:StructuredKnowledgeResource)

# Class: api4kpterminology:Callable (api4kpterminology:Callable)

SubClassOf(api4kpterminology:Callable api4kpterminology:MessageType)

# Class: api4kpterminology:CategoricalEnvironment (categorical environment)

AnnotationAssertion(rdfs:label api4kpterminology:CategoricalEnvironment "categorical environment")
AnnotationAssertion(core:definition api4kpterminology:CategoricalEnvironment "a composable environment with identies whose composition operation is associative")
AnnotationAssertion(core:definition api4kpterminology:CategoricalEnvironment "environment with an associative composition operation for mappings, that is closed under composition and contains an identity mapping for every member")
SubClassOf(api4kpterminology:CategoricalEnvironment api4kpterminology:EnvironmentWithIdentities)

# Class: api4kpterminology:Client (client)

AnnotationAssertion(rdfs:label api4kpterminology:Client "client")
AnnotationAssertion(core:definition api4kpterminology:Client "role filled by an application that needs to make API4KP requests"^^xsd:string)
SubClassOf(api4kpterminology:Client api4kpterminology:Role)

# Class: api4kpterminology:CollectionOfAlgorithms (api4kpterminology:CollectionOfAlgorithms)

SubClassOf(api4kpterminology:CollectionOfAlgorithms api4kpterminology:Component)

# Class: api4kpterminology:CollectionOfFunctionalities (api4kpterminology:CollectionOfFunctionalities)

SubClassOf(api4kpterminology:CollectionOfFunctionalities api4kpterminology:Component)

# Class: api4kpterminology:CollectionOfProcesses (api4kpterminology:CollectionOfProcesses)

SubClassOf(api4kpterminology:CollectionOfProcesses api4kpterminology:Component)

# Class: api4kpterminology:CommunicatingEntity (communicating entity)

AnnotationAssertion(rdfs:label api4kpterminology:CommunicatingEntity "communicating entity")

# Class: api4kpterminology:Component (component)

AnnotationAssertion(rdfs:label api4kpterminology:Component "component")
AnnotationAssertion(core:definition api4kpterminology:Component "software unit deployed within a knowledge platform"^^xsd:string)
EquivalentClasses(api4kpterminology:Component ObjectSomeValuesFrom(api4kpterminology:isDeployedWithin api4kpterminology:KnowledgePlatform))
SubClassOf(api4kpterminology:Component api4kpterminology:CommunicatingEntity)

# Class: api4kpterminology:ComposableEnvironment (composable environment)

AnnotationAssertion(rdfs:label api4kpterminology:ComposableEnvironment "composable environment")
AnnotationAssertion(core:definition api4kpterminology:ComposableEnvironment "an environment having a composition operation where the composition of its mappings is a mapping of the environment whenever the composition is well-defined")
AnnotationAssertion(core:editorialNote api4kpterminology:ComposableEnvironment "The composition M2 o M1 of two mappings M1 and M2 is well-defined when M1 maps to the same thing that M2 maps from. (The codomain of M1 is the domain of M2).")
SubClassOf(api4kpterminology:ComposableEnvironment api4kpterminology:Environment)

# Class: api4kpterminology:CreateEmptyKPFunctionality (api4kpterminology:CreateEmptyKPFunctionality)

SubClassOf(api4kpterminology:CreateEmptyKPFunctionality api4kpterminology:Functionality)

# Class: api4kpterminology:Description (description)

AnnotationAssertion(rdfs:label api4kpterminology:Description "description")
AnnotationAssertion(core:definition api4kpterminology:Description "generalised expression that describes a knowledge resource."^^xsd:string)
SubClassOf(api4kpterminology:Description api4kpterminology:KnowledgeExpression)

# Class: api4kpterminology:EmptyEnvironment (empty environment)

AnnotationAssertion(rdfs:label api4kpterminology:EmptyEnvironment "empty environment")
SubClassOf(api4kpterminology:EmptyEnvironment api4kpterminology:Environment)
SubClassOf(api4kpterminology:EmptyEnvironment ObjectExactCardinality(0 api4kpterminology:hasEnvironmentMapping))
DisjointClasses(api4kpterminology:EmptyEnvironment api4kpterminology:NonemptyEnvironment)

# Class: api4kpterminology:Environment (environment)

AnnotationAssertion(rdfs:label api4kpterminology:Environment "environment")
AnnotationAssertion(core:definition api4kpterminology:Environment "mathematical structure of mappings and members, where the domain and codomains of the mappings are members of the environment")
AnnotationAssertion(core:example api4kpterminology:Environment "a KRR language environment containing semantics-preserving translations from RDF and OWL into CL, assisting in the integrated interpretation of a stream of RDF graphs and OWL ontologies")
SubClassOf(api4kpterminology:Environment api4kpterminology:Immutable)

# Class: api4kpterminology:EnvironmentWithIdentities (environment with identity)

AnnotationAssertion(rdfs:label api4kpterminology:EnvironmentWithIdentities "environment with identity")
AnnotationAssertion(core:definition api4kpterminology:EnvironmentWithIdentities "a composable environment having an identity mapping for each member")
AnnotationAssertion(core:editorialNote api4kpterminology:EnvironmentWithIdentities "an identity mapping is a mapping whose domain and codomain are the same, and when composed with another mapping is equal to the original mapping")
SubClassOf(api4kpterminology:EnvironmentWithIdentities api4kpterminology:ComposableEnvironment)

# Class: api4kpterminology:EquivalenceRelation (equivalence relation)

AnnotationAssertion(rdfs:label api4kpterminology:EquivalenceRelation "equivalence relation")
SubClassOf(api4kpterminology:EquivalenceRelation api4kpoperation:KnowledgeOperation)

# Class: api4kpterminology:Event (api4kpterminology:Event)

SubClassOf(api4kpterminology:Event api4kpterminology:Success)

# Class: api4kpterminology:EventType (api4kpterminology:EventType)

SubClassOf(api4kpterminology:EventType api4kpterminology:Success)

# Class: api4kpterminology:Expression (API4KP Expression)

AnnotationAssertion(rdfs:label api4kpterminology:Expression "API4KP Expression")

# Class: api4kpterminology:Failure (api4kpterminology:Failure)

SubClassOf(api4kpterminology:Failure api4kpterminology:Request)

# Class: api4kpterminology:FailureInstance (api4kpterminology:FailureInstance)

SubClassOf(api4kpterminology:FailureInstance api4kpterminology:Failure)

# Class: api4kpterminology:FailureMonad (api4kpterminology:FailureMonad)

SubClassOf(api4kpterminology:FailureMonad api4kpterminology:FailureType)

# Class: api4kpterminology:FailureType (api4kpterminology:FailureType)

SubClassOf(api4kpterminology:FailureType api4kpterminology:Failure)

# Class: api4kpterminology:FocusedEnvironment (focused environment)

AnnotationAssertion(rdfs:label api4kpterminology:FocusedEnvironment "focused environment")
AnnotationAssertion(core:definition api4kpterminology:FocusedEnvironment "a nonempty environment which has a member F (called the focus or focus member) such that for every other member A, there is a mapping in the environment from A to F"^^xsd:string)
SubClassOf(api4kpterminology:FocusedEnvironment api4kpterminology:NonemptyEnvironment)

# Class: api4kpterminology:Functionality (api4kpterminology:Functionality)

SubClassOf(api4kpterminology:Functionality api4kpterminology:MessageType)

# Class: api4kpterminology:Immutable (immutable)

AnnotationAssertion(rdfs:label api4kpterminology:Immutable "immutable")
DisjointClasses(api4kpterminology:Immutable api4kpterminology:Mutable)

# Class: api4kpterminology:ImmutableKBFactoryRole (role immutable knowledge base factory)

AnnotationAssertion(rdfs:label api4kpterminology:ImmutableKBFactoryRole "role immutable knowledge base factory")
SubClassOf(api4kpterminology:ImmutableKBFactoryRole api4kpterminology:KnowledgePlatformManagerRole)
SubClassOf(api4kpterminology:ImmutableKBFactoryRole ObjectSomeValuesFrom(api4kpterminology:requires api4kpproficiency:AddingProficiency-KnowledgeResourceToImmutableKB))

# Class: api4kpterminology:ImmutableKnowledgeBase (immutable knowledgebase)

AnnotationAssertion(rdfs:label api4kpterminology:ImmutableKnowledgeBase "immutable knowledgebase")
EquivalentClasses(api4kpterminology:ImmutableKnowledgeBase api4kpterminology:StructuredKnowledgeAsset)
SubClassOf(api4kpterminology:ImmutableKnowledgeBase api4kpterminology:KnowledgeAsset)
SubClassOf(api4kpterminology:ImmutableKnowledgeBase api4kpterminology:KnowledgeBase)

# Class: api4kpterminology:ImmutableView (immuable view)

AnnotationAssertion(rdfs:label api4kpterminology:ImmutableView "immuable view")
SubClassOf(api4kpterminology:ImmutableView api4kpterminology:Immutable)

# Class: api4kpterminology:KPlatformDesign (api4kpterminology:KPlatformDesign)

SubClassOf(api4kpterminology:KPlatformDesign api4kpterminology:KnowledgePlatform)
SubClassOf(api4kpterminology:KPlatformDesign api4kpterminology:PlatformDesign)

# Class: api4kpterminology:KPlatformImplementation (api4kpterminology:KPlatformImplementation)

SubClassOf(api4kpterminology:KPlatformImplementation api4kpterminology:KnowledgePlatform)
SubClassOf(api4kpterminology:KPlatformImplementation api4kpterminology:PlatformImplementation)

# Class: api4kpterminology:KPlatformInstallation (api4kpterminology:KPlatformInstallation)

SubClassOf(api4kpterminology:KPlatformInstallation api4kpterminology:KnowledgePlatform)
SubClassOf(api4kpterminology:KPlatformInstallation api4kpterminology:PlatformInstallation)

# Class: api4kpterminology:KPlatformSpecification (api4kpterminology:KPlatformSpecification)

SubClassOf(api4kpterminology:KPlatformSpecification api4kpterminology:KnowledgePlatform)
SubClassOf(api4kpterminology:KPlatformSpecification api4kpterminology:PlatformSpecification)

# Class: api4kpterminology:KnowledgeAsset (knowledge asset)

AnnotationAssertion(rdfs:label api4kpterminology:KnowledgeAsset "knowledge asset")
AnnotationAssertion(core:definition api4kpterminology:KnowledgeAsset "equivalence class (according to an environment) of generalized expressions.

Note:  intuitively, a knowledge asset is information that may be (equivalently) expressed in one or more KR languages."^^xsd:string)
AnnotationAssertion(core:example api4kpterminology:KnowledgeAsset "Example: assertion that Socrates is a philospher.
Example: assertion that the author of Moby Dick is Herman Melville.
Example: query for the names of philosphers.
Example: a sequence of strings that are asserted to be names of philosphers in some KB."^^xsd:string)
EquivalentClasses(api4kpterminology:KnowledgeAsset ObjectIntersectionOf(api4kpterminology:KnowledgeResource ObjectSomeValuesFrom(api4kpterminology:conceptualizes api4kpterminology:KnowledgeExpression)))
SubClassOf(api4kpterminology:KnowledgeAsset api4kpterminology:KnowledgeResource)
SubClassOf(api4kpterminology:KnowledgeAsset ObjectExactCardinality(1 api4kpterminology:accordingTo api4kpterminology:AssetEnvironment))

# Class: api4kpterminology:KnowledgeBase (knowledge base)

AnnotationAssertion(rdfs:label api4kpterminology:KnowledgeBase "knowledge base")
SubClassOf(api4kpterminology:KnowledgeBase api4kpterminology:KnowledgeSource)

# Class: api4kpterminology:KnowledgeEncoding (knowledge encoding)

AnnotationAssertion(rdfs:label api4kpterminology:KnowledgeEncoding "knowledge encoding")
AnnotationAssertion(core:definition api4kpterminology:KnowledgeEncoding "byte (or bit) sequence that is the encoding of a knowledge manifestation in some format (e.g. character encoding system(s) together with an archive format)."^^xsd:string)
AnnotationAssertion(core:example api4kpterminology:KnowledgeEncoding "Example A: the encoding in UTF-8 of the serialization in Manchester syntax of an OWL ontology. 
Example B: the zip archive of
   -  the encoding in UTF-8 of the serialization in Manchester syntax of an OWL ontology.
   - the encoding in UTF-16 of the serialization in XCL of a Common Logic text.
   - the encoding in UTF-8 of the serialization in standard syntax of a DOL text providing the details of how the above two files should be jointly interpreted. "^^xsd:string)
SubClassOf(api4kpterminology:KnowledgeEncoding api4kpterminology:KnowledgeResource)
SubClassOf(api4kpterminology:KnowledgeEncoding ObjectSomeValuesFrom(api4kpterminology:encodes api4kpterminology:KnowledgeManifestation))

# Class: api4kpterminology:KnowledgeExpression (knowledge expression)

AnnotationAssertion(rdfs:label api4kpterminology:KnowledgeExpression "knowledge expression")
AnnotationAssertion(core:definition api4kpterminology:KnowledgeExpression "Set of Expressions in one or more languages, in the context of a Logical Environment determining how these Expressions are jointly interpreted."^^xsd:string)
AnnotationAssertion(core:example api4kpterminology:KnowledgeExpression "Expression examples;
Example A: OWL Ground fact expressing that Socrates is a philosopher.
Example B: Common Logic sentence expressing that Socrates is a philosopher.
Example C: RDF graph expressing that the author of Moby Dick is Herman Melville.
Example D: SPARQL query for the names of philosphers.

generalised expression examples;
Example E: A and B, together with a mapping that allows OWL to be converted to Common Logic."^^xsd:string)
EquivalentClasses(api4kpterminology:KnowledgeExpression ObjectSomeValuesFrom(api4kpterminology:usesLanguage dol-terms:Language))
SubClassOf(api4kpterminology:KnowledgeExpression api4kpterminology:Expression)
SubClassOf(api4kpterminology:KnowledgeExpression api4kpterminology:KnowledgeResource)
SubClassOf(api4kpterminology:KnowledgeExpression ObjectSomeValuesFrom(dol-terms:hasPart dol-terms:SetOfExpressions))
SubClassOf(api4kpterminology:KnowledgeExpression ObjectAllValuesFrom(api4kpterminology:hasPart api4kpterminology:KnowledgeExpression))

# Class: api4kpterminology:KnowledgeItem (knowledge item)

AnnotationAssertion(rdfs:label api4kpterminology:KnowledgeItem "knowledge item")
AnnotationAssertion(core:definition api4kpterminology:KnowledgeItem "physical instance of a knowledge encoding, e.g. snapshot of a file on a hard drive, a Java String in memory."^^xsd:string)
AnnotationAssertion(core:example api4kpterminology:KnowledgeItem "Example: my copy in my Download folder of the encoding in UTF-8 of the serialization in Manchester syntax of an OWL ontology. "^^xsd:string)
SubClassOf(api4kpterminology:KnowledgeItem api4kpterminology:KnowledgeResource)
SubClassOf(api4kpterminology:KnowledgeItem ObjectSomeValuesFrom(api4kpterminology:reproduces api4kpterminology:KnowledgeEncoding))

# Class: api4kpterminology:KnowledgeManifestation (knowledge manifestation)

AnnotationAssertion(rdfs:label api4kpterminology:KnowledgeManifestation "knowledge manifestation")
AnnotationAssertion(core:definition api4kpterminology:KnowledgeManifestation "character sequence, or collection of character sequences, each being the serialization of a generalised expression in a knowledge serialization."^^xsd:string)
AnnotationAssertion(core:example api4kpterminology:KnowledgeManifestation "Example: character sequence in Manchester OWL syntax that is the serialization of an OWL Ground fact expressing that Socrates is a philosopher.
Example: character sequence in OWL RDF/XML syntax that is the serialization of an OWL Ground fact expressing that Socrates is a philosopher.
Example: character sequence in CLIF syntax that is the serialization of a Common Logic sentence expressing that Socrates is a philosopher.
Example: character sequence in RDF/XML that is the serialization of an RDF graph expressing that the author of Moby Dick is Herman Melville.
Example: character sequence in Turtle that is the serialization of an RDF graph expressing that the author of Moby Dick is Herman Melville.
Example: SPARQL query String for the names of philosphers."^^xsd:string)
SubClassOf(api4kpterminology:KnowledgeManifestation api4kpterminology:KnowledgeResource)
SubClassOf(api4kpterminology:KnowledgeManifestation ObjectSomeValuesFrom(api4kpterminology:manifests api4kpterminology:KnowledgeExpression))
SubClassOf(api4kpterminology:KnowledgeManifestation ObjectSomeValuesFrom(api4kpterminology:usesSerialization api4kpterminology:KnowledgeSerialization))

# Class: api4kpterminology:KnowledgePlatform (knowledge platform)

AnnotationAssertion(rdfs:label api4kpterminology:KnowledgePlatform "knowledge platform")
AnnotationAssertion(core:note api4kpterminology:KnowledgePlatform "Original Definition: software architecture that supports the Components and their interactions.

Note: The proxy will not have access to the KP except through the KP Manager."^^xsd:string)
EquivalentClasses(api4kpterminology:KnowledgePlatform ObjectIntersectionOf(ObjectSomeValuesFrom(api4kpterminology:supports api4kpterminology:Component) ObjectAllValuesFrom(api4kpterminology:isManagedBy api4kpterminology:KnowledgePlatformManagerRole)))
SubClassOf(api4kpterminology:KnowledgePlatform api4kpterminology:Platform)

# Class: api4kpterminology:KnowledgePlatformManagerRole (knowledge platform manager role)

AnnotationAssertion(rdfs:label api4kpterminology:KnowledgePlatformManagerRole "knowledge platform manager role")
AnnotationAssertion(core:definition api4kpterminology:KnowledgePlatformManagerRole "role filled by a knowledge platform that creates, modifies and deletes knowledge platforms (possibly including itself)"^^xsd:string)
AnnotationAssertion(core:note api4kpterminology:KnowledgePlatformManagerRole "should this be a role?")
AnnotationAssertion(core:scopeNote api4kpterminology:KnowledgePlatformManagerRole "Optionally, a KP Manager can orchestrate the Components in the KP.
Alternatively, the Components may coordinate among each other"^^xsd:string)
SubClassOf(api4kpterminology:KnowledgePlatformManagerRole api4kpterminology:Role)

# Class: api4kpterminology:KnowledgeRepresentationAndReasoningLanguage (knowledge representation and reasoning language)

AnnotationAssertion(rdfs:label api4kpterminology:KnowledgeRepresentationAndReasoningLanguage "knowledge representation and reasoning language")
AnnotationAssertion(core:definition api4kpterminology:KnowledgeRepresentationAndReasoningLanguage "OMS language, query language, or result language"^^xsd:string)
SubClassOf(api4kpterminology:KnowledgeRepresentationAndReasoningLanguage dol-terms:Language)

# Class: api4kpterminology:KnowledgeResource (knowledge resource)

AnnotationAssertion(rdfs:label api4kpterminology:KnowledgeResource "knowledge resource")
AnnotationAssertion(core:definition api4kpterminology:KnowledgeResource "immutable knowledge source"^^xsd:string)
AnnotationAssertion(core:note api4kpterminology:KnowledgeResource "May be identified to be at one of the following levels of abstraction; knowledge asset, generalized expression, knowledge manifestation, or knowledge item.")
EquivalentClasses(api4kpterminology:KnowledgeResource ObjectIntersectionOf(api4kpterminology:Immutable api4kpterminology:KnowledgeSource))
DisjointUnion(api4kpterminology:KnowledgeResource api4kpterminology:BasicKnowledgeResource api4kpterminology:StructuredKnowledgeResource)
DisjointUnion(api4kpterminology:KnowledgeResource api4kpterminology:KnowledgeAsset api4kpterminology:KnowledgeExpression api4kpterminology:KnowledgeItem api4kpterminology:KnowledgeManifestation)

# Class: api4kpterminology:KnowledgeSerialization (knowledge serialization)

AnnotationAssertion(rdfs:label api4kpterminology:KnowledgeSerialization "knowledge serialization")
AnnotationAssertion(core:definition api4kpterminology:KnowledgeSerialization "system of converting an expression into an character sequence."^^xsd:string)
SubClassOf(api4kpterminology:KnowledgeSerialization api4kpterminology:Serialization)
SubClassOf(api4kpterminology:KnowledgeSerialization ObjectSomeValuesFrom(api4kpterminology:isSerializationOf api4kpterminology:KnowledgeRepresentationAndReasoningLanguage))

# Class: api4kpterminology:KnowledgeSource (knowledge source)

AnnotationAssertion(rdfs:label api4kpterminology:KnowledgeSource "knowledge source")
AnnotationAssertion(core:definition api4kpterminology:KnowledgeSource "source of machine-readable information with (possibly ambiguous) semantics")
AnnotationAssertion(core:example api4kpterminology:KnowledgeSource "a database with a mapping to an ontology")
AnnotationAssertion(core:example api4kpterminology:KnowledgeSource "a stateful representation of a patient's history with OWL snapshots")
AnnotationAssertion(core:example api4kpterminology:KnowledgeSource "a stream of RDF graphs providing data from biomedical devices")
AnnotationAssertion(core:scopeNote api4kpterminology:KnowledgeSource "May be either mutable or immutable (unlike DOL OMSs, which are all immutable).")
AnnotationAssertion(core:scopeNote api4kpterminology:KnowledgeSource "OntoIOp sensitive"^^xsd:string)
SubClassOf(api4kpterminology:KnowledgeSource api4kpterminology:Source)

# Class: api4kpterminology:KnowledgeSourceDescription (knowledge source description)

AnnotationAssertion(rdfs:label api4kpterminology:KnowledgeSourceDescription "knowledge source description")
AnnotationAssertion(core:definition api4kpterminology:KnowledgeSourceDescription "knowledge resource whose subject matter is another knowledge source")
SubClassOf(api4kpterminology:KnowledgeSourceDescription api4kpterminology:KnowledgeResource)

# Class: api4kpterminology:LanguageEnvironment (language environment)

AnnotationAssertion(rdfs:label api4kpterminology:LanguageEnvironment "language environment")
AnnotationAssertion(core:definition api4kpterminology:LanguageEnvironment "environment whose members are languages")
SubClassOf(api4kpterminology:LanguageEnvironment api4kpterminology:Environment)
SubClassOf(api4kpterminology:LanguageEnvironment ObjectAllValuesFrom(api4kpterminology:hasEnvironmentMember api4kpterminology:KnowledgeRepresentationAndReasoningLanguage))

# Class: api4kpterminology:LanguageMapping (api4kpterminology:LanguageMapping)

EquivalentClasses(api4kpterminology:LanguageMapping dol-terms:LanguageMapping)
SubClassOf(api4kpterminology:LanguageMapping api4kpterminology:Mapping)

# Class: api4kpterminology:Mapping (api4kpterminology:Mapping)

EquivalentClasses(api4kpterminology:Mapping dol-terms:Mapping)

# Class: api4kpterminology:Message (api4kpterminology:Message)

SubClassOf(api4kpterminology:Message api4kpterminology:OperationColumn)

# Class: api4kpterminology:MessageType (api4kpterminology:MessageType)

SubClassOf(api4kpterminology:MessageType api4kpterminology:OperationColumn)

# Class: api4kpterminology:Mutable (mutable)

AnnotationAssertion(rdfs:label api4kpterminology:Mutable "mutable")
SubClassOf(api4kpterminology:Mutable ObjectSomeValuesFrom(api4kpterminology:hasSnapshot api4kpterminology:Immutable))

# Class: api4kpterminology:MutableKnowledgeBase (mutable knowledge base)

AnnotationAssertion(rdfs:label api4kpterminology:MutableKnowledgeBase "mutable knowledge base")
EquivalentClasses(api4kpterminology:MutableKnowledgeBase ObjectIntersectionOf(api4kpterminology:MutableSource ObjectSomeValuesFrom(api4kpterminology:hasSnapshot api4kpterminology:ImmutableKnowledgeBase)))
SubClassOf(api4kpterminology:MutableKnowledgeBase api4kpterminology:KnowledgeBase)

# Class: api4kpterminology:MutableSource (mutable source)

AnnotationAssertion(rdfs:label api4kpterminology:MutableSource "mutable source")
AnnotationAssertion(core:definition api4kpterminology:MutableSource "container that has, at any point in time, an explicit state that is fully represented by a knowledge resource. The language, structure and content of a mutable knowledge source may change over time, but the abstraction level is unchanging.")
AnnotationAssertion(core:example api4kpterminology:MutableSource "the snapshot of a patient's current condition (with timestamp)")
AnnotationAssertion(core:scopeNote api4kpterminology:MutableSource "API4KP does not commit to any particular topology of time. E.g. Linear, branching and braided time indices are possible.")
EquivalentClasses(api4kpterminology:MutableSource ObjectIntersectionOf(api4kpterminology:Mutable api4kpterminology:Source ObjectSomeValuesFrom(api4kpterminology:hasSnapshot ObjectIntersectionOf(api4kpterminology:Immutable api4kpterminology:Source))))

# Class: api4kpterminology:NonemptyEnvironment (nonempty environment)

AnnotationAssertion(rdfs:label api4kpterminology:NonemptyEnvironment "nonempty environment")
SubClassOf(api4kpterminology:NonemptyEnvironment api4kpterminology:Environment)
SubClassOf(api4kpterminology:NonemptyEnvironment ObjectSomeValuesFrom(api4kpterminology:hasEnvironmentMapping api4kpterminology:Mapping))

# Class: api4kpterminology:Operation (api4kpterminology:Operation)

SubClassOf(api4kpterminology:Operation api4kpterminology:MessageType)

# Class: api4kpterminology:PIEventType (api4kpterminology:PIEventType)

SubClassOf(api4kpterminology:PIEventType api4kpterminology:EventType)

# Class: api4kpterminology:PIFailureType (api4kpterminology:PIFailureType)

SubClassOf(api4kpterminology:PIFailureType api4kpterminology:FailureType)

# Class: api4kpterminology:PSEventType (api4kpterminology:PSEventType)

SubClassOf(api4kpterminology:PSEventType api4kpterminology:EventType)

# Class: api4kpterminology:PSFailureType (api4kpterminology:PSFailureType)

SubClassOf(api4kpterminology:PSFailureType api4kpterminology:FailureType)

# Class: api4kpterminology:Platform (api4kpterminology:Platform)

SubClassOf(api4kpterminology:Platform api4kpterminology:CommunicatingEntity)

# Class: api4kpterminology:PlatformDesign (api4kpterminology:PlatformDesign)

SubClassOf(api4kpterminology:PlatformDesign api4kpterminology:PlatformType)

# Class: api4kpterminology:PlatformImplementation (api4kpterminology:PlatformImplementation)

SubClassOf(api4kpterminology:PlatformImplementation api4kpterminology:PlatformType)

# Class: api4kpterminology:PlatformInstallation (api4kpterminology:PlatformInstallation)

SubClassOf(api4kpterminology:PlatformInstallation api4kpterminology:Platform)

# Class: api4kpterminology:PlatformSpecification (api4kpterminology:PlatformSpecification)

AnnotationAssertion(core:editorialNote api4kpterminology:PlatformSpecification "we already have a class called specification")
SubClassOf(api4kpterminology:PlatformSpecification api4kpterminology:PlatformType)

# Class: api4kpterminology:PlatformType (api4kpterminology:PlatformType)

SubClassOf(api4kpterminology:PlatformType api4kpterminology:Platform)

# Class: api4kpterminology:PreservingEnvironment (preserving environment)

AnnotationAssertion(rdfs:label api4kpterminology:PreservingEnvironment "preserving environment")
AnnotationAssertion(core:definition api4kpterminology:PreservingEnvironment "environment where every mapping preserves a specified property")
SubClassOf(api4kpterminology:PreservingEnvironment api4kpterminology:Environment)
SubClassOf(api4kpterminology:PreservingEnvironment ObjectSomeValuesFrom(api4kpterminology:allPreserve api4kpterminology:EquivalenceRelation))

# Class: api4kpterminology:Program (api4kpterminology:Program)

SubClassOf(api4kpterminology:Program api4kpterminology:Component)

# Class: api4kpterminology:Proxy (proxy)

AnnotationAssertion(rdfs:label api4kpterminology:Proxy "proxy")
AnnotationAssertion(core:definition api4kpterminology:Proxy "role filled by a knowledge platform that receives certain API4KP operations but does not execute these requests directly. The proxy will forward the request to another proxy or a KP, possibly mapping the request to other operations before forwarding. The proxy may also relay the response back to the requestor."^^xsd:string)
AnnotationAssertion(core:editorialNote api4kpterminology:Proxy "should this be a subclass of role?")
AnnotationAssertion(core:note api4kpterminology:Proxy "This definition does not exclude other functionalities."^^xsd:string)
AnnotationAssertion(core:scopeNote api4kpterminology:Proxy "The proxy may play a security role."^^xsd:string)
SubClassOf(api4kpterminology:Proxy api4kpterminology:Role)

# Class: api4kpterminology:QueryAsset (query asset)

AnnotationAssertion(rdfs:label api4kpterminology:QueryAsset "query asset")
AnnotationAssertion(core:definition api4kpterminology:QueryAsset "knowledge asset of queries."^^xsd:string)
SubClassOf(api4kpterminology:QueryAsset api4kpterminology:KnowledgeAsset)
SubClassOf(api4kpterminology:QueryAsset api4kpterminology:QueryResource)
SubClassOf(api4kpterminology:QueryAsset ObjectSomeValuesFrom(api4kpterminology:conceptualizes api4kpterminology:QueryGeneralizedExpession))

# Class: api4kpterminology:QueryEncoding (query encoding)

AnnotationAssertion(rdfs:label api4kpterminology:QueryEncoding "query encoding")
AnnotationAssertion(core:definition api4kpterminology:QueryEncoding "byte (or bit) sequence that is the encoding of a query manifestation in some character encoding system(s)."^^xsd:string)
SubClassOf(api4kpterminology:QueryEncoding api4kpterminology:KnowledgeEncoding)
SubClassOf(api4kpterminology:QueryEncoding api4kpterminology:QueryResource)
SubClassOf(api4kpterminology:QueryEncoding ObjectSomeValuesFrom(api4kpterminology:encodes api4kpterminology:QueryManifestation))

# Class: api4kpterminology:QueryGeneralizedExpession (query generalised expression)

AnnotationAssertion(rdfs:label api4kpterminology:QueryGeneralizedExpession "query generalised expression")
AnnotationAssertion(core:definition api4kpterminology:QueryGeneralizedExpession "generalized expression using query languages."^^xsd:string)
EquivalentClasses(api4kpterminology:QueryGeneralizedExpession ObjectIntersectionOf(api4kpterminology:KnowledgeExpression api4kpterminology:QueryResource))
EquivalentClasses(api4kpterminology:QueryGeneralizedExpession ObjectIntersectionOf(ObjectSomeValuesFrom(api4kpterminology:usesLanguage api4kpterminology:QueryLanguage) ObjectAllValuesFrom(api4kpterminology:usesLanguage api4kpterminology:QueryLanguage)))

# Class: api4kpterminology:QueryItem (query item)

AnnotationAssertion(rdfs:label api4kpterminology:QueryItem "query item")
AnnotationAssertion(core:definition api4kpterminology:QueryItem "physical instance of an encoding, e.g. a file on a hard drive, a Java String in memory."^^xsd:string)
SubClassOf(api4kpterminology:QueryItem api4kpterminology:KnowledgeItem)
SubClassOf(api4kpterminology:QueryItem api4kpterminology:QueryResource)
SubClassOf(api4kpterminology:QueryItem ObjectSomeValuesFrom(api4kpterminology:reproduces api4kpterminology:QueryEncoding))

# Class: api4kpterminology:QueryLanguage (query language)

AnnotationAssertion(rdfs:label api4kpterminology:QueryLanguage "query language")
AnnotationAssertion(core:definition api4kpterminology:QueryLanguage "language consisting of a set of query expressions, one or more serializations of these Expressions, and one or more Entailment Regimes (http://www.w3.org/TR/sparql11-entailment/#entRegimeParts) defined in terms of formal, logic-based semantics. "^^xsd:string)
AnnotationAssertion(core:scopeNote api4kpterminology:QueryLanguage "Note: the set of expressions of a query language may be defined by a grammar, or it may be defined in terms of expressions of an OMS language together with a sequence of non-logical constants that will be treated as the distinguished query variables. Additional features of a query language are perfomatives used to indicate how query results should be returned."^^xsd:string)
SubClassOf(api4kpterminology:QueryLanguage api4kpterminology:KnowledgeRepresentationAndReasoningLanguage)

# Class: api4kpterminology:QueryManifestation (query manifestation)

AnnotationAssertion(rdfs:label api4kpterminology:QueryManifestation "query manifestation")
AnnotationAssertion(core:definition api4kpterminology:QueryManifestation "character sequence, or collection of character sequences, each being the serialization of a query in a query serialization (Formats)."^^xsd:string)
SubClassOf(api4kpterminology:QueryManifestation api4kpterminology:KnowledgeManifestation)
SubClassOf(api4kpterminology:QueryManifestation api4kpterminology:QueryResource)
SubClassOf(api4kpterminology:QueryManifestation ObjectSomeValuesFrom(api4kpterminology:manifests api4kpterminology:QueryGeneralizedExpession))
SubClassOf(api4kpterminology:QueryManifestation ObjectSomeValuesFrom(api4kpterminology:usesSerialization api4kpterminology:QuerySerialization))

# Class: api4kpterminology:QueryResource (query resource)

AnnotationAssertion(rdfs:label api4kpterminology:QueryResource "query resource")
AnnotationAssertion(core:definition api4kpterminology:QueryResource "query asset, query, query manifestation, query encoding, or query item"^^xsd:string)
SubClassOf(api4kpterminology:QueryResource api4kpterminology:KnowledgeResource)

# Class: api4kpterminology:QuerySerialization (query serialization)

AnnotationAssertion(rdfs:label api4kpterminology:QuerySerialization "query serialization")
AnnotationAssertion(core:definition api4kpterminology:QuerySerialization "serialization of a query language."^^xsd:string)
SubClassOf(api4kpterminology:QuerySerialization api4kpterminology:KnowledgeSerialization)
SubClassOf(api4kpterminology:QuerySerialization ObjectSomeValuesFrom(api4kpterminology:isSerializationOf api4kpterminology:QueryLanguage))

# Class: api4kpterminology:ResultAsset (result asset)

AnnotationAssertion(rdfs:label api4kpterminology:ResultAsset "result asset")
AnnotationAssertion(core:definition api4kpterminology:ResultAsset "knowledge asset for query results."^^xsd:string)
SubClassOf(api4kpterminology:ResultAsset api4kpterminology:KnowledgeAsset)
SubClassOf(api4kpterminology:ResultAsset api4kpterminology:ResultResource)
SubClassOf(api4kpterminology:ResultAsset ObjectSomeValuesFrom(api4kpterminology:conceptualizes api4kpterminology:ResultGeneralizedExpression))

# Class: api4kpterminology:ResultEncoding (result encoding)

AnnotationAssertion(rdfs:label api4kpterminology:ResultEncoding "result encoding")
AnnotationAssertion(core:definition api4kpterminology:ResultEncoding "byte (or bit) sequence that is the encoding of a result manifestation in some character encoding system(s)."^^xsd:string)
SubClassOf(api4kpterminology:ResultEncoding api4kpterminology:KnowledgeEncoding)
SubClassOf(api4kpterminology:ResultEncoding api4kpterminology:ResultResource)
SubClassOf(api4kpterminology:ResultEncoding ObjectSomeValuesFrom(api4kpterminology:encodes api4kpterminology:ResultManifestation))

# Class: api4kpterminology:ResultGeneralizedExpression (result generalized expression)

AnnotationAssertion(rdfs:label api4kpterminology:ResultGeneralizedExpression "result generalized expression")
AnnotationAssertion(core:definition api4kpterminology:ResultGeneralizedExpression "sequence of bindings as a correspondence between distinguished query variables and derived symbols."^^xsd:string)
SubClassOf(api4kpterminology:ResultGeneralizedExpression api4kpterminology:KnowledgeExpression)
SubClassOf(api4kpterminology:ResultGeneralizedExpression api4kpterminology:ResultResource)
SubClassOf(api4kpterminology:ResultGeneralizedExpression ObjectSomeValuesFrom(api4kpterminology:usesLanguage api4kpterminology:ResultLanguage))
SubClassOf(api4kpterminology:ResultGeneralizedExpression ObjectAllValuesFrom(api4kpterminology:usesLanguage api4kpterminology:ResultLanguage))

# Class: api4kpterminology:ResultItem (result item)

AnnotationAssertion(rdfs:label api4kpterminology:ResultItem "result item")
AnnotationAssertion(core:definition api4kpterminology:ResultItem "physical instance of an encoding, e.g. a file on a hard drive, a Java String in memory."^^xsd:string)
SubClassOf(api4kpterminology:ResultItem api4kpterminology:KnowledgeItem)
SubClassOf(api4kpterminology:ResultItem api4kpterminology:ResultResource)
SubClassOf(api4kpterminology:ResultItem ObjectSomeValuesFrom(api4kpterminology:reproduces api4kpterminology:ResultEncoding))

# Class: api4kpterminology:ResultLanguage (result language)

AnnotationAssertion(rdfs:label api4kpterminology:ResultLanguage "result language")
AnnotationAssertion(core:definition api4kpterminology:ResultLanguage "language for expressing query results."^^xsd:string)
SubClassOf(api4kpterminology:ResultLanguage api4kpterminology:KnowledgeRepresentationAndReasoningLanguage)

# Class: api4kpterminology:ResultManifestation (result manifestation)

AnnotationAssertion(rdfs:label api4kpterminology:ResultManifestation "result manifestation")
AnnotationAssertion(core:definition api4kpterminology:ResultManifestation "character sequence, or collection of character sequences, each being the serialization of a result in a result serialization (Formats)."^^xsd:string)
SubClassOf(api4kpterminology:ResultManifestation api4kpterminology:KnowledgeManifestation)
SubClassOf(api4kpterminology:ResultManifestation api4kpterminology:ResultResource)
SubClassOf(api4kpterminology:ResultManifestation ObjectSomeValuesFrom(api4kpterminology:manifests api4kpterminology:ResultGeneralizedExpression))
SubClassOf(api4kpterminology:ResultManifestation ObjectSomeValuesFrom(api4kpterminology:usesSerialization api4kpterminology:ResultSerialization))

# Class: api4kpterminology:ResultResource (result resource)

AnnotationAssertion(rdfs:label api4kpterminology:ResultResource "result resource")
AnnotationAssertion(core:definition api4kpterminology:ResultResource "result asset, Result, result manifestation, result encoding, or result item"^^xsd:string)
AnnotationAssertion(core:editorialNote api4kpterminology:ResultResource "Should we rename this to QueryResultResource, since Result could be confused with Output.")
SubClassOf(api4kpterminology:ResultResource api4kpterminology:KnowledgeResource)

# Class: api4kpterminology:ResultSerialization (result serialization)

AnnotationAssertion(rdfs:label api4kpterminology:ResultSerialization "result serialization")
AnnotationAssertion(core:definition api4kpterminology:ResultSerialization "serialization of a result language."^^xsd:string)
SubClassOf(api4kpterminology:ResultSerialization api4kpterminology:KnowledgeSerialization)
SubClassOf(api4kpterminology:ResultSerialization ObjectSomeValuesFrom(api4kpterminology:isSerializationOf api4kpterminology:ResultLanguage))

# Class: api4kpterminology:Role (role)

AnnotationAssertion(rdfs:label api4kpterminology:Role "role")
AnnotationAssertion(core:definition api4kpterminology:Role "set of required proficiencies."^^xsd:string)
AnnotationAssertion(core:scopeNote api4kpterminology:Role "Certain standard API4KP Roles will be enumerated in the specification. The specification will also allow user-defined Roles."^^xsd:string)
SubClassOf(api4kpterminology:Role ObjectSomeValuesFrom(api4kpterminology:requires api4kpproficiency:CreatingProficiency-KnowledgePlatform))
SubClassOf(api4kpterminology:Role ObjectSomeValuesFrom(api4kpterminology:requires api4kpproficiency:DestroyingProficiency-KnowledgePlatform))
SubClassOf(api4kpterminology:Role ObjectSomeValuesFrom(api4kpterminology:requires api4kpproficiency:ModifyingProficiency-KnowledgePlatform))

# Class: api4kpterminology:Serialization (serialization)

AnnotationAssertion(rdfs:isDefinedBy api4kpterminology:Serialization "http://www.omg.org/spec/OntoIOp/Terminology")
AnnotationAssertion(rdfs:label api4kpterminology:Serialization "serialization")
AnnotationAssertion(core:definition api4kpterminology:Serialization "system for transforming from an expression to a character sequence"^^xsd:string)
AnnotationAssertion(core:scopeNote api4kpterminology:Serialization "OntoIOp sensitive"^^xsd:string)
SubClassOf(api4kpterminology:Serialization ObjectSomeValuesFrom(api4kpterminology:isSerializationOf dol-terms:Language))

# Class: api4kpterminology:Source (source)

AnnotationAssertion(rdfs:label api4kpterminology:Source "source")

# Class: api4kpterminology:Specification (specification)

AnnotationAssertion(rdfs:label api4kpterminology:Specification "specification")
AnnotationAssertion(core:definition api4kpterminology:Specification "TBD"^^xsd:string)

# Class: api4kpterminology:Structured (structured)

AnnotationAssertion(rdfs:label api4kpterminology:Structured "structured")

# Class: api4kpterminology:StructuredKnowledgeAsset (structured knowledge asset)

AnnotationAssertion(rdfs:label api4kpterminology:StructuredKnowledgeAsset "structured knowledge asset")
AnnotationAssertion(core:definition api4kpterminology:StructuredKnowledgeAsset "collection of knowledge assets  (either structured or basic), which are not necessarily according to the same environment, but where there is a unique language that is the focus of the environment of each component")
AnnotationAssertion(core:example api4kpterminology:StructuredKnowledgeAsset "KA2: a heterogeneous structure of assets conceptualized from the RDF, OWL and CL expressions of example KE2 according to an environment that provides translations from RDF or OWL into CL, and an ontology-based data access (OBDA) source schema providing a mapping from XMPP schemas to OWL")
EquivalentClasses(api4kpterminology:StructuredKnowledgeAsset ObjectIntersectionOf(api4kpterminology:KnowledgeAsset api4kpterminology:StructuredKnowledgeResource))
SubClassOf(api4kpterminology:StructuredKnowledgeAsset ObjectAllValuesFrom(api4kpterminology:hasStructuralComponent api4kpterminology:KnowledgeAsset))

# Class: api4kpterminology:StructuredKnowledgeEncoding (structured knowledge encoding)

AnnotationAssertion(rdfs:label api4kpterminology:StructuredKnowledgeEncoding "structured knowledge encoding")
EquivalentClasses(api4kpterminology:StructuredKnowledgeEncoding ObjectIntersectionOf(api4kpterminology:KnowledgeEncoding api4kpterminology:StructuredKnowledgeResource))
SubClassOf(api4kpterminology:StructuredKnowledgeEncoding ObjectAllValuesFrom(api4kpterminology:hasStructuralComponent api4kpterminology:KnowledgeEncoding))

# Class: api4kpterminology:StructuredKnowledgeExpression (structured knowledge expression)

AnnotationAssertion(rdfs:label api4kpterminology:StructuredKnowledgeExpression "structured knowledge expression")
AnnotationAssertion(core:definition api4kpterminology:StructuredKnowledgeExpression "collection of knowledge expressions (either structured or basic), which are not necessarily in the same language and may themselves have structure.")
AnnotationAssertion(core:example api4kpterminology:StructuredKnowledgeExpression "KE2: a heterogeneous collection of streaming data and RDF graphs, together with static OWL ontologies and CL texts, and ECA rules describing actions of a CDS")
AnnotationAssertion(core:example api4kpterminology:StructuredKnowledgeExpression "KE3: the OWL 2 DL ontology series KA1, viewed as a collection of expressions rather than an equivalence class")
EquivalentClasses(api4kpterminology:StructuredKnowledgeExpression ObjectIntersectionOf(api4kpterminology:KnowledgeExpression api4kpterminology:StructuredKnowledgeResource))
SubClassOf(api4kpterminology:StructuredKnowledgeExpression ObjectAllValuesFrom(api4kpterminology:hasStructuralComponent api4kpterminology:KnowledgeExpression))

# Class: api4kpterminology:StructuredKnowledgeItem (structured knowledge item)

AnnotationAssertion(rdfs:label api4kpterminology:StructuredKnowledgeItem "structured knowledge item")
AnnotationAssertion(core:definition api4kpterminology:StructuredKnowledgeItem "collection of knowledge items  (either structured or basic), which are not necessarily in the same language, dialect, format or location, and may themselves have structure")
AnnotationAssertion(core:example api4kpterminology:StructuredKnowledgeItem "KI2:  a heterogeneous structure of an RDF triple store, network connections to binary input streams cached in a MySQL database, RuleML XML files on a local hard drive and CL XCL2 files on a network server in a content management system, exemplifying example KM2")
EquivalentClasses(api4kpterminology:StructuredKnowledgeItem ObjectIntersectionOf(api4kpterminology:KnowledgeItem api4kpterminology:StructuredKnowledgeResource))
SubClassOf(api4kpterminology:StructuredKnowledgeItem ObjectAllValuesFrom(api4kpterminology:hasStructuralComponent api4kpterminology:KnowledgeItem))

# Class: api4kpterminology:StructuredKnowledgeManifestation (structured knowledge manifestation)

AnnotationAssertion(rdfs:label api4kpterminology:StructuredKnowledgeManifestation "structured knowledge manifestation")
AnnotationAssertion(core:definition api4kpterminology:StructuredKnowledgeManifestation "collection of knowledge manifestations (either structured or basic), which are not necessarily in the same language or dialect and may themselves have structure")
AnnotationAssertion(core:example api4kpterminology:StructuredKnowledgeManifestation "KM2: a heterogeneous structure of RDF Turtle, OWL Manchester as sequences of string tokens, and XMPP, OWL/XML, ECA RuleML and CL XCL2 (the XML-based dialect of Common Logic Edition 2) as XML DOM documents embodying example KE2")
EquivalentClasses(api4kpterminology:StructuredKnowledgeManifestation ObjectIntersectionOf(api4kpterminology:KnowledgeManifestation api4kpterminology:StructuredKnowledgeResource))
SubClassOf(api4kpterminology:StructuredKnowledgeManifestation ObjectAllValuesFrom(api4kpterminology:hasStructuralComponent api4kpterminology:KnowledgeManifestation))

# Class: api4kpterminology:StructuredKnowledgeResource (structured knowledge resource)

AnnotationAssertion(rdfs:label api4kpterminology:StructuredKnowledgeResource "structured knowledge resource")
EquivalentClasses(api4kpterminology:StructuredKnowledgeResource ObjectIntersectionOf(api4kpterminology:KnowledgeResource api4kpterminology:Structured))
SubClassOf(api4kpterminology:StructuredKnowledgeResource ObjectAllValuesFrom(api4kpterminology:hasStructuralComponent api4kpterminology:KnowledgeResource))

# Class: api4kpterminology:Success (api4kpterminology:Success)

SubClassOf(api4kpterminology:Success api4kpterminology:Request)

# Class: api4kpterminology:SuccessMonad (api4kpterminology:SuccessMonad)

SubClassOf(api4kpterminology:SuccessMonad api4kpterminology:EventType)

# Class: api4kpevent:KnowledgeEvent (knowledge event)

SubClassOf(api4kpevent:KnowledgeEvent api4kpterminology:Event)

# Class: dol-terms:Expression (expression)

SubClassOf(dol-terms:Expression api4kpterminology:KnowledgeExpression)

# Class: dol-terms:OMSLanguage (OMS language)

SubClassOf(dol-terms:OMSLanguage api4kpterminology:KnowledgeRepresentationAndReasoningLanguage)

# Class: dol-terms:OMSSerialization (dol-terms:OMSSerialization)

SubClassOf(dol-terms:OMSSerialization api4kpterminology:KnowledgeSerialization)


SubObjectPropertyOf(ObjectPropertyChain(api4kpterminology:actualizes api4kpterminology:isExposedBy) api4kpterminology:isEventOf)
SubObjectPropertyOf(ObjectPropertyChain(api4kpterminology:fillsRole api4kpterminology:requires) api4kpterminology:hasProficiency)
SubObjectPropertyOf(ObjectPropertyChain(api4kpterminology:hasEnvironmentMapping dol-terms:mapsFrom) api4kpterminology:hasEnvironmentMember)
SubObjectPropertyOf(ObjectPropertyChain(api4kpterminology:hasEnvironmentMapping dol-terms:mapsTo) api4kpterminology:hasEnvironmentMember)
SubObjectPropertyOf(ObjectPropertyChain(api4kpterminology:implements api4kpterminology:exposes) api4kpterminology:conveys)
SubObjectPropertyOf(ObjectPropertyChain(api4kpterminology:isEnvironmentMappingOf api4kpterminology:allPreserve) api4kpterminology:preserves)
SubObjectPropertyOf(ObjectPropertyChain(api4kpterminology:isRequesteeOf api4kptry:hasEvent) api4kpterminology:executes)
SubObjectPropertyOf(ObjectPropertyChain(api4kpterminology:isRequesteeOf api4kptry:hasEvent api4kpevent:hasKPOutput) api4kpterminology:manages)
SubObjectPropertyOf(ObjectPropertyChain(api4kpterminology:isRequesteeOf api4kptry:isDelegatedTo) api4kpterminology:requests)
SubObjectPropertyOf(ObjectPropertyChain(api4kpterminology:parses api4kpterminology:usesSerialization api4kpterminology:isSerializationOf) api4kpterminology:usesLanguage)
SubObjectPropertyOf(ObjectPropertyChain(api4kpterminology:requests api4kpterminology:hasRequestee) api4kpterminology:interactsWith)
SubObjectPropertyOf(ObjectPropertyChain(api4kpevent:isInputOf api4kpevent:hasOutputFromConceptualizing) api4kpterminology:expresses)
SubObjectPropertyOf(ObjectPropertyChain(api4kpevent:isInputOf api4kpevent:hasOutputFromInStreaming) api4kpterminology:reproduces)
SubObjectPropertyOf(ObjectPropertyChain(api4kpevent:isInputOf api4kpevent:hasOutputFromParsing) api4kpterminology:manifests)
SubObjectPropertyOf(ObjectPropertyChain(api4kpevent:isInputOf api4kpevent:hasOutputFromUnmarshalling) api4kpterminology:encodes)
SubObjectPropertyOf(ObjectPropertyChain(api4kptry:isEventOf api4kptry:isTryOf) api4kpterminology:isEventOf)
)