<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rdf:RDF [
	<!ENTITY AnnotationVocabulary "https://www.omg.org/spec/EDMC-FIBO/FND/Utilities/AnnotationVocabulary/">
	<!ENTITY AnnotationVocabulary1 "http://www.omg.org/spec/EDMC-FIBO/FND/Utilities/AnnotationVocabulary/">
	<!ENTITY api4kp "https://www.omg.org/spec/API4KP/api4kp/">
	<!ENTITY api4kp-lang "https://www.omg.org/spec/API4KP/api4kp-lang/">
	<!ENTITY dct "http://purl.org/dc/terms/">
	<!ENTITY dol "http://www.omg.org/spec/DOL/DOL-terms/">
	<!ENTITY lcc-lr "https://www.omg.org/spec/LCC/Languages/LanguageRepresentation/">
	<!ENTITY olex "http://www.w3.org/ns/lemon/ontolex#">
	<!ENTITY owl "http://www.w3.org/2002/07/owl#">
	<!ENTITY rdf "http://www.w3.org/1999/02/22-rdf-syntax-ns#">
	<!ENTITY rdfs "http://www.w3.org/2000/01/rdf-schema#">
	<!ENTITY skos "http://www.w3.org/2004/02/skos/core#">
	<!ENTITY sm "http://www.omg.org/techprocess/ab/SpecificationMetadata/">
	<!ENTITY xsd "http://www.w3.org/2001/XMLSchema#">
]>
<rdf:RDF xml:base="https://www.omg.org/spec/API4KP/api4kp-lang/"
	xmlns="https://www.omg.org/spec/API4KP/api4kp-lang/"
	xmlns:AnnotationVocabulary="https://www.omg.org/spec/EDMC-FIBO/FND/Utilities/AnnotationVocabulary/"
	xmlns:AnnotationVocabulary1="http://www.omg.org/spec/EDMC-FIBO/FND/Utilities/AnnotationVocabulary/"
	xmlns:api4kp="https://www.omg.org/spec/API4KP/api4kp/"
	xmlns:api4kp-lang="https://www.omg.org/spec/API4KP/api4kp-lang/"
	xmlns:dct="http://purl.org/dc/terms/"
	xmlns:dol="http://www.omg.org/spec/DOL/DOL-terms/"
	xmlns:lcc-lr="https://www.omg.org/spec/LCC/Languages/LanguageRepresentation/"
	xmlns:olex="http://www.w3.org/ns/lemon/ontolex#"
	xmlns:owl="http://www.w3.org/2002/07/owl#"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
	xmlns:skos="http://www.w3.org/2004/02/skos/core#"
	xmlns:sm="http://www.omg.org/techprocess/ab/SpecificationMetadata/"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema#">
	
	<owl:Ontology rdf:about="https://www.omg.org/spec/API4KP/api4kp-lang/">
		<rdfs:label>API4KP Ontology of Languages</rdfs:label>
		<dct:abstract>A module of the API4KP ontology that focuses on Languages and Grammars</dct:abstract>
		<dct:creator>Davide Sottara (sottara.davide at mayo.edu)</dct:creator>
		<dct:license rdf:datatype="&xsd;anyURI">http://opensource.org/licenses/MIT</dct:license>
		<sm:contentLanguage rdf:datatype="&xsd;anyURI">http://www.w3.org/standards/techs/owl#w3c_all</sm:contentLanguage>
		<sm:copyright>Copyright (c) 2014-2020 88 Solutions</sm:copyright>
		<sm:copyright>Copyright (c) 2014-2020 Adaptive</sm:copyright>
		<sm:copyright>Copyright (c) 2014-2020 Arizona State University</sm:copyright>
		<sm:copyright>Copyright (c) 2014-2020 Athan Services</sm:copyright>
		<sm:copyright>Copyright (c) 2014-2020 Fraunhofer FOKUS</sm:copyright>
		<sm:copyright>Copyright (c) 2014-2020 Freie Universitat Berlin</sm:copyright>
		<sm:copyright>Copyright (c) 2014-2020 Mayo Clinic</sm:copyright>
		<sm:copyright>Copyright (c) 2014-2020 Model Driven Solutions</sm:copyright>
		<sm:copyright>Copyright (c) 2014-2020 Thematix Partners LLC</sm:copyright>
		<sm:copyright>Copyright (c) 2015-2020 Object Management Group, Inc.</sm:copyright>
		<sm:copyright>Copyright (c) 2019-2020 Micro Focus</sm:copyright>
		<sm:dependsOn rdf:datatype="&xsd;anyURI">https://www.omg.org/spec/API4KP/api4kp/</sm:dependsOn>
		<sm:fileAbbreviation>api4kp-lang</sm:fileAbbreviation>
		<sm:filename>api4kp-lang.rdf</sm:filename>
		<owl:imports rdf:resource="http://www.omg.org/spec/DOL/20171101/DOL-terms/"/>
		<owl:imports rdf:resource="http://www.omg.org/techprocess/ab/SpecificationMetadata/"/>
		<owl:imports rdf:resource="https://www.omg.org/spec/API4KP/SNAPSHOT/api4kp/"/>
		<owl:imports rdf:resource="https://www.omg.org/spec/LCC/Languages/LanguageRepresentation/"/>
		<owl:versionIRI rdf:resource="https://www.omg.org/spec/API4KP/SNAPSHOT/api4kp-lang/"/>
	</owl:Ontology>
	
	<owl:Class rdf:about="&dol;FormalLanguage">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;ConstructedLanguage"/>
		<owl:equivalentClass>
			<owl:Class>
				<owl:intersectionOf rdf:parseType="Collection">
					<rdf:Description rdf:about="&api4kp-lang;ConstructedLanguage">
					</rdf:Description>
					<owl:Restriction>
						<owl:onProperty rdf:resource="&api4kp;specifiedBy"/>
						<owl:someValuesFrom rdf:resource="&api4kp-lang;FormalGrammar"/>
					</owl:Restriction>
				</owl:intersectionOf>
			</owl:Class>
		</owl:equivalentClass>
		<skos:prefLabel xml:lang="en">formal language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&dol;Language">
		<owl:equivalentClass rdf:resource="&lcc-lr;Language"/>
	</owl:Class>
	
	<owl:Class rdf:about="&dol;LinguisticEntity">
	</owl:Class>
	
	<owl:Class rdf:about="&dol;OMSLanguage">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;KnowledgeRepresentationAndReasoningLanguage"/>
	</owl:Class>
	
	<owl:Class rdf:about="&dol;Profile">
		<rdfs:subClassOf rdf:resource="&dol;OMSLanguage"/>
	</owl:Class>
	
	<owl:Class rdf:about="&dol;QueryLanguage">
		<rdfs:subClassOf rdf:resource="&dol;OMSLanguage"/>
		<rdfs:subClassOf rdf:resource="&api4kp-lang;DedicatedLanguage"/>
	</owl:Class>
	
	<owl:Class rdf:about="&dol;Serialization">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;Serialization"/>
	</owl:Class>
	
	<owl:Class rdf:about="&dol;Signature">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;Lexicon"/>
		<skos:scopeNote>TODO: In DOL, signatures are defined as &apos;set of symbols&apos;, but are treated as &apos;mathematical&apos; rather than &apos;linguistic&apos; entities (i.e. concepts vs terms).</skos:scopeNote>
	</owl:Class>
	
	<owl:Class rdf:about="&dol;Specification">
	</owl:Class>
	
	<owl:Class rdf:about="&dol;StandoffMarkup">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;MarkupLanguage"/>
	</owl:Class>
	
	<owl:ObjectProperty rdf:about="&dol;formalizes">
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&dol;isLinguisticallyRelatedTo">
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&dol;isSerializedIn">
		<rdfs:subPropertyOf rdf:resource="&api4kp-lang;usesSerialization"/>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&dol;isSubLanguageOf">
		<owl:inverseOf rdf:resource="&api4kp-lang;hasSublanguage"/>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&dol;serializes">
		<rdfs:subPropertyOf rdf:resource="&api4kp-lang;serializes"/>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&dol;supportsSerialization">
		<rdfs:subPropertyOf rdf:resource="&api4kp-lang;hasGrammar"/>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&dol;usesLanguage">
		<rdfs:subPropertyOf rdf:resource="&dol;isLinguisticallyRelatedTo"/>
		<rdfs:comment>if a resource uses a language, it is possible to extract an expression from that resource that is a valid according to that language&apos;s grammar, and can be parsed into an abstract syntax tree</rdfs:comment>
		<rdfs:range rdf:resource="&dol;Language"/>
	</owl:ObjectProperty>
	
	<owl:Class rdf:about="&olex;LexicalEntry">
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;AbstractSemanticGraph">
		<rdfs:subClassOf rdf:resource="&dol;Graph"/>
		<rdfs:subClassOf rdf:resource="&api4kp-lang;ParsingStructure"/>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&dol;formalizes"/>
				<owl:someValuesFrom rdf:resource="&api4kp;KnowledgeAsset"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<skos:altLabel>ASG</skos:altLabel>
		<skos:definition>graph-based parsing structure that formalizes an expression based on the semantics of its information content</skos:definition>
		<skos:prefLabel>abstract semantic graph</skos:prefLabel>
		<skos:scopeNote>ASGs are the expressions that are closest to a knowledge asset, which otherwise cannot be shared without involving some language</skos:scopeNote>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;AbstractSyntax">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;FormalGrammar"/>
		<rdfs:comment>In computer science, abstract syntaxes are used to construct Parsers</rdfs:comment>
		<dct:source>https://www.omg.org/spec/ASTM/About-ASTM/</dct:source>
		<owl:disjointWith rdf:resource="&api4kp-lang;Serialization"/>
		<skos:definition>a formal grammar that includes some and only rules that have a direct impact on the semantics of the conformant sentences</skos:definition>
		<skos:prefLabel xml:lang="en">abstract syntax</skos:prefLabel>
		<skos:scopeNote>DOL&apos;s &apos;abstract syntax&apos; is an alias of api4kp&apos;s machine-interpretable language, i.e. a language that is specified by some expression of an abstract syntax in the api4kp&apos;s sense</skos:scopeNote>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;AbstractSyntaxTree">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;ParsingStructure"/>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&dol;formalizes"/>
				<owl:someValuesFrom rdf:resource="&api4kp;AbstractKnowledgeExpression"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp;dependsOn"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;AbstractSyntax"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<skos:altLabel>AST</skos:altLabel>
		<skos:altLabel>tree-based parsing structure that formalizes an expression according to the rules of an abstract syntax</skos:altLabel>
		<skos:prefLabel>abstract syntax tree</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;Alphabet">
		<rdfs:subClassOf rdf:resource="&lcc-lr;Arrangement"/>
		<skos:definition>set of graphemes used to construct symbols, terms and sentences in a language</skos:definition>
		<skos:prefLabel>alphabet</skos:prefLabel>
		<skos:scopeNote>not limited to written languages - in fact, includes musical alphabets and pictorial alphabets</skos:scopeNote>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;AnnotationLanguage">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;DedicatedLanguage"/>
		<rdfs:subClassOf rdf:resource="&api4kp-lang;MachineReadableLanguage"/>
		<skos:definition>formal language dedicated to the expression of annotation</skos:definition>
		<skos:prefLabel>annotation language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;BinaryStream">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;SymbolSequence"/>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&dol;formalizes"/>
				<owl:someValuesFrom rdf:resource="&api4kp;EncodedKnowledgeExpression"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<skos:definition>sequence of symbols such that the only symbols are &apos;0&apos; and &apos;1&apos;</skos:definition>
		<skos:prefLabel>binary stream</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;ConcreteSyntaxTree">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;ParsingStructure"/>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&dol;formalizes"/>
				<owl:someValuesFrom rdf:resource="&api4kp;ConcreteKnowledgeExpression"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp;dependsOn"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;Serialization"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<skos:altLabel>parse tree</skos:altLabel>
		<skos:definition>tree-based parsing structure that formalizes a concrete expression according to the rules of a concrete syntax</skos:definition>
		<skos:prefLabel>concrete syntax tree</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;ConstructedLanguage">
		<rdfs:subClassOf rdf:resource="&lcc-lr;Language"/>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp-lang;hasGrammar"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;PrescriptiveGrammar"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<rdfs:comment>constructed languages are the product of explcit design, rather than natural evolution</rdfs:comment>
		<skos:prefLabel>constructed language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;ControlledNaturalLanguage">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;ConstructedLanguage"/>
		<skos:definition>constructed language that approximates some natural language while reducing and/or eliminating complexities and ambiguities</skos:definition>
		<skos:prefLabel>controlled natural language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;DedicatedLanguage">
		<rdfs:subClassOf rdf:resource="&dol;FormalLanguage"/>
		<skos:definition>formal language designed to have language aspects used to express specific kinds of knowledge assets</skos:definition>
		<skos:prefLabel>dedicated language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;DescriptiveGrammar">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;Grammar"/>
		<dct:source>https://en.wikipedia.org/wiki/Linguistic_description</dct:source>
		<skos:definition>grammar that describes how a language is actually used</skos:definition>
		<skos:prefLabel>descriptive grammar</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;DescriptiveMarkupLanguage">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;MarkupLanguage"/>
		<skos:definition>markup language used to (re)assert the semantics of sentences in the embedded language</skos:definition>
		<skos:prefLabel>descriptive markup language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;Encoding">
		<rdfs:subClassOf rdf:resource="&lcc-lr;Arrangement"/>
		<skos:definition>a system for the encoding elements of an alphabet using a second alphabet</skos:definition>
		<skos:example>a ZIP compression</skos:example>
		<skos:example>the ASCII encoding of basic western alphabet characters using 7 bit binary symbols</skos:example>
		<skos:example>the trivial encoding that preserves the original symbols</skos:example>
		<skos:prefLabel>encoding</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;ExpressionLanguage">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;DedicatedLanguage"/>
		<rdfs:subClassOf rdf:resource="&api4kp-lang;KnowledgeRepresentationAndReasoningLanguage"/>
		<rdfs:comment>several machine executable languages either have or embed a sub-language that is an expression language</rdfs:comment>
		<skos:definition>formal language designed to express functions</skos:definition>
		<skos:prefLabel>expression language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;FormalGrammar">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;PrescriptiveGrammar"/>
		<rdfs:subClassOf rdf:resource="&api4kp;ConstructiveDefinition"/>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp;defines"/>
				<owl:someValuesFrom rdf:resource="&lcc-lr;Language"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<skos:altLabel>(formal) syntax</skos:altLabel>
		<skos:altLabel>generative grammar</skos:altLabel>
		<skos:definition>prescriptive grammar that consists in a collection of (production) rules that define, intensionally, all and only the possible sentences of a language</skos:definition>
		<skos:prefLabel>formal grammar</skos:prefLabel>
		<skos:scopeNote>one may distinguish between formal grammar - grammars that allow to recognize if a sentence is part of the language - and generative grammars - grammars with rules that allow to construct new sentences</skos:scopeNote>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;Grammar">
		<rdfs:subClassOf rdf:resource="&api4kp;KnowledgeAsset"/>
		<skos:definition>the set of rules and constraints that allow to recognize and/or construct the valid sentences of a language</skos:definition>
		<skos:prefLabel>grammar</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;GrammarSpecification">
		<rdfs:subClassOf rdf:resource="&dol;Specification"/>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp;expresses"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;Grammar"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<rdfs:comment>Syntaxes are &apos;reconstructed&apos; from natural languages, but &apos;designed&apos; in the case of constructed languages</rdfs:comment>
		<owl:equivalentClass>
			<owl:Class>
				<owl:intersectionOf rdf:parseType="Collection">
					<rdf:Description rdf:about="&dol;Specification">
					</rdf:Description>
					<owl:Restriction>
						<owl:onProperty rdf:resource="&api4kp;specifies"/>
						<owl:someValuesFrom rdf:resource="&api4kp-lang;Grammar"/>
					</owl:Restriction>
				</owl:intersectionOf>
			</owl:Class>
		</owl:equivalentClass>
		<skos:definition>the specification of a grammar, itself expressed in some (meta)language</skos:definition>
		<skos:example>The Java 1.8 grammar, expressed using the ANTLRv4 metalanguage, available at https://github.com/antlr/grammars-v4/tree/master/java/java8</skos:example>
		<skos:prefLabel xml:lang="en">grammar specification</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;IslandGrammar">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;Grammar"/>
		<rdfs:comment>island grammars define languages embedded in other languages</rdfs:comment>
		<skos:definition>grammar that is proper part of another grammar</skos:definition>
		<skos:prefLabel>island grammar</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;KnowledgeRepresentationAndReasoningLanguage">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;MachineExecutableLanguage"/>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty>
					<rdf:Description>
						<owl:inverseOf rdf:resource="&dol;usesLanguage"/>
					</rdf:Description>
				</owl:onProperty>
				<owl:someValuesFrom rdf:resource="&api4kp;KnowledgeExpression"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<rdfs:label xml:lang="en">KRR Language</rdfs:label>
		<skos:definition>machine executable language used in knowledge expressions, to express works of knowledge</skos:definition>
		<skos:example>Prolog</skos:example>
		<skos:prefLabel>knowledge representation and reasoning language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;LanguageSchema">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;GrammarSpecification"/>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&dol;usesLanguage"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;SchemaLanguage"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<skos:definition>grammar specification that is expressed using a schema language</skos:definition>
		<skos:example>The schema of the &quot;Decision Modeling and Notation Language v1.2&quot;, available at https://www.omg.org/spec/DMN/20180521/DMN12.xsd, expressed using the XML Schema Definition Language</skos:example>
		<skos:prefLabel>language schema</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;Lexicon">
		<rdfs:subClassOf rdf:resource="&lcc-lr;Arrangement"/>
		<dct:source>https://en.wikipedia.org/wiki/Lexicon</dct:source>
		<owl:equivalentClass>
			<owl:Class>
				<owl:intersectionOf rdf:parseType="Collection">
					<rdf:Description rdf:about="&lcc-lr;Arrangement">
					</rdf:Description>
					<owl:Restriction>
						<owl:onProperty rdf:resource="&lcc-lr;hasMember"/>
						<owl:someValuesFrom rdf:resource="&olex;LexicalEntry"/>
					</owl:Restriction>
				</owl:intersectionOf>
			</owl:Class>
		</owl:equivalentClass>
		<skos:definition>a complete set of the meaningful atomic signs that are or can be used in a language</skos:definition>
		<skos:prefLabel>lexicon</skos:prefLabel>
		<skos:scopeNote>TODO: In DOL, signatures are &apos;set of symbols&apos;, but are treated as &apos;mathematical&apos; rather than &apos;linguistic&apos; entities (i.e. concepts vs terms).</skos:scopeNote>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;MachineExecutableLanguage">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;MachineReadableLanguage"/>
		<rdfs:comment>(expressions in) languages of this kind can be interpreted or compiled  into the native language of the underlying machine - virtual or physical</rdfs:comment>
		<skos:definition>machine-readable language equipped with semantics that allows to drive the behavior of a software agent</skos:definition>
		<skos:prefLabel xml:lang="en">machine-executable language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;MachineReadableLanguage">
		<owl:equivalentClass>
			<owl:Class>
				<owl:intersectionOf rdf:parseType="Collection">
					<rdf:Description rdf:about="&dol;FormalLanguage">
					</rdf:Description>
					<owl:Restriction>
						<owl:onProperty rdf:resource="&api4kp-lang;hasGrammar"/>
						<owl:someValuesFrom rdf:resource="&api4kp-lang;Serialization"/>
					</owl:Restriction>
				</owl:intersectionOf>
			</owl:Class>
		</owl:equivalentClass>
		<skos:definition>formal language that has a concrete syntax which allows a software agent to parse and serialize expressions in that language</skos:definition>
		<skos:prefLabel xml:lang="en">machine-readable language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;MarkupLanguage">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;MachineReadableLanguage"/>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp-lang;embedsLanguage"/>
				<owl:someValuesFrom rdf:resource="&lcc-lr;Language"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<dct:source>https://www.merriam-webster.com/dictionary/markup%20language</dct:source>
		<skos:definition>machine readable language that embeds another language, impacting the processing but not the semantics of that language</skos:definition>
		<skos:prefLabel>markup language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;MetaFormat">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;Serialization"/>
		<rdfs:seeAlso>https://www.w3.org/standards/webarch/metaformats</rdfs:seeAlso>
		<skos:definition>a concrete syntax that consists primarily of structural rules</skos:definition>
		<skos:prefLabel>metaformat</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;MetaFormatSerializableLanguage">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;MachineReadableLanguage"/>
		<owl:equivalentClass>
			<owl:Class>
				<owl:intersectionOf rdf:parseType="Collection">
					<rdf:Description rdf:about="&api4kp-lang;MachineReadableLanguage">
					</rdf:Description>
					<owl:Restriction>
						<owl:onProperty rdf:resource="&api4kp-lang;hasGrammar"/>
						<owl:someValuesFrom>
							<owl:Class>
								<owl:intersectionOf rdf:parseType="Collection">
									<rdf:Description rdf:about="&api4kp-lang;Serialization">
									</rdf:Description>
									<owl:Restriction>
										<owl:onProperty rdf:resource="&api4kp;dependsOn"/>
										<owl:someValuesFrom rdf:resource="&api4kp-lang;MetaFormat"/>
									</owl:Restriction>
								</owl:intersectionOf>
							</owl:Class>
						</owl:someValuesFrom>
					</owl:Restriction>
				</owl:intersectionOf>
			</owl:Class>
		</owl:equivalentClass>
		<skos:definition>machine readable, serializable language that has at least one concrete syntax that is based on a meta-format</skos:definition>
		<skos:example>any language that supports an XML based serialization, such as BPMN or RuleML</skos:example>
		<skos:prefLabel>meta-format serializable language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;MetaSyntax">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;FormalGrammar"/>
		<dct:source>https://en.wikipedia.org/wiki/Metasyntax</dct:source>
		<skos:definition>formal grammar used to define languages that are used in the expression of formal grammars</skos:definition>
		<skos:example>The ANTLR meta-grammar</skos:example>
		<skos:example>The Backus Naur Form</skos:example>
		<skos:prefLabel>metasyntax</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;OntologyLanguage">
		<rdfs:subClassOf rdf:resource="&dol;OMSLanguage"/>
		<rdfs:subClassOf rdf:resource="&api4kp-lang;DedicatedLanguage"/>
		<skos:definition>formal language dedicated to the expression of ontologies and assertional knowledge bases</skos:definition>
		<skos:prefLabel>ontology language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;ParsingStructure">
		<rdfs:subClassOf rdf:resource="&dol;LinguisticEntity"/>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&dol;formalizes"/>
				<owl:someValuesFrom rdf:resource="&dol;LinguisticEntity"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp;dependsOn"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;FormalGrammar"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<rdfs:comment>parsing structures are the (intermediary) product of lifting operations</rdfs:comment>
		<rdfs:seeAlso>https://www.omg.org/spec/ASTM/</rdfs:seeAlso>
		<skos:definition>an internal representation that formalizes an agent&apos;s perception of the structure of some expression, according to the rules of some grammar</skos:definition>
		<skos:prefLabel>parsing structure</skos:prefLabel>
		<skos:scopeNote>being mainly used for internal computation, parsing structures themselves are most often ASGs whose edges and nodes represent the structure of the target expression according to the grammatical rules. Nevertheless, parsing structures themselves could be materialized using an appropriate meta-language</skos:scopeNote>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;PrescriptiveGrammar">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;Grammar"/>
		<dct:source>https://en.wikipedia.org/wiki/Linguistic_prescription</dct:source>
		<skos:definition>grammar that specificies how a language should be used correctly</skos:definition>
		<skos:prefLabel>prescriptive grammar</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;PresentationalMarkupLanguage">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;MarkupLanguage"/>
		<skos:definition>markup language that drives the manifestation of expressions in the embedded language</skos:definition>
		<skos:prefLabel>presentational markup language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;ProceduralMarkupLanguage">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;MarkupLanguage"/>
		<skos:definition>markup language that is imperative in nature</skos:definition>
		<skos:prefLabel>procedural markup language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;ProgrammingLanguage">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;DedicatedLanguage"/>
		<rdfs:subClassOf rdf:resource="&api4kp-lang;MachineExecutableLanguage"/>
		<rdfs:comment>from a knowledge representation perspective, programming languages are designed to express algorithms</rdfs:comment>
		<rdfs:comment>programming languages are usually imperative</rdfs:comment>
		<skos:definition>formal, executable language used in the specification of information processing tasks</skos:definition>
		<skos:prefLabel>programming language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;RuleLanguage">
		<rdfs:subClassOf rdf:resource="&dol;OMSLanguage"/>
		<rdfs:subClassOf rdf:resource="&api4kp-lang;DedicatedLanguage"/>
		<rdfs:comment>rule languages can be further categorized depending on the nature of the rules they can express (e.g. production, vs inference, vs deontic, etc...)</rdfs:comment>
		<skos:definition>formal language dedicated to the expression of rules, norms and policies</skos:definition>
		<skos:prefLabel>rule language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;SchemaLanguage">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;DedicatedLanguage"/>
		<rdfs:subClassOf rdf:resource="&api4kp-lang;KnowledgeRepresentationAndReasoningLanguage"/>
		<skos:definition>formal language used in the specification of (formal) grammars, schemas and metamodels</skos:definition>
		<skos:prefLabel>schema language</skos:prefLabel>
		<skos:scopeNote>the term is broader than the common denotation of &apos;(XML) schema language&apos;</skos:scopeNote>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;Serialization">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;FormalGrammar"/>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp-lang;concretizes"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;AbstractSyntax"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<rdfs:comment>In computer science, abstract syntaxes are used to construct Parsers and Lexers</rdfs:comment>
		<skos:altLabel>serialization</skos:altLabel>
		<skos:definition>a formal grammar that includes at least one rule that impacts the structural aspects of the conformant sentences, but not the semantics</skos:definition>
		<skos:prefLabel xml:lang="en">concrete syntax</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;StructuralMarkupLanguage">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;MarkupLanguage"/>
		<skos:definition>markup language used to define the structure of expressions in the embedded language, making them decomposable</skos:definition>
		<skos:prefLabel>structural markup language</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;SymbolSequence">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;ParsingStructure"/>
		<skos:definition>sequence of symbols that is reconstructed from the inscriptions on an artifact</skos:definition>
		<skos:prefLabel>sequence of symbols</skos:prefLabel>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp-lang;TokenSequence">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;SymbolSequence"/>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&dol;formalizes"/>
				<owl:someValuesFrom rdf:resource="&api4kp;ExternalizedKnowledgeExpression"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<skos:definition>sequence of characters that can be segmented into atomic groups with recognizable type, function and/or interpretation (lexemes or tokens)</skos:definition>
		<skos:prefLabel>token sequence</skos:prefLabel>
	</owl:Class>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;concretizes">
		<rdfs:domain rdf:resource="&api4kp-lang;Serialization"/>
		<rdfs:range rdf:resource="&api4kp-lang;AbstractSyntax"/>
		<skos:definition>provides the rules to serialize ASTs of a given language into forms that can be engraved on carrier artifacts</skos:definition>
		<skos:prefLabel>concretizes</skos:prefLabel>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;embedsLanguage">
		<rdfs:label>embeds language</rdfs:label>
		<rdfs:domain rdf:resource="&lcc-lr;Language"/>
		<rdfs:range rdf:resource="&lcc-lr;Language"/>
		<skos:definition>allows expressions in the target language to be part of expressions in this language</skos:definition>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;has-wordstock">
		<rdfs:label>has wordstock</rdfs:label>
		<rdfs:domain rdf:resource="&lcc-lr;Language"/>
		<rdfs:range rdf:resource="&api4kp-lang;Lexicon"/>
		<skos:definition>has a set of linguistic elements that can be formed into valid sentences of the language according to the language&apos;s grammar</skos:definition>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;hasDelegateSublanguage">
		<rdfs:subPropertyOf rdf:resource="&api4kp-lang;hasSublanguage"/>
		<skos:definition>has a sublanguage that supports aspects that would not otherwise be supported by this language</skos:definition>
		<skos:prefLabel>has delegate sublanguage</skos:prefLabel>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;hasGrammar">
		<rdfs:domain rdf:resource="&lcc-lr;Language"/>
		<rdfs:range rdf:resource="&api4kp-lang;Grammar"/>
		<skos:definition>has an extension set of valid sentences that is defined by the rule of the target grammar</skos:definition>
		<skos:prefLabel>has grammar</skos:prefLabel>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;hasSublanguage">
		<rdfs:subPropertyOf rdf:resource="&api4kp-lang;embedsLanguage"/>
		<rdfs:domain rdf:resource="&dol;Language"/>
		<rdfs:range rdf:resource="&dol;Language"/>
		<skos:definition>has a grammar with an identifiable, closed subset of rules that define the target sub-language</skos:definition>
		<skos:prefLabel>has sublanguage</skos:prefLabel>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;serializes">
		<rdfs:label xml:lang="en">serializes</rdfs:label>
		<rdfs:domain rdf:resource="&api4kp-lang;Serialization"/>
		<rdfs:range rdf:resource="&dol;Language"/>
		<skos:definition>provides syntactical rules to manifest sentences of the target language in forms that can be engraved on a carrier</skos:definition>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;supportsSyntax">
		<rdfs:subPropertyOf rdf:resource="&api4kp-lang;hasGrammar"/>
		<rdfs:comment>it is quite rare, but not impossible, for a language to have two distinct but isomorphic (abstract) grammars</rdfs:comment>
		<rdfs:domain rdf:resource="&dol;Language"/>
		<rdfs:range rdf:resource="&api4kp-lang;AbstractSyntax"/>
		<skos:definition>can be formalized according to the rules of the target abstract syntax</skos:definition>
		<skos:prefLabel>supports syntax</skos:prefLabel>
		<skos:scopeNote>if a language L supports a syntax S, and S is concretized by a concrete syntax C, then L supports serialization C</skos:scopeNote>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;syntacticallyConforms">
		<rdfs:subPropertyOf rdf:resource="&dol;isLinguisticallyRelatedTo"/>
		<rdfs:range rdf:resource="&api4kp-lang;Grammar"/>
		<skos:definition>follows the rules of, and thus is valid according to, some grammar</skos:definition>
		<skos:prefLabel>syntactically conforms</skos:prefLabel>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;usesAlphabet">
		<rdfs:subPropertyOf rdf:resource="&dol;isLinguisticallyRelatedTo"/>
		<rdfs:range rdf:resource="&api4kp-lang;Alphabet"/>
		<skos:altLabel>uses character set</skos:altLabel>
		<skos:definition>contains symbols drawn from a given alphabet</skos:definition>
		<skos:prefLabel>uses alphabet</skos:prefLabel>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;usesAnnotationLanguage">
		<rdfs:subPropertyOf rdf:resource="&dol;usesLanguage"/>
		<rdfs:label>uses as annotation language</rdfs:label>
		<rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
		<rdfs:range rdf:resource="&lcc-lr;Language"/>
		<skos:definition>contains expression fragments that are annotations, and use an annotation language as primary language</skos:definition>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;usesEncoding">
		<rdfs:subPropertyOf rdf:resource="&dol;isLinguisticallyRelatedTo"/>
		<rdfs:range rdf:resource="&api4kp-lang;Encoding"/>
		<skos:definition>contains symbols encoded using a given encoding scheme</skos:definition>
		<skos:prefLabel>uses encoding</skos:prefLabel>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;usesFormat">
		<rdfs:subPropertyOf rdf:resource="&dol;isLinguisticallyRelatedTo"/>
		<skos:definition>uses a serialization that depends on the target meta-format</skos:definition>
		<skos:prefLabel>uses format</skos:prefLabel>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;usesLexicon">
		<rdfs:subPropertyOf rdf:resource="&dol;isLinguisticallyRelatedTo"/>
		<rdfs:range rdf:resource="&api4kp-lang;Lexicon"/>
		<owl:propertyChainAxiom rdf:parseType="Collection">
			<rdf:Description rdf:about="&dol;usesLanguage">
			</rdf:Description>
			<rdf:Description rdf:about="&api4kp-lang;has-wordstock">
			</rdf:Description>
		</owl:propertyChainAxiom>
		<skos:definition>uses terms that are defined (linguistically and semantically) in the target lexicon</skos:definition>
		<skos:prefLabel>uses lexicon</skos:prefLabel>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;usesPrimaryLanguage">
		<rdfs:subPropertyOf rdf:resource="&dol;usesLanguage"/>
		<rdfs:label>uses as primary language</rdfs:label>
		<rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
		<rdfs:range rdf:resource="&lcc-lr;Language"/>
		<skos:definition>is or contains an expression that, when parsed, results in a (forest of) AST, and (at least one of) the AST is structured according to the syntax of the target language</skos:definition>
		<skos:scopeNote>the primary language of an expression E can be a named language L, or a refinement/extension of a named language that embeds some other language S, in which case E uses S as a sub-language</skos:scopeNote>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;usesProfile">
		<rdfs:subPropertyOf rdf:resource="&dol;usesLanguage"/>
		<skos:definition>is or contains an expression that is valid according to the rules of a given language profile</skos:definition>
		<skos:prefLabel>uses profile</skos:prefLabel>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;usesSerialization">
		<rdfs:subPropertyOf rdf:resource="&api4kp-lang;syntacticallyConforms"/>
		<rdfs:comment>if a resource uses a serialization of a given language, that resource must be consistent with using that language</rdfs:comment>
		<skos:definition>is or contains a concrete expression that is concretized according to the rules of a given concrete syntax</skos:definition>
		<skos:prefLabel>uses serialization</skos:prefLabel>
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp-lang;usesSublanguage">
		<rdfs:subPropertyOf rdf:resource="&dol;usesLanguage"/>
		<rdfs:label>uses as sub-language</rdfs:label>
		<rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
		<rdfs:range rdf:resource="&lcc-lr;Language"/>
		<skos:definition>contains an expression in the target language that is proper part of an expression in a different language</skos:definition>
		<skos:scopeNote>if a language L embeds another language S, every expression in L can potentially contain fragments in S (e.g. DMN vs FEEL).

if an expression in L embeds a fragment in S, there exist at least one expression in L that uses S as a sub-language</skos:scopeNote>
	</owl:ObjectProperty>
	
	<owl:Class rdf:about="&api4kp;AbstractKnowledgeExpression">
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp-lang;syntacticallyConforms"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;AbstractSyntax"/>
			</owl:Restriction>
		</rdfs:subClassOf>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp;ConcreteKnowledgeExpression">
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp-lang;syntacticallyConforms"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;AbstractSyntax"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp-lang;syntacticallyConforms"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;Serialization"/>
			</owl:Restriction>
		</rdfs:subClassOf>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp;ConstructiveDefinition">
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp;EncodedKnowledgeExpression">
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp-lang;syntacticallyConforms"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;AbstractSyntax"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp-lang;syntacticallyConforms"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;Serialization"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp-lang;usesAlphabet"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;Alphabet"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp-lang;usesEncoding"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;Encoding"/>
			</owl:Restriction>
		</rdfs:subClassOf>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp;ExternalizedKnowledgeExpression">
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp-lang;syntacticallyConforms"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;AbstractSyntax"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp-lang;syntacticallyConforms"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;Serialization"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp-lang;usesAlphabet"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;Alphabet"/>
			</owl:Restriction>
		</rdfs:subClassOf>
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp;KnowledgeAsset">
	</owl:Class>
	
	<owl:Class rdf:about="&api4kp;KnowledgeExpression">
	</owl:Class>
	
	<owl:ObjectProperty rdf:about="&api4kp;defines">
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp;dependsOn">
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp;expresses">
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp;specifiedBy">
	</owl:ObjectProperty>
	
	<owl:ObjectProperty rdf:about="&api4kp;specifies">
	</owl:ObjectProperty>
	
	<owl:Class rdf:about="&lcc-lr;ArtificialLanguage">
		<rdfs:subClassOf rdf:resource="&api4kp-lang;ConstructedLanguage"/>
	</owl:Class>
	
	<owl:Class rdf:about="&lcc-lr;Language">
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp-lang;has-wordstock"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;Lexicon"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<rdfs:subClassOf>
			<owl:Restriction>
				<owl:onProperty rdf:resource="&api4kp-lang;hasGrammar"/>
				<owl:someValuesFrom rdf:resource="&api4kp-lang;Grammar"/>
			</owl:Restriction>
		</rdfs:subClassOf>
		<rdfs:comment>The extension of a language is the class of sentences that is defined by the grammar of the language, using the supported lexicon/a</rdfs:comment>
		<skos:example>Contemporary Italian, as of 2017, as established by the Italian &apos;Accademia della Crusca&apos;</skos:example>
		<skos:example>The 2nd officially released version of the Ontology Web Language</skos:example>
		<skos:scopeNote>in API4KP languages are Knowledge, to the extent that they can be learned and used by agents</skos:scopeNote>
	</owl:Class>

</rdf:RDF>