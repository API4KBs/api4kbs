<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rdf:RDF [
	<!ENTITY api4kp "https://www.omg.org/spec/API4KP/api4kp/">
	<!ENTITY dct "http://purl.org/dc/terms/">
	<!ENTITY lcc-lr "https://www.omg.org/spec/LCC/Languages/LanguageRepresentation/">
	<!ENTITY rdf "http://www.w3.org/1999/02/22-rdf-syntax-ns#">
	<!ENTITY rdfs "http://www.w3.org/2000/01/rdf-schema#">
	<!ENTITY owl "http://www.w3.org/2002/07/owl#">
	<!ENTITY skos "http://www.w3.org/2004/02/skos/core#">
	<!ENTITY sm "http://www.omg.org/techprocess/ab/SpecificationMetadata/">
	<!ENTITY xsd "http://www.w3.org/2001/XMLSchema#">
]>

<rdf:RDF xml:base="https://www.omg.org/spec/API4KP/api4kp/"
	xmlns:dct="http://purl.org/dc/terms/"
    xmlns:api4kp="https://www.omg.org/spec/API4KP/api4kp/"
    xmlns:lcc-lr="https://www.omg.org/spec/LCC/Languages/LanguageRepresentation/"
	xmlns:owl="http://www.w3.org/2002/07/owl#"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
	xmlns:skos="http://www.w3.org/2004/02/skos/core#"
	xmlns:sm="http://www.omg.org/techprocess/ab/SpecificationMetadata/"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema#">
	
    <owl:Ontology rdf:about="https://www.omg.org/spec/API4KP/api4kp/">
		<rdfs:label>API4KP Core Ontology</rdfs:label>
        <dct:abstract>This ontology defines the core concepts of the API4KP framework, namely Knowledge, Resources, Operations and Platforms, serving as an &apos;upper ontology&apos; for the specification.</dct:abstract>
        <dct:creator>Davide Sottara (sottara.davide@mayo.edu)</dct:creator>
		<dct:license rdf:datatype="&xsd;anyURI">http://opensource.org/licenses/MIT</dct:license>
        <sm:copyright>Copyright (c) 2014-2020 88 Solutions</sm:copyright>
		<sm:copyright>Copyright (c) 2014-2020 Adaptive</sm:copyright>
        <sm:copyright>Copyright (c) 2014-2020 Athan Services</sm:copyright>
        <sm:copyright>Copyright (c) 2014-2020 Arizona State University</sm:copyright>
	    <sm:copyright>Copyright (c) 2014-2020 Fraunhofer FOKUS</sm:copyright>
        <sm:copyright>Copyright (c) 2014-2020 Freie Universitat Berlin</sm:copyright>
		<sm:copyright>Copyright (c) 2014-2020 Mayo Clinic</sm:copyright>
	    <sm:copyright>Copyright (c) 2019-2020 Micro Focus</sm:copyright>
		<sm:copyright>Copyright (c) 2014-2020 Model Driven Solutions</sm:copyright>
		<sm:copyright>Copyright (c) 2014-2020 Thematix Partners LLC</sm:copyright>
		<sm:copyright>Copyright (c) 2015-2020 Object Management Group, Inc.</sm:copyright>
		<sm:contentLanguage rdf:datatype="&xsd;anyURI">http://www.w3.org/standards/techs/owl#w3c_all</sm:contentLanguage>
		<sm:dependsOn rdf:datatype="&xsd;anyURI">https://www.omg.org/spec/LCC/</sm:dependsOn>
		<sm:filename>api4kp.rdf</sm:filename>
		<sm:fileAbbreviation>api4kp</sm:fileAbbreviation>
        <owl:imports rdf:resource="http://www.omg.org/techprocess/ab/SpecificationMetadata/"/>
        <owl:imports rdf:resource="https://www.omg.org/spec/LCC/Languages/LanguageRepresentation/"/>	
        <owl:versionIRI rdf:resource="https://www.omg.org/spec/API4KP/SNAPSHOT/api4kp/"/>
    </owl:Ontology>
    

    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Annotation properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    <owl:AnnotationProperty rdf:about="&api4kp;categorized-by">
        <rdfs:label>categorized by</rdfs:label>
        <skos:definition>an ontology entity is categorized by an individual aspect if that aspect models a higher order class of which the ontology entity is a member</skos:definition>
        <rdfs:subPropertyOf rdf:resource="&api4kp;has-aspect"/>
    </owl:AnnotationProperty>
    
    <owl:AnnotationProperty rdf:about="&api4kp;has-aspect"/>
    

    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Object Properties
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    <owl:ObjectProperty rdf:about="&api4kp;lifts">
        <owl:inverseOf rdf:resource="&api4kp;lowers"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>lifts</rdfs:label>
        <skos:definition>The relationship between endeavors E1 and E2, where E1 is at a higher level of abstraction</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;abridgement-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;compact-representation-of"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;derived-from"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:label>abdridgement of</rdfs:label>
        <skos:definition>An expression E1 is an abridgement of a target expression E2 if
- both express the same Work of Knowledge
AND
  - they have equivalent ASTs ( i.e. parse(E1) = parse(E2) ), but the parse  tree of E2 is a subtree of the parse tree of E1.
  OR
  - the AST of E2 is a subtree of the AST of E1,</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;adaptation-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;derived-from"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;variant-of"/>
        <rdfs:domain rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:range rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:comment>The concepts used by the derived work are more suitable from a certain perspective, including but not limited to delivering to an audience or a setting, or expressing in some language</rdfs:comment>
        <rdfs:label>adaptation of</rdfs:label>
        <skos:definition>the relationship between two derivative works of knowledge that capture the same piece of knowledge</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;affects">
        <rdfs:domain rdf:resource="&api4kp;KnowledgeProcessingMethodSpecification"/>
        <owl:propertyDisjointWith rdf:resource="&api4kp;preserves"/>
        <rdfs:label>affects</rdfs:label>
        <skos:definition>A method affects something if it is known explicitly not to preserve that something</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;archetyped-by">
        <rdfs:subPropertyOf rdf:resource="&api4kp;has-knowledge"/>
        <owl:inverseOf rdf:resource="&api4kp;archetypes"/>
        <rdfs:range rdf:resource="&api4kp;AtomicConcept"/>
        <rdfs:label>archetyped by</rdfs:label>
        <skos:altLabel>classified by</skos:altLabel>
        <skos:altLabel>instance of</skos:altLabel>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;archetypes">
        <rdfs:subPropertyOf rdf:resource="&api4kp;is-about"/>
        <rdfs:domain rdf:resource="&api4kp;DefinedConcept"/>
        <rdfs:comment>a concept archetypes a referent, to the extent that the concept is defined by a definition that has that referent as a subject.</rdfs:comment>
        <rdfs:label>archetypes</rdfs:label>
        <rdfs:seeAlso>inverse http://www.w3.org/ns/lemon/ontolex#concept</rdfs:seeAlso>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;associated-to">
        <rdfs:domain rdf:resource="&api4kp;AtomicConcept"/>
        <rdfs:range rdf:resource="&api4kp;AtomicConcept"/>
        <owl:propertyChainAxiom rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;defined-by"/>
            <rdf:Description rdf:about="&api4kp;uses-concept"/>
        </owl:propertyChainAxiom>
        <rdfs:comment>this is an &apos;explicit&apos; and &apos;conscious&apos; notion of association which, in order to be asserted, requires that at least one agent has explicitly identified and called out the close relationship between the two concepts</rdfs:comment>
        <rdfs:label>associated to</rdfs:label>
        <skos:definition>two concepts are associated to each other if there exists at least one work of knowledge that makes their relationship explicit</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;blueprinted-by">
        <rdfs:subPropertyOf rdf:resource="&api4kp;defined-by"/>
        <rdfs:domain rdf:resource="&api4kp;InformationProcessingTask"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeProcessingMethodSpecification"/>
        <rdfs:label>blueprinted by</rdfs:label>
        <skos:definition>a method provides guidelines specifically on how to perform a given task, and thus can be considered part of a task definition</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;capturedBy">
        <owl:inverseOf rdf:resource="&api4kp;captures"/>
        <rdfs:domain rdf:resource="&api4kp;Knowledge"/>
        <rdfs:range rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:label>captured by</rdfs:label>
        <skos:definition>the relationship between a (piece of) Knowledge and any Work of Knowledge that makes it finite, explicit and potentially communicable</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;captures">
        <rdfs:subPropertyOf rdf:resource="&api4kp;uses-concept"/>
        <rdfs:domain rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:range rdf:resource="&api4kp;Knowledge"/>
        <rdfs:label>captures</rdfs:label>
        <skos:definition>a specific relationship between a work of knowledge and the (piece of) knowledge it makes explicit</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;carried-by">
        <rdfs:subPropertyOf rdf:resource="&api4kp;lifts"/>
        <owl:inverseOf rdf:resource="&api4kp;carries"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeCarrier"/>
        <owl:propertyChainAxiom rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;has-encoding"/>
            <rdf:Description rdf:about="&api4kp;engraved-on"/>
        </owl:propertyChainAxiom>
        <rdfs:label>The relationship between an (concrete serialization) of an expression and an exemplar of a manifestation that embodies it</rdfs:label>
        <rdfs:label xml:lang="en">carried by</rdfs:label>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;carries">
        <rdfs:subPropertyOf rdf:resource="&api4kp;lowers"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeCarrier"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeExpression"/>
        <owl:propertyChainAxiom rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;engraved-with"/>
            <rdf:Description rdf:about="&api4kp;encoding-of"/>
        </owl:propertyChainAxiom>
        <rdfs:label>carries</rdfs:label>
        <skos:definition>The direct relationship between a Concrete Information Carrier and an Expression, such that the object is an exemplar of a manifestation that embodies a (concrete representation of) that Expression</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;compact-representation-of">
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>compact representation of</rdfs:label>
        <skos:definition>a source endeavor is more compact than a target endeavor if it uses less elements to capture (a salient, proper part of) the piece of knowledge captured by the target endeavor</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;formal-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;compatible-with">
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:comment>sometimes the complementary notion of &apos;incompatibility&apos; may be of interest. Two endeavors are incompatible if their involvement in the same activity will necessarily cause that activity to fail</rdfs:comment>
        <rdfs:label>compatible with</rdfs:label>
        <skos:definition>An endeavor X is compatible with an another endeavor Y if there is at least one activity that can successfully completed when both X and Y are involved in that activity</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;formal-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;complements">
        <rdfs:subPropertyOf rdf:resource="&api4kp;compatible-with"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>complements</rdfs:label>
        <skos:definition>An endeavor X complements another endeavor Y if Y does not depend on X, bu Y can be used to extend X</skos:definition>
        <skos:note>this relationship implies that (tree-oriented) structuring of X and Y is possible, but not necessary nor actual</skos:note>
        <api4kp:has-aspect rdf:resource="&api4kp;formal-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;completely-expresses">
        <rdfs:subPropertyOf rdf:resource="&api4kp;expresses"/>
        <rdfs:comment>no concept in the WoK is left implicit</rdfs:comment>
        <rdfs:label>completely expresses</rdfs:label>
        <skos:definition>every concept in the WoK must be expressed by at least one element of the expression</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;complies-with">
        <rdfs:subPropertyOf rdf:resource="&api4kp;compatible-with"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>complies with</rdfs:label>
        <skos:definition>An endeavor X complies with an endeavor Y if it satisfies all the constraints in Y</skos:definition>
        <skos:scopeNote>The compliant endeavor is supposed to be, or to contain, some kind of specification</skos:scopeNote>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;compression-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;compact-representation-of"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;transcodification-of"/>
        <rdfs:label>compression of</rdfs:label>
        <skos:definition>transcodification such that the target encoding requires less space in order to be engraved on a carrier, may be lossy or lossless</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;conceptualizes">
        <rdfs:subPropertyOf rdf:resource="&api4kp;lifts"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;represented-by"/>
        <owl:inverseOf rdf:resource="&api4kp;expresses"/>
        <rdfs:domain rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:range rdf:resource="&api4kp;AbstractExpression"/>
        <rdfs:comment>Reflects the relationship between the expression&apos;s Abstract Syntax Tree and the Abstract Semantic Graph of (a WoK that is the faithful expression of) the Knowledge content of the expression.</rdfs:comment>
        <rdfs:label>conceptualizes</rdfs:label>
        <skos:altLabel>has expression</skos:altLabel>
        <skos:definition>The relationship between a (Work of) Knowledge and any of its Expressions, for which the Work represents a class of equivalence</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;concisely-expresses">
        <rdfs:subPropertyOf rdf:resource="&api4kp;expresses"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;lowers"/>
        <rdfs:comment>no element in the epxression is redundant</rdfs:comment>
        <rdfs:label>concisely expresses</rdfs:label>
        <skos:definition>when conceptualized, every element of the expression corresponds to some concept that is part of the original WoK</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;concretely-expressed-by">
        <rdfs:subPropertyOf rdf:resource="&api4kp;lifts"/>
        <owl:inverseOf rdf:resource="&api4kp;concretely-expresses"/>
        <rdfs:domain rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:range rdf:resource="&api4kp;ConcreteExpression"/>
        <owl:propertyChainAxiom rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;conceptualizes"/>
            <rdf:Description rdf:about="&api4kp;serialized-into"/>
        </owl:propertyChainAxiom>
        <rdfs:label>concretely expressed by</rdfs:label>
        <skos:definition>A Work of Knowledge W is concretely expressed by a Concrete Expression E, if and only if there is an Abstract Expression of that Work W of which E is a concrete representation</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;concretely-expresses">
        <rdfs:domain rdf:resource="&api4kp;ConcreteExpression"/>
        <rdfs:range rdf:resource="&api4kp;WorkOfKnowledge"/>
        <owl:propertyChainAxiom rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;serialization-of"/>
            <rdf:Description rdf:about="&api4kp;expresses"/>
        </owl:propertyChainAxiom>
        <rdfs:label>concretely expresses</rdfs:label>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;conforms-with">
        <rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:range rdf:resource="&api4kp;Syntax"/>
        <rdfs:label>conforms with</rdfs:label>
        <skos:altLabel>valid according to</skos:altLabel>
        <skos:definition>An expression conforms to, and is valid according to, the rules of the grammar of a language, as expressed by some syntax (abstract or concrete)</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;consistently-expresses">
        <rdfs:subPropertyOf rdf:resource="&api4kp;expresses"/>
        <rdfs:label>consistently expresses</rdfs:label>
        <skos:definition>every concept in the WoK is always represented by the same element every time it is mentioned in the expression</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;copy-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;equal-to"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>copy of</rdfs:label>
        <skos:definition>An endeavor E1 is a copy of another endeavor E2 if they are equal, and E2 is the product of an activity (&quot;copying&quot;) that used E1 as a primary input</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;defined-by">
        <rdfs:subPropertyOf rdf:resource="&api4kp;capturedBy"/>
        <rdfs:domain rdf:resource="&api4kp;DefinedConcept"/>
        <rdfs:range rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:label>defined by</rdfs:label>
        <skos:definition>A Work of Knowledge defines a concept if it provides necessary and sufficient knowledge to allow to recognize instances of that concept</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;defines">
        <rdfs:subPropertyOf rdf:resource="&api4kp;captures"/>
        <rdfs:domain rdf:resource="&api4kp;Definition"/>
        <rdfs:range rdf:resource="&api4kp;DefinedConcept"/>
        <rdfs:seeAlso rdf:resource="http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#defines"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;defines-in-terms-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;leverages"/>
        <rdfs:domain rdf:resource="&api4kp;Definition"/>
        <rdfs:range rdf:resource="&api4kp;AtomicConcept"/>
        <rdfs:comment>concept that is used explcitily in the definition of another concept</rdfs:comment>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&lcc-lr;hasDenotation">
        <owl:inverseOf rdf:resource="&lcc-lr;denotes"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeElement"/>
        <skos:note>the relationship between a referent and a symbolic expression that resolves to that referent, possibly within a given context</skos:note>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&lcc-lr;denotes">
        <rdfs:domain rdf:resource="&api4kp;KnowledgeElement"/>
        <skos:note>the semiotic relationship between a linguistic expression and its referent, where the former references the latter, possibly within a context</skos:note>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;depends-on">
        <rdfs:subPropertyOf rdf:resource="&api4kp;compatible-with"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label xml:lang="en">depends on</rdfs:label>
        <skos:altLabel>requires</skos:altLabel>
        <skos:definition>An endeavor X depends on an another endeavor Y if any activity that involves X must also involve Y in order to be successful.</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;formal-relationship"/>
    </owl:ObjectProperty>
 
    <owl:ObjectProperty rdf:about="&api4kp;derived-from">
        <owl:inverseOf rdf:resource="&api4kp;has-derivative"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>derived from</rdfs:label>
        <skos:definition>An endeavor E1 is derived from an endeavor E2 if the activity that produced E2 used E1 as a primary input</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;described-by">
        <rdfs:subPropertyOf rdf:resource="&api4kp;represented-by"/>
        <rdfs:range rdf:resource="&api4kp;AbstractExpression"/>
        <rdfs:label>described by</rdfs:label>
        <skos:definition>The relationship between Something and its description - a (descriptive) expression of a work of knowledge that represents what that thing is (ontology) and/or how it behaves (model)</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;digest-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;summarization-of"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:label>digest of</rdfs:label>
        <skos:altLabel>condensation of</skos:altLabel>
        <skos:definition>An expression E1 is a digest of another expression E2 if the WoK that conceptualizes E2 cannot be completely reconstructed from the WoK that conceptualizes E1 without additional contextual knowledge</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;effectuates">
        <rdfs:subPropertyOf rdf:resource="&api4kp;compatible-with"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>effectuates</rdfs:label>
        <skos:definition>The relationship between two endeavors X and Y, such that:
- X is a knowledge endeavor, which either is or can be conceptualized as a knowledge processing method specification 
- When X is used in a knowledge processing activity, that activity will produce another knowledge endeavor Z
- Z complies with Y</skos:definition>
        <skos:note>The definition needs to be formalized as a rule</skos:note>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;embedsLanguage">
        <rdfs:subPropertyOf rdf:resource="&api4kp;has-proper-part"/>
        <rdfs:label>embeds language</rdfs:label>
        <skos:definition>The relationship between two languages L1 and L2, such that L1 is designed to delegate to another language L2 the expression of a certain class of concepts</skos:definition>
        <skos:scopeNote>This conceptual relationship is asserted when two languages are designed to complement each other. 
If an expression in L1 happens to delegate to L2, &quot;uses as sub-language&quot; should be used instead</skos:scopeNote>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;encoding-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;lowers"/>
        <owl:inverseOf rdf:resource="&api4kp;has-encoding"/>
        <rdfs:domain rdf:resource="&api4kp;EncodedKnowledgeExpression"/>
        <rdfs:range rdf:resource="&api4kp;ConcreteExpression"/>
        <rdfs:label>encoding of</rdfs:label>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;engraved-on">
        <rdfs:subPropertyOf rdf:resource="&api4kp;lifts"/>
        <owl:inverseOf rdf:resource="&api4kp;engraved-with"/>
        <rdfs:domain rdf:resource="&api4kp;EncodedKnowledgeExpression"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeCarrier"/>
        <rdfs:label>engraved on</rdfs:label>
        <skos:definition>the relationship between an encoding and its carrier</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;engraved-with">
        <rdfs:subPropertyOf rdf:resource="&api4kp;lowers"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeCarrier"/>
        <rdfs:range rdf:resource="&api4kp;EncodedKnowledgeExpression"/>
        <rdfs:label>engraved with</rdfs:label>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;equal-to">
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>equal to</rdfs:label>
        <skos:definition>Like any other individual, an endeavor is equal to itself at any given point in time.

Two distinct (according to some principle of identity) endeavors are equal if and only if they are indistinguishable:
- two semantic graphs have equal nodes and edges
- two (abstract or concrete) trees have equal nodes and parent/child edges 
- two artifacts carry the same (or equal) concrete expressions, and all their other qualities and configurations are equal</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;formal-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;exemplar-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;archetyped-by"/>
        <owl:inverseOf rdf:resource="&api4kp;has-exemplar"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeArtifact"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeManifestation"/>
        <rdfs:label>exemplar of</rdfs:label>
        <skos:definition>an individual artifact is an exemplar of a knowledge manifestation, which conceptualizes (and defines) the qualities of that artifact and all its copies</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;expresses">
        <rdfs:subPropertyOf rdf:resource="&api4kp;lowers"/>
        <rdfs:domain rdf:resource="&api4kp;AbstractExpression"/>
        <rdfs:range rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:label>expresses</rdfs:label>
        <skos:definition>The relationship between a (Knowledge) Expression in some language and its knowledge content.
Reflects the relationship between the expression&apos;s Abstract Syntax Tree and an Abstract Semantic Graph that captures the Knowledge content of the expression. That is, if an expression E expresses some Knowledge K, there is at least one WoK that captures K and that is faithfully expressed by E</skos:definition>
        <skos:note>Reasoners do not support the property chain 
expresses (WoK) o captures -&gt; expresses</skos:note>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;externalizes">
        <rdfs:subPropertyOf rdf:resource="&api4kp;refines"/>
        <rdfs:domain rdf:resource="&api4kp;Serialization"/>
        <rdfs:range rdf:resource="&api4kp;AbstractSyntax"/>
        <rdfs:label>externalizes</rdfs:label>
        <skos:definition>The relationship between a Concrete Syntax and its Abstract Syntax. The Concrete syntax adds the constructs (e.g. constraints, rules) that make sentences parseable</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;faithfully-expresses">
        <rdfs:subPropertyOf rdf:resource="&api4kp;completely-expresses"/>
        <rdfs:label>faithfully expresses</rdfs:label>
        <skos:definition>a faithful expression is both complete and correct, i.e. it is complete and  preserves all and only the associations between the concepts in the WoK</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;flattening-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;derived-from"/>
        <rdfs:domain rdf:resource="&api4kp;FlattenedKnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;CompositeKnowledgeResource"/>
        <rdfs:label>flattening of</rdfs:label>
        <skos:definition>a particular kind of derivation, relating a flattened resource to the composite it was generated from</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;formalizes">
        <rdfs:subPropertyOf rdf:resource="&api4kp;concisely-expresses"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;consistently-expresses"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;faithfully-expresses"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;unambiguously-expresses"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:range rdf:resource="&api4kp;WorkOfKnowledge"/>
        <skos:definition>An Expression formalizes a Work of Knowledge if (i) it uses a formal language and (ii) it faithfully, concisely, consistently and unambiguously expresses that WoK</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;framed-by">
        <rdfs:domain rdf:resource="&api4kp;DeconstructableKnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;StructuringKnowledgeRepresentation"/>
        <rdfs:label>framed by</rdfs:label>
        <skos:definition>relationship between a (deconstructable) knowledge resource and the structure that identifies and relates its components</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;function-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;archetypes"/>
        <owl:inverseOf rdf:resource="&api4kp;has-function"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeProcessingFunction"/>
        <rdfs:label>function of</rdfs:label>
        <skos:definition>the relationship between an entity and the concept that abstracts its function</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;specifies">
        <rdfs:label>specifies</rdfs:label>
        <skos:definition>mentions or names explicitly or definitively; states in detail</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-derivative">
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>has derivative</rdfs:label>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-encoding">
        <rdfs:subPropertyOf rdf:resource="&api4kp;lifts"/>
        <rdfs:domain rdf:resource="&api4kp;ConcreteExpression"/>
        <rdfs:range rdf:resource="&api4kp;EncodedKnowledgeExpression"/>
        <rdfs:label>has encoding</rdfs:label>
        <skos:definition>the relationship between a concrete expresison and its encoded version</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-exemplar">
        <rdfs:subPropertyOf rdf:resource="&api4kp;archetypes"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeManifestation"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeArtifact"/>
        <rdfs:label>has exemplar</rdfs:label>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-function">
        <rdfs:subPropertyOf rdf:resource="&api4kp;archetyped-by"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeProcessingFunction"/>
        <rdfs:label>has function</rdfs:label>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-knowledge">
        <owl:inverseOf rdf:resource="&api4kp;is-about"/>
        <rdfs:range rdf:resource="&api4kp;Knowledge"/>
        <rdfs:label>has knowledge</rdfs:label>
        <skos:definition>the abstract relationship between an entity, and what is known about that entity</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-later-revision">
        <rdfs:subPropertyOf rdf:resource="&api4kp;has-derivative"/>
        <owl:inverseOf rdf:resource="&api4kp;is-later-revision-of"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:comment>Scoped to Work of Knowledge:
A revision of a WoK is a new WoK that preserves the same Piece of Knowledge. That is, the new WoK will choose a different set of concepts (and associations thereof) to ensure that the WoK can be communicated more properly.

Scoped to Knowledge Expressions:  
The new expression preserves the WoK: conceptualizing either the previous or the later revision will yield the same WoK. However, the new revision alters the AST (or the Parse tree) to reduce the cost and/or the likelihood of errors in the act of conceptualizing its WoK content</rdfs:comment>
        <rdfs:comment>revisions may, but do not need to, be tied to an explicit versioning scheme</rdfs:comment>
        <rdfs:label>has later revision</rdfs:label>
        <skos:altLabel>has revision</skos:altLabel>
        <skos:definition>The relationship between two endeavors E1 and E2, where E2 is explicitly derived from E1, and E2 is intended to be preferred to E1 in activities where either would be suitably involved.

Moreover, this relationships implies that:
- both endeavors are defined at the same level of abstraction
- both refer to the same entity at the higher level(s) of abstraction 
- the two endeavors have different information content
- the derivation preserves the representation methods (as applicable): language, serialization, and/or carrier</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-later-versioned-revision">
        <rdfs:subPropertyOf rdf:resource="&api4kp;has-later-revision"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;has-succesor-version"/>
        <owl:inverseOf rdf:resource="&api4kp;is-later-versioned-revision-of"/>
        <rdfs:domain rdf:resource="&api4kp;VersionedKnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;VersionedKnowledgeResource"/>
        <rdfs:label xml:lang="en">has later versioned revision</rdfs:label>
        <skos:altLabel>is previous version of</skos:altLabel>
        <skos:definition>the &apos;has revision&apos; relationship, where both subject and object are versioned according to a common versioning scheme that determines the version identifiers assigned to either endeavors</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-latest">
        <rdfs:subPropertyOf rdf:resource="&api4kp;has-later-versioned-revision"/>
        <rdfs:domain rdf:resource="&api4kp;VersionedKnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;VersionedKnowledgeResource"/>
        <rdfs:label>has latest</rdfs:label>
        <skos:definition>the relationship between an endeavor E and the (versioned) revision L within  that endeavor&apos;s series, such that there are no later revisions of L</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-next-immediate-versioned-revision">
        <rdfs:subPropertyOf rdf:resource="&api4kp;has-later-versioned-revision"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;has-next-version"/>
        <owl:inverseOf rdf:resource="&api4kp;is-immediate-next-versioned-revision-of"/>
        <rdfs:domain rdf:resource="&api4kp;VersionedKnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;VersionedKnowledgeResource"/>
        <rdfs:label xml:lang="en">has next immediate versioned revision</rdfs:label>
        <skos:definition>The relationship between two expressions E1 and E2, with E2 a work-preserving revision of E1, where both are ordered by the same (partially) ordered versioning scheme v, and such that v(E1) &lt; v(E2), and there is no E3 such that v(E1) &lt; v(E3) &lt; v(E2)</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-next-version">
        <rdfs:subPropertyOf rdf:resource="&api4kp;has-succesor-version"/>
        <owl:inverseOf rdf:resource="&api4kp;has-previous-version"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>has next version</rdfs:label>
        <skos:altLabel>next</skos:altLabel>
        <skos:definition>given the subject E1 and its successor object E2, there is no E3 such that v(E1) &lt; v(E3) &lt; v(E2)</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;formal-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-original">
        <rdfs:subPropertyOf rdf:resource="&api4kp;is-later-versioned-revision-of"/>
        <rdfs:domain rdf:resource="&api4kp;VersionedKnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;VersionedKnowledgeResource"/>
        <rdfs:label>has original</rdfs:label>
        <skos:definition>the relationship between an endeavor E and the (versioned) revision O within that endeavor&apos;s series, such that there are no prior revisions of O</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;has-part">
        <owl:inverseOf rdf:resource="&api4kp;part-of"/>
        <rdfs:label>has part</rdfs:label>
    </owl:ObjectProperty>
 
    <owl:ObjectProperty rdf:about="&api4kp;has-previous-version">
        <rdfs:subPropertyOf rdf:resource="&api4kp;has-prior-version"/>
        <rdfs:label>has previous version</rdfs:label>
        <skos:altLabel>previous</skos:altLabel>
        <api4kp:has-aspect rdf:resource="&api4kp;formal-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-prior-version">
        <rdfs:subPropertyOf rdf:resource="&api4kp;in-series-with"/>
        <owl:inverseOf rdf:resource="&api4kp;has-succesor-version"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>has prior version</rdfs:label>
        <api4kp:has-aspect rdf:resource="&api4kp;formal-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-product">
        <rdfs:subPropertyOf rdf:resource="&api4kp;involves"/>
        <owl:inverseOf rdf:resource="&api4kp;product-of"/>
        <rdfs:domain rdf:resource="&api4kp;Activity"/>
        <rdfs:label>has product</rdfs:label>
        <skos:definition>The relationship between an Activity and an entity that is created as part of the Activity, i.e. an entity that did not exist before the Activity was started, exists after the completion of the activity, and exists because the Activity took place</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-proper-part">
        <rdfs:subPropertyOf rdf:resource="&api4kp;has-part"/>
        <owl:inverseOf rdf:resource="&api4kp;proper-part-of"/>
        <rdfs:label>has proper part</rdfs:label>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-structural-component">
        <rdfs:subPropertyOf rdf:resource="&api4kp;has-proper-part"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;structured-with"/>
        <rdfs:domain rdf:resource="&api4kp;CompositeKnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;StructuredKnowledgeResource"/>
        <rdfs:label>The relationship between a composite and its parts</rdfs:label>
        <rdfs:label>has structural component</rdfs:label>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-subject">
        <rdfs:subPropertyOf rdf:resource="&api4kp;is-about"/>
        <rdfs:domain rdf:resource="&api4kp;WorkOfKnowledge"/>
        <skos:prefLabel>conceptual representation of</skos:prefLabel>
        <rdfs:label>has subject (knowledge)</rdfs:label>
        <skos:definition>a WoK is a (knowledge) representation of something if knowledge about that something is the subject of that WoK and thus that subject is indirectly the subject of that WoK</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-succesor-version">
        <rdfs:subPropertyOf rdf:resource="&api4kp;in-series-with"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:comment>Being related by means of a versioning scheme, in general, does not imply derivation: when preparing a new endeavor to be released as part of a series, It is not uncommon to &apos;start from scratch&apos;.
Hence, versioning due to revision is treated as a special case, at the intersection of versioning and revision</rdfs:comment>
        <rdfs:label>has successor version</rdfs:label>
        <skos:definition>The relationship between two endeavors E1 and E2 part of the same series, where both are ordered by the same (partially) ordered versioning scheme v, and such that v(E1) &lt; v(E2).</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;formal-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;has-wordstock">
        <rdfs:domain rdf:resource="&lcc-lr;Language"/>
        <rdfs:range rdf:resource="&api4kp;Lexicon"/>
        <rdfs:label>has wordstock</rdfs:label>
        <skos:definition>The relationship between a Language, and the set of linguistic elements that can be formed into valid sentences of the language according to the language&apos;s syntax</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;imitation-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;equal-to"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;inspired-by"/>
        <rdfs:domain rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:range rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:label>imitation of</rdfs:label>
        <skos:definition>A derivative Work W1 is an actual imitation of a Work W2 if the similarity between the underlying concept graphs is sufficient so that they can be considered equal</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;imports">
        <rdfs:subPropertyOf rdf:resource="&api4kp;depends-on"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeRepresentation"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeRepresentation"/>
        <rdfs:label>imports</rdfs:label>
        <skos:definition>A Representation S imports another Representation T if there is at least one fragment of S that implicitly declares the need to perform a structuring operation involving S and T before S can be used in a knowledge processing activity</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;formal-relationship"/>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;in-series-with">
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>in series with</rdfs:label>
        <skos:definition>The relationship between two endeavors that belong to the same series, in the context of a versioning scheme</skos:definition>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;includes">
        <rdfs:subPropertyOf rdf:resource="&api4kp;imports"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeRepresentation"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeRepresentation"/>
        <rdfs:label>includes</rdfs:label>
        <skos:definition>A stronger form of import, stating that the target representation T must be injected into the source S
(i.e. there is an implicit tree-based structure where S is a parent of T)</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;formal-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;inspired-by">
        <rdfs:subPropertyOf rdf:resource="&api4kp;derived-from"/>
        <rdfs:domain rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:range rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:label>inspired by</rdfs:label>
        <rdfs:seeAlso>https://people.eecs.berkeley.edu/~aramdas/reports/DBreport.pdf</rdfs:seeAlso>
        <skos:definition>a derivative work W1 is inspired by another work W2 if the underlying semantic graphs are similar enough according to some similarity measure (i.e. if the derivative work uses enough of the same concepts and associations as the original one)</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;internally-represented-by">
        <owl:inverseOf rdf:resource="&api4kp;internally-represents"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeableAgent"/>
        <rdfs:label>internally represented by</rdfs:label>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;internally-represents">
        <rdfs:domain rdf:resource="&api4kp;KnowledgeableAgent"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>has internal representation of</rdfs:label>
        <rdfs:label xml:lang="en">internally represents</rdfs:label>
        <skos:definition>An Agent an internal representation of a Knowledge Endeavor if and only if there exists an internal &apos;carrier&apos; (neurons, but also a digital memory) that carries an encoded representation of all the Concepts, and their associations, scoped by the Endeavor</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;involved-in">
        <owl:inverseOf rdf:resource="&api4kp;involves"/>
        <rdfs:range rdf:resource="&api4kp;Activity"/>
        <rdfs:label>involved in</rdfs:label>
        <skos:altLabel>participates in</skos:altLabel>
        <skos:definition>the relationship between a participant in some activity and that activity</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;involves">
        <rdfs:domain rdf:resource="&api4kp;Activity"/>
        <rdfs:label>involves</rdfs:label>
        <skos:altLabel>has participant</skos:altLabel>
        <skos:definition>The relationship between an Activity and a participant - Agent (acitive) or Resource (passive)
Conceptually, this relationship is mediated by an &apos;entity qua&apos; individual that represents the participant&apos;s temporary play of a given role in the context of the activity.</skos:definition>
        <skos:scopeNote>in this ontology, &quot;roles&quot; are explicitly modeled as concepts, but their realization in space and time by an entity is left implicit.</skos:scopeNote>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;is-about">
        <rdfs:domain rdf:resource="&api4kp;Knowledge"/>
        <rdfs:comment>A kind of &apos;aboutness&apos; that reflects the relationship between a a knowledge-related conceptualization and its referent(s)</rdfs:comment>
        <skos:prefLabel>knowledge of</skos:prefLabel>
        <skos:definition>The relationship between a (piece of) Knowledge and its referent</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;is-immediate-next-versioned-revision-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;has-previous-version"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;is-later-versioned-revision-of"/>
        <rdfs:domain rdf:resource="&api4kp;VersionedKnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;VersionedKnowledgeResource"/>
        <rdfs:label xml:lang="en">is immediate next versioned revision of</rdfs:label>
        <skos:altLabel>has next previous immediate versioned revision</skos:altLabel>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;is-later-revision-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;derived-from"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>is later revision of</rdfs:label>
        <skos:altLabel>revision of</skos:altLabel>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
 
    <owl:ObjectProperty rdf:about="&api4kp;is-later-versioned-revision-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;has-prior-version"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;is-later-revision-of"/>
        <rdfs:domain rdf:resource="&api4kp;VersionedKnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;VersionedKnowledgeResource"/>
        <rdfs:label xml:lang="en">is later versioned revision of</rdfs:label>
        <skos:altLabel>has previous versioned revision</skos:altLabel>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;is-serialized-in">
        <rdfs:domain rdf:resource="&api4kp;AbstractExpression"/>
        <rdfs:range rdf:resource="&api4kp;Serialization"/>
        <owl:propertyChainAxiom rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;serialized-into"/>
            <rdf:Description rdf:about="&api4kp;uses-concrete-syntax"/>
        </owl:propertyChainAxiom>
        <rdfs:label xml:lang="en">has serialized representation in</rdfs:label>
        <skos:definition>An abstract expression X has a serialized representation in a concrete syntax Y if there exists at least one concrete representation of X in Y</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;knowledge-representation-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;representation-of"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:range rdf:resource="&api4kp;Knowledge"/>
        <owl:propertyChainAxiom rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;expresses"/>
            <rdf:Description rdf:about="&api4kp;captures"/>
        </owl:propertyChainAxiom>
        <skos:prefLabel>knowledge representation of</skos:prefLabel>
        <skos:definition>relates a Knowledge Expression to the Knowledge that is captured by the (implicit) Work of Knowledge that the Expression expresses</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;leverages">
        <rdfs:subPropertyOf rdf:resource="&api4kp;uses-concept"/>
        <rdfs:domain rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:range rdf:resource="&api4kp;AtomicConcept"/>
        <rdfs:comment>a WoK levereages a concept if that concept is not part of that WoK, but is required to understand the WoK</rdfs:comment>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;limits">
        <rdfs:subPropertyOf rdf:resource="&api4kp;refines"/>
        <rdfs:domain rdf:resource="&api4kp;Serialization"/>
        <rdfs:range rdf:resource="&api4kp;Serialization"/>
        <skos:definition>The relationship between a Concrete Syntax S1 and a Concrete Syntax S2, where S2 is strictly more constrained than S1 in terms of admissible constructs.</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;linguistic-adaptation-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;adaptation-of"/>
        <rdfs:domain rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:range rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:label>linguistic adaptation of</rdfs:label>
        <skos:definition>An adaptation that facilitates the expression of the derivative WoK in some language</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;lowers">
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>lowers</rdfs:label>
        <skos:definition>The relationship between endeavors E1 and E2, where E1 is at a lower level of abstraction</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;makes-use-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;involves"/>
        <owl:inverseOf rdf:resource="&api4kp;used-in"/>
        <rdfs:domain rdf:resource="&api4kp;Activity"/>
        <rdfs:comment>The relationship between an Activity and a non-agentive resource that is used by an Agent performing that Activity</rdfs:comment>
        <rdfs:label>makes use of</rdfs:label>
    </owl:ObjectProperty>
 
    <owl:ObjectProperty rdf:about="&api4kp;paraphrase-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;derived-from"/>
        <rdfs:domain rdf:resource="&api4kp;AbstractExpression"/>
        <rdfs:range rdf:resource="&api4kp;AbstractExpression"/>
        <rdfs:label>paraphrase of</rdfs:label>
        <skos:definition>An expression of a Work W1 paraphrases an expression of a Work W2 if the two use different concepts, but W1 entails W2 and vice versa. As such, both expression capture the same piece of knowledge</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;part-of">
        <rdfs:label>part of</rdfs:label>
        <skos:definition>Generic, homeomeric parthood relationship</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;performed-by">
        <rdfs:subPropertyOf rdf:resource="&api4kp;involves"/>
        <owl:inverseOf rdf:resource="&api4kp;performs"/>
        <rdfs:domain rdf:resource="&api4kp;Activity"/>
        <rdfs:range rdf:resource="&api4kp;Agent"/>
        <rdfs:label>performed by</rdfs:label>
        <skos:definition>The relationship between an Activity and an Agent whose work contributes to the completion of the Activity</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;performs">
        <rdfs:subPropertyOf rdf:resource="&api4kp;involved-in"/>
        <rdfs:domain rdf:resource="&api4kp;Agent"/>
        <rdfs:range rdf:resource="&api4kp;Activity"/>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;preserves">
        <rdfs:domain rdf:resource="&api4kp;KnowledgeProcessingMethodSpecification"/>
        <rdfs:label>preserves</rdfs:label>
        <skos:definition>A method M (subject) preserves an entity E of type T (object) if: 
- for any entity X 
  - if X is related to E by R
  and X is input of an activity A 
  and A is based on M
  and A produces an output O
then:
  O is also related to E by R</skos:definition>
        <skos:example>A transcription method, by definition, defines how to create different concrete expressions, but preserves the language (abstract syntax)</skos:example>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;product-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;involved-in"/>
        <rdfs:range rdf:resource="&api4kp;Activity"/>
        <rdfs:label>product of</rdfs:label>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;profiles">
        <rdfs:subPropertyOf rdf:resource="&api4kp;refines"/>
        <rdfs:domain rdf:resource="&api4kp;Profile"/>
        <rdfs:range rdf:resource="&api4kp;AbstractSyntax"/>
        <rdfs:label>profiles</rdfs:label>
        <skos:definition>The relationship between a Profile of an Abstract Syntax and that Abstract Syntax. A profile is more restrictive in some sense, i.e. has no less constraints</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;proper-part-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;part-of"/>
        <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#IrreflexiveProperty"/>
        <rdfs:label>proper part of</rdfs:label>
        <skos:definition>Parthood relationship that is irreflexive, i.e. such that no individual is allowed to be proper part of itself</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;rearrangement-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;derived-from"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;variant-of"/>
        <rdfs:domain rdf:resource="&api4kp;StructuredKnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;StructuredKnowledgeResource"/>
        <rdfs:label>rearrangement of</rdfs:label>
        <skos:definition>A structured resource R1 is a rearrangement of another structured resource R2 if they have different structure and components, but their flattening yields two Resources F1 and F2 that express the same Work of Knowledge</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;recipient-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;involved-in"/>
        <owl:inverseOf rdf:resource="&api4kp;targets"/>
        <rdfs:range rdf:resource="&api4kp;Activity"/>
        <rdfs:label>recipient of</rdfs:label>
        <skos:definition>an entity is the recipient of an activity if that activity targets that entity</skos:definition>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;refines">
        <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#TransitiveProperty"/>
        <rdfs:domain rdf:resource="&api4kp;Syntax"/>
        <rdfs:range rdf:resource="&api4kp;Syntax"/>
        <rdfs:comment>The relationship between two Syntaxes S1 and S2, such that the set of rules and constraints of S1 is no less permissive than S2, i.e. a sentence that is valid according to S2 must be valid according to S1.</rdfs:comment>
        <rdfs:comment>This relationships is used in several ways:
(i) to state that a concrete syntax externalizes an abstract one, allowing to create parse trees and defining how a parse tree reduces to an AST
(ii) to define sub-languages that conform to certain profiles, based on semantic constraints on the abstract syntax
(iii) to define specialized versions of a concrete syntax</rdfs:comment>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;representation-of">
        <owl:inverseOf rdf:resource="&api4kp;represented-by"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
        <owl:propertyChainAxiom rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;expresses"/>
            <rdf:Description rdf:about="&api4kp;has-subject"/>
        </owl:propertyChainAxiom>
        <rdfs:label>representation of</rdfs:label>
        <skos:definition>an expression of a conceptual representation of something</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;represented-by">
        <rdfs:range rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:label>represented by</rdfs:label>
        <skos:definition>the association between (the knowledge about) something an expression of a work of knowledge that has that something as a subject</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;reproduced-by">
        <rdfs:subPropertyOf rdf:resource="&api4kp;carried-by"/>
        <owl:inverseOf rdf:resource="&api4kp;reproduces"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeArtifact"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;reproduces">
        <rdfs:subPropertyOf rdf:resource="&api4kp;carries"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeArtifact"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeExpression"/>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;serialization-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;lowers"/>
        <owl:inverseOf rdf:resource="&api4kp;serialized-into"/>
        <rdfs:domain rdf:resource="&api4kp;ConcreteExpression"/>
        <rdfs:range rdf:resource="&api4kp;AbstractExpression"/>
        <rdfs:label xml:lang="en">is concrete representation of</rdfs:label>
    </owl:ObjectProperty>
 
    <owl:ObjectProperty rdf:about="&api4kp;serialized-into">
        <rdfs:subPropertyOf rdf:resource="&api4kp;lifts"/>
        <rdfs:domain rdf:resource="&api4kp;AbstractExpression"/>
        <rdfs:range rdf:resource="&api4kp;ConcreteExpression"/>
        <rdfs:label xml:lang="en">concretely represented as</rdfs:label>
        <skos:altLabel>has concretization</skos:altLabel>
    </owl:ObjectProperty>
 
    <owl:ObjectProperty rdf:about="&api4kp;serializes">
        <owl:inverseOf rdf:resource="&api4kp;supports-serialization"/>
        <rdfs:domain rdf:resource="&api4kp;Serialization"/>
        <rdfs:range rdf:resource="&lcc-lr;Language"/>
        <rdfs:label xml:lang="en">serializes</rdfs:label>
        <skos:definition>The relation between the concrete syntax of a language and that language</skos:definition>
    </owl:ObjectProperty>
 
    <owl:ObjectProperty rdf:about="&api4kp;specified-by">
        <rdfs:subPropertyOf rdf:resource="&api4kp;represented-by"/>
        <rdfs:range rdf:resource="&api4kp;AbstractExpression"/>
        <rdfs:label>specified by</rdfs:label>
        <skos:definition>The relationship between Something and its specification - a (prescriptive) expression of a work of knowledge that defines how that something should behave</skos:definition>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;stored-in">
        <owl:inverseOf rdf:resource="&api4kp;stores"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>stored in</rdfs:label>
        <skos:definition>an artifact (as a carrier of the expression of a piece of knowledge) is stored in a container that has the function of a knowledge repository</skos:definition>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;stores">
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>Notice that only Artifacts can be stored in practice. Storing a Work or an Expression implies the existence of an Artifact that carries (the Expression that realized) that Work. 
Nevertheless, the relationship can be asserted at any level, to shift the focus on the entity that is valuable for the purpose of storage</rdfs:label>
        <rdfs:label>stores</rdfs:label>
        <skos:definition>the relationship between an entity with the function of Knowledge artifact repository, and the knowledge resources that are stored therein by means of some carrier.

An entity stores a Work, Expression or Artifact if it is able to keep (a copy of) it, and make it accessible for use as needed</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;structurally-organized-by">
        <rdfs:subPropertyOf rdf:resource="&api4kp;framed-by"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;has-structural-component"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;structured-by"/>
        <rdfs:domain rdf:resource="&api4kp;CompositeKnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;StructuringKnowledgeRepresentation"/>
        <rdfs:label>structurally organized by</rdfs:label>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;structured-by">
        <rdfs:subPropertyOf rdf:resource="&api4kp;structured-with"/>
        <owl:inverseOf rdf:resource="&api4kp;structures"/>
        <rdfs:domain rdf:resource="&api4kp;StructuredKnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;StructuringKnowledgeRepresentation"/>
        <rdfs:label>structured by</rdfs:label>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;structured-with">
        <rdfs:domain rdf:resource="&api4kp;StructuredKnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;StructuredKnowledgeResource"/>
        <rdfs:label>structured with</rdfs:label>
        <skos:definition>Two knowledge resources are mutually structured with each other if they are part of the same structured knowledge resource.</skos:definition>
        <skos:note>A structuring knowledge resource is structured with all the resources that it structures</skos:note>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;structures">
        <rdfs:subPropertyOf rdf:resource="&api4kp;structured-with"/>
        <rdfs:domain rdf:resource="&api4kp;StructuringKnowledgeRepresentation"/>
        <rdfs:range rdf:resource="&api4kp;StructuredKnowledgeResource"/>
        <rdfs:label>structures</rdfs:label>
    </owl:ObjectProperty>
 
    <owl:ObjectProperty rdf:about="&api4kp;summarization-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;compact-representation-of"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;derived-from"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:label>summarization of</rdfs:label>
        <skos:definition>An expresison E1 summarizes an expression E2 if the WoK that conceptualizes E1 uses a subset of the concepts (and associations thereof) used by the WoK that conceptualizes E2</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;supplements">
        <rdfs:subPropertyOf rdf:resource="&api4kp;compatible-with"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>supplements</rdfs:label>
        <skos:definition>An endeavor X supplements another endeavor Y if Y does not depend on X, bu Y can be used in parallel with X</skos:definition>
        <skos:note>this relationship implies that (set-oriented) structuring of X and Y is possible, but not necessary nor actual</skos:note>
        <api4kp:has-aspect rdf:resource="&api4kp;formal-relationship"/>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;supports-expression">
        <rdfs:domain rdf:resource="&lcc-lr;Language"/>
        <rdfs:range rdf:resource="&api4kp;AbstractSyntax"/>
        <owl:propertyChainAxiom rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;supports-expression"/>
            <rdf:Description rdf:about="&api4kp;profiles"/>
        </owl:propertyChainAxiom>
        <owl:propertyChainAxiom rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;supports-serialization"/>
            <rdf:Description rdf:about="&api4kp;externalizes"/>
        </owl:propertyChainAxiom>
        <rdfs:comment>In order to be useful, the supported notations should be able to structure most sentences of the language.</rdfs:comment>
        <rdfs:label>supports expression in</rdfs:label>
        <skos:definition>A Language L supports an Abstract Syntax S if there exists at least one sentence in the extension of L, such that an AST based on S can be built for that sentence</skos:definition>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;supports-serialization">
        <rdfs:domain rdf:resource="&lcc-lr;Language"/>
        <rdfs:range rdf:resource="&api4kp;Serialization"/>
        <owl:propertyChainAxiom rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;supports-serialization"/>
            <rdf:Description rdf:about="&api4kp;limits"/>
        </owl:propertyChainAxiom>
        <rdfs:label xml:lang="en">supports serialization in</rdfs:label>
        <skos:definition>A Language L supports a Concrete Syntax S if there exists at least one sentence in the language that S formalizes, such that a parse tree can be constructed out of the tokens that form that sentence</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;synopsis-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;summarization-of"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:label>synopsis of</rdfs:label>
        <skos:definition>A synopsis is a summary such that the original WoK (i.e. the WoK that conceptualizes the expression that is the target of this relationship) can be inferred from the WoK that conceptualizes the derived WoK</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;targets">
        <rdfs:subPropertyOf rdf:resource="&api4kp;involves"/>
        <rdfs:domain rdf:resource="&api4kp;Activity"/>
        <rdfs:label>targets</rdfs:label>
        <skos:definition>an activity targets  a (passive) participant, which is pre-existing to the start of the activity, but is changed somehow in the process. 
i.e.the activity does not alter any of the essential qualities that define the identity of the entity, but results in some change to the non-essential ones.</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;transcodification-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;derived-from"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;variant-of"/>
        <rdfs:domain rdf:resource="&api4kp;EncodedKnowledgeExpression"/>
        <rdfs:range rdf:resource="&api4kp;EncodedKnowledgeExpression"/>
        <rdfs:label>transcodification of</rdfs:label>
        <skos:definition>A relationship between two encodings of the same concrete expression that use two different encoding mechanisms</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;transcreation-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;adaptation-of"/>
        <rdfs:domain rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:range rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:label>transcreation of</rdfs:label>
        <skos:definition>Adaptation that facilitates the interpretation of (an expression of) the derived WoK by a target audience, for which all the concepts used by the derived Work are common knowledge, but some of the ones used in the original WoK are not</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;transcription-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;derived-from"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;variant-of"/>
        <rdfs:domain rdf:resource="&api4kp;ConcreteExpression"/>
        <rdfs:range rdf:resource="&api4kp;ConcreteExpression"/>
        <rdfs:label>transcription of</rdfs:label>
        <skos:definition>A relationship between two concrete expressions, in the same language but two different concrete syntaxes, that concretize the same abstract expression (and thus express the same work of knowledge), such that the subject is derived from the object by means of a transcription operation</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
 
    <owl:ObjectProperty rdf:about="&api4kp;translation-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;derived-from"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;variant-of"/>
        <rdfs:domain rdf:resource="&api4kp;AbstractExpression"/>
        <rdfs:range rdf:resource="&api4kp;AbstractExpression"/>
        <rdfs:label>translation of</rdfs:label>
        <skos:definition>A relationship between two abstract expressions, in two different languages, that express the same work of knowledge, such that the subject is derived from the object by means of a translation operation</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;transliteration-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;derived-from"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;variant-of"/>
        <rdfs:domain rdf:resource="&api4kp;ConcreteExpression"/>
        <rdfs:range rdf:resource="&api4kp;ConcreteExpression"/>
        <rdfs:label>transliteration of</rdfs:label>
        <skos:definition>A relationship between two concretizations C1 and C2 of the same abstract expression, in the same language and using the same lexicon, but such that the tokens are constructed using alternative alphabets</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;material-relationship"/>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;transwordation-of">
        <rdfs:subPropertyOf rdf:resource="&api4kp;derived-from"/>
        <rdfs:subPropertyOf rdf:resource="&api4kp;variant-of"/>
        <rdfs:domain rdf:resource="&api4kp;ConcreteExpression"/>
        <rdfs:range rdf:resource="&api4kp;ConcreteExpression"/>
        <rdfs:label>transwordation of</rdfs:label>
        <skos:definition>A relationship between two expressions, such that the lexical tokens (&apos;words&apos;) used to express atomic concepts in the source are replaced by synonyms in the target</skos:definition>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;unambiguously-expresses">
        <rdfs:subPropertyOf rdf:resource="&api4kp;expresses"/>
        <rdfs:label>unambiguously expresses</rdfs:label>
        <skos:definition>every element in the expression has no more than one possible conceptualization</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;used-in">
        <rdfs:subPropertyOf rdf:resource="&api4kp;involved-in"/>
        <rdfs:range rdf:resource="&api4kp;Activity"/>
        <rdfs:label>used in</rdfs:label>
    </owl:ObjectProperty>
 
    <owl:ObjectProperty rdf:about="&api4kp;uses-annotation-language">
        <rdfs:subPropertyOf rdf:resource="&api4kp;uses-as-sublanguage"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:range rdf:resource="&lcc-lr;Language"/>
        <rdfs:label>uses annotation language</rdfs:label>
        <skos:definition>The relationship between an expression and the language used to annotate the expression, i.e. to express fragments that are not essential to the conceptualization of the expression</skos:definition>
    </owl:ObjectProperty>
 
    <owl:ObjectProperty rdf:about="&api4kp;uses-as-sublanguage">
        <rdfs:subPropertyOf rdf:resource="&api4kp;uses-language"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:range rdf:resource="&lcc-lr;Language"/>
        <rdfs:label>uses as sub-language</rdfs:label>
        <skos:definition>an Expression E uses L as a sublanguage if
 - L is not the primary language
 - there exists at least one sub-tree of E&apos;s AST such that that sub-tree formalizes a valid expression of L</skos:definition>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;uses-concept">
        <rdfs:subPropertyOf rdf:resource="&api4kp;has-part"/>
        <rdfs:domain rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:range rdf:resource="&api4kp;AtomicConcept"/>
        <rdfs:label>uses concept</rdfs:label>
        <skos:definition>a work of knowledge uses a concept if the concept is part of the concepts selected during the creation of the work, and thus is part of the work</skos:definition>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;uses-concrete-syntax">
        <rdfs:domain rdf:resource="&api4kp;ConcreteExpression"/>
        <rdfs:range rdf:resource="&api4kp;Serialization"/>
        <rdfs:label xml:lang="en">uses concrete syntax</rdfs:label>
        <skos:altLabel>The relationship between a Concrete Expression and the concrete syntax used to serialize its abstract form</skos:altLabel>
        <skos:altLabel>uses format</skos:altLabel>
        <skos:altLabel>uses serialization</skos:altLabel>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;uses-language">
        <rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:range rdf:resource="&lcc-lr;Language"/>
        <rdfs:label>uses language</rdfs:label>
        <skos:definition>The relationship between an Expression (abstract or concrete) and the Language used to express it.

(A concrete expression that is a concrete representation of) an Abstract Expression uses a language if itself, or a fragment thereof, uses a Notation that formalizes the Language, i.e. the expression conforms to the rules defined by the Notation.</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;uses-lexicon">
        <rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:range rdf:resource="&api4kp;Lexicon"/>
        <owl:propertyChainAxiom rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;uses-language"/>
            <rdf:Description rdf:about="&api4kp;has-wordstock"/>
        </owl:propertyChainAxiom>
        <rdfs:label>uses lexicon</rdfs:label>
        <skos:definition>The relationship between a knowledge expresison and the lexicon from which its actual linguistic elements (aka signature) are extracted</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;uses-method">
        <rdfs:domain rdf:resource="&api4kp;KnowledgeActivity"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeProcessingMethodSpecification"/>
        <owl:propertyChainAxiom rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;archetyped-by"/>
            <rdf:Description rdf:about="&api4kp;blueprinted-by"/>
        </owl:propertyChainAxiom>
        <rdfs:label>uses method</rdfs:label>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;uses-primary-language">
        <rdfs:subPropertyOf rdf:resource="&api4kp;uses-language"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:range rdf:resource="&lcc-lr;Language"/>
        <rdfs:comment>In case of set-oriented structured resources, it is sufficient that at least one of the member resources uses L as primary language</rdfs:comment>
        <rdfs:label>uses primary language</rdfs:label>
        <skos:definition>An Expression E uses L as primary language if there exists a sub-tree S of E&apos;s AST T that formalizes a valid expression of L, and the root of S coincides with the root of T.</skos:definition>
    </owl:ObjectProperty>

    <owl:ObjectProperty rdf:about="&api4kp;uses-profile">
        <rdfs:subPropertyOf rdf:resource="&api4kp;uses-syntax"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:range rdf:resource="&api4kp;Profile"/>
        <rdfs:label>uses profile</rdfs:label>
        <skos:definition>The relationship between a Knowledge Expression and a profile of an (abstract) syntax that it conforms to</skos:definition>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;uses-syntax">
        <rdfs:subPropertyOf rdf:resource="&api4kp;conforms-with"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:range rdf:resource="&api4kp;AbstractSyntax"/>
        <rdfs:label>uses syntax</rdfs:label>
        <skos:definition>An expression uses a syntax if it is (known to have been originally) formulated according to that syntax.</skos:definition>
        <skos:scopeNote>Using a syntax implies conformance to that syntax. The converse is not true in general: a sentence written in a language may still be valid according to the rules of another language it is checked against. 
This is necessarily true when the former language is embedded in the latter, but may also be coincidentally true (e.g. the sentence &quot;3+5&quot; conforms to the syntax of many programming languages).</skos:scopeNote>
    </owl:ObjectProperty>
    
    <owl:ObjectProperty rdf:about="&api4kp;variant-of">
        <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#SymmetricProperty"/>
        <rdfs:domain rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:range rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label>alternative representation of</rdfs:label>
        <rdfs:label>variant of</rdfs:label>
        <skos:altLabel>iso-semantic representation of</skos:altLabel>
        <skos:definition>an endeavor is a variant of another endeavor if 
- the two endeavors represent the same piece of knowledge
- both exist at the same level of abstraction (work, expression, serialization, encoding/artifact)
- both refer to the same entity at the higher level(s) of abstraction 
- the two are iso-semantic, i.e. they preserve the information content at the same level, but differ in the choice of concepts (to capture the same knowledge), language (for the same work), serialization (for the same language), or carrier (for the same concretization)</skos:definition>
        <api4kp:has-aspect rdf:resource="&api4kp;formal-relationship"/>
    </owl:ObjectProperty>
    

    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Classes
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->
    
    <owl:Class rdf:about="&api4kp;AbstractExpression">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;knowledge-representation-of"/>
                <owl:someValuesFrom rdf:resource="&api4kp;Knowledge"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;serialized-into"/>
                <owl:someValuesFrom rdf:resource="&api4kp;ConcreteExpression"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <owl:disjointWith rdf:resource="&api4kp;ConcreteExpression"/>
        <rdfs:comment>Abstract expressions, by definition generically depend on some carrier. An abstract expression needs one to exist physically, but does not depend on any particular one. Abstract Expressions, however, cannot be realized directly. The language needs to be complemented with a form that allows for a concrete syntactic encoding (e.g. written vs vocal for English, XML vs JSON for UML Class Models, OFN vs Turtle for OWL, etc..)</rdfs:comment>
        <rdfs:comment>An Abstract Knowledge Expression can be internally represented by an Agent in terms of an Abstract Syntax Tree</rdfs:comment>
        <rdfs:label xml:lang="en">abstract knowledge expression</rdfs:label>
        <rdfs:seeAlso rdf:resource="&api4kp;AbstractSyntax"/>
        <rdfs:seeAlso rdf:resource="&api4kp;Serialization"/>
        <skos:definition>The class of equivalence of Concrete Expressions of some Knowledge content, in some Language, across the various serializations supported by that language.</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;AbstractSemanticGraph">
        <rdfs:subClassOf rdf:resource="&api4kp;AbstractExpression"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;formalizes"/>
                <owl:someValuesFrom>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;has-subject"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;WorkOfKnowledge"/>
                    </owl:Restriction>
                </owl:someValuesFrom>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label>abstract semantic graph</rdfs:label>
        <skos:definition>The representation of the &apos;pure&apos; information content of a Work of Knowledge, in terms of (a representation of) the concepts that constitute the Work and their associations</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;AbstractSyntax">
        <rdfs:subClassOf rdf:resource="&api4kp;Syntax"/>
        <owl:disjointWith rdf:resource="&api4kp;Serialization"/>
        <rdfs:comment>Like all Abstract Expressions, it needs a serialization to be concretized</rdfs:comment>
        <rdfs:label xml:lang="en">abstract syntax</rdfs:label>
        <skos:definition>The set of structures and/or rules that constrain the abstract syntax tree of a valid sentence of a language, itself expressed in some (meta) language</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;AbstractSyntaxTree">
        <rdfs:subClassOf rdf:resource="&api4kp;AbstractExpression"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;formalizes"/>
                <owl:someValuesFrom>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;has-subject"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;AbstractExpression"/>
                    </owl:Restriction>
                </owl:someValuesFrom>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label>AST</rdfs:label>
        <rdfs:label>abstract syntax tree</rdfs:label>
        <skos:definition>The representation of the internal structure of an Abstract Expression, according to some Abstract Syntax, obtained from the parsing of a Concrete Expression of which that Abstract Expression is a concrete representation</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;Activity">
        <rdfs:comment>This classes is provided for compatibility with other ontologies that define &apos;Activity&apos; at higher levels of abstraction and/or generality</rdfs:comment>
        <rdfs:label>activity</rdfs:label>
        <skos:definition>An intentional process, executed with the active participation of one of more Agents that carry out a plan.</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;Agent">
        <rdfs:comment>Agents can act on behalf of other Agents, or do so as a consequence of a speech act (request, command, suggestion, etc..)</rdfs:comment>
        <rdfs:comment>Some agents have intentions, and can decide to act based on them</rdfs:comment>
        <rdfs:label>agent</rdfs:label>
        <skos:definition>Any entity that has the capability (potential) to be an active participant in an Activity</skos:definition>
        <skos:scopeNote>This abstract definition of Agent is intended to be as broad as possible, at least covering human and software agents alike. It is also meant to include individual agents, as well as collectives thereof.
The intent is to be refined/redefined/concretized when this ontology is used in conjunction with another ontology of social aspects.</skos:scopeNote>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;AgentiveRole">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;DefinedConcept"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;archetypes"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;Agent"/>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;DefinedConcept"/>
        <owl:disjointWith rdf:resource="&api4kp;PassiveRole"/>
        <rdfs:label>active paticipant (type)</rdfs:label>
        <rdfs:label>agentive role</rdfs:label>
        <skos:definition>concept that archetypes an Agent, and whose definition specifies how it participates (actively) in some Activity</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;ArityClassifier">
        <rdfs:subClassOf rdf:resource="&api4kp;SyntacticClassifier"/>
        <rdfs:label>arity classifier (aspect)</rdfs:label>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;ArtificialAgent">
        <rdfs:subClassOf rdf:resource="&api4kp;Agent"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;product-of"/>
                <owl:someValuesFrom rdf:resource="&api4kp;Activity"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label>artificial agent</rdfs:label>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;AtomicConcept">
        <rdfs:subClassOf rdf:resource="&api4kp;Knowledge"/>
        <rdfs:comment>Individual concepts - instances of this class - are universals whose extension can be formally expressed (in OWL) by means of an OWL class, which represents the set of all past, present and future particular individuals that can be classified by the concept</rdfs:comment>
        <rdfs:comment>This notion of Concept is defined as a generically dependent continuant which, consistently with its semiotic interpretation, is &apos;about&apos; some referent.

It is considered a &apos;unit of knowledge&apos;, or &apos;unit of (conceptual) representation&apos;.  

The corresponding notion of a specifically dependent continuant - i.e. the concept that one specific agent has of a given refernet - is better defined as a &apos;unit of thought&apos;.</rdfs:comment>
        <rdfs:label>concept</rdfs:label>
        <skos:altLabel>representational unit</skos:altLabel>
        <skos:definition>An atomic piece of knowledge that can be used for the construction of more complex pieces of knowledge</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;Classifier">
        <rdfs:label>classifier aspect</rdfs:label>
		<skos:definition>a standardized classification or delineation for something, per some scheme for such delineation, within a specified context</skos:definition>
		<dct:source>ISO/IEC 11179-3 Information technology - Metadata registries (MDR) - Part 3: Registry metamodel and basic attributes, Third edition, 2013-02-15</dct:source>
	</owl:Class>
    
    <owl:Class rdf:about="&api4kp;ComplexConcept">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;AtomicConcept"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;capturedBy"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;WorkOfKnowledge"/>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;Knowledge"/>
        <rdfs:comment>When expressed in OWL, complex concepts are described in terms of their relationships to other concepts, using subClassOf or equivalentClass axioms</rdfs:comment>
        <rdfs:label>complex concept</rdfs:label>
        <skos:definition>A Concept that can be decomposed into a complex association of other Concepts, ans such that there is at least one Work of Knowledge that captures those Concepts and their relationships</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;CompositeKnowledgeResource">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;StructuredKnowledgeResource"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;structurally-organized-by"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;StructuringKnowledgeRepresentation"/>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;DeconstructableKnowledgeResource"/>
        <rdfs:subClassOf rdf:resource="&api4kp;StructuredKnowledgeResource"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;depends-on"/>
                <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeRepresentation"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;has-proper-part"/>
                <owl:someValuesFrom rdf:resource="&api4kp;StructuredKnowledgeResource"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;has-proper-part"/>
                <owl:someValuesFrom rdf:resource="&api4kp;StructuringKnowledgeRepresentation"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment>Functionally Complex Resource that has one or more structural components, and provides the structuring for them. Each component plays a specific role</rdfs:comment>
        <rdfs:label xml:lang="en">composite knowledge resource</rdfs:label>
        <skos:definition>a complex, structured knowledge resource that is constructed by assembling a number of knowledge resources, according to the plan that is the information content of a structuring representation.
Since the components are proper parts, a composite resource depends on all its components.</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;ComputableLanguage">
        <rdfs:subClassOf rdf:resource="&api4kp;ConstructedLanguage"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty>
                    <rdf:Description>
                        <owl:inverseOf rdf:resource="&api4kp;uses-language"/>
                    </rdf:Description>
                </owl:onProperty>
                <owl:someValuesFrom>
                    <owl:Restriction>
                        <owl:onProperty>
                            <rdf:Description>
                                <owl:inverseOf rdf:resource="&api4kp;specified-by"/>
                            </rdf:Description>
                        </owl:onProperty>
                        <owl:someValuesFrom rdf:resource="&api4kp;InformationProcessingActivity"/>
                    </owl:Restriction>
                </owl:someValuesFrom>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label xml:lang="en">computable language</rdfs:label>
        <skos:definition>Constructed Language that is used only by expressions that define how to execute information processing tasks and, as such, is indirectly used in certain Information Processing Activities</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;ConcreteExpression">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;serialization-of"/>
                <owl:someValuesFrom rdf:resource="&api4kp;AbstractExpression"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;uses-concrete-syntax"/>
                <owl:someValuesFrom rdf:resource="&api4kp;Serialization"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment>A concrete expression is the result of the act of serializing an (abstract) expression using a concrete syntax, which adds &apos;form&apos; aspects that allow to engrave an encoding of the expression on a carrier</rdfs:comment>
        <rdfs:comment>As a remark, two individual Concrete Expressions of the same Abstract Expression (of the same Work) are different if they use different serializations</rdfs:comment>
        <rdfs:label xml:lang="en">concrete knowledge expression</rdfs:label>
        <skos:definition>An Expression in some language, serialized using one of the concrete syntaxes supported by that language</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;ConstructedLanguage">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&lcc-lr;Language"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;specified-by"/>
                        <owl:someValuesFrom>
                            <owl:Class>
                                <owl:intersectionOf rdf:parseType="Collection">
                                    <rdf:Description rdf:about="&api4kp;Syntax"/>
                                    <owl:Restriction>
                                        <owl:onProperty rdf:resource="&api4kp;formalizes"/>
                                        <owl:someValuesFrom>
                                            <owl:Class>
                                                <owl:intersectionOf rdf:parseType="Collection">
                                                    <rdf:Description rdf:about="&api4kp;FormalGrammar"/>
                                                    <rdf:Description rdf:about="&api4kp;PrescriptiveGrammar"/>
                                                </owl:intersectionOf>
                                            </owl:Class>
                                        </owl:someValuesFrom>
                                    </owl:Restriction>
                                </owl:intersectionOf>
                            </owl:Class>
                        </owl:someValuesFrom>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:label>constructed language</rdfs:label>
        <skos:definition>Languages that are intensionally specified by a formal grammar, schema or metamodel - a set of criteria (e.g. rules and constraints) explicitly designed to distinguish valid sentences from invalid ones in a non-ambiguous way</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;ConstructiveDefinition">
        <rdfs:subClassOf rdf:resource="&api4kp;Definition"/>
        <rdfs:label>constructive definition</rdfs:label>
        <skos:definition>definition that can be used to generate instances of a concept, as well as recognizing them</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;ControlledNaturalLanguage">
        <rdfs:subClassOf rdf:resource="&api4kp;ConstructedLanguage"/>
        <rdfs:subClassOf rdf:resource="&lcc-lr;NaturalLanguage"/>
        <rdfs:label>controlled natural language</rdfs:label>
        <skos:definition>Subset of a Natural Language that has a formal grammar constructed in a way to simplify and/or disambiguate that natural language</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;DeconstructableKnowledgeResource">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;framed-by"/>
                <owl:someValuesFrom rdf:resource="&api4kp;StructuringKnowledgeRepresentation"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label>deconstructable knowledge resource</rdfs:label>
        <skos:definition>Knowledge resource that is not necessarily a composite, but such that there exists at least one composite knowledge resource that, if flattened, results in a (flattened) knowledge resource that is equal to this.

The structure of that composite can be overlyed on top of the deconstructable resource, as a possibel input to a deconstructing operation</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;DefinedConcept">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;ComplexConcept"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;defined-by"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;Definition"/>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;ComplexConcept"/>
        <rdfs:comment>When expressed in OWL, defined concepts have at least one equivalentClass axiom, assuming OWL is sufficiently expressive to represent that definition.</rdfs:comment>
        <rdfs:label>defined concept</rdfs:label>
        <skos:definition>A concept that has at least one explicit definition</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;Definition">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeAsset"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;defines"/>
                <owl:someValuesFrom rdf:resource="&api4kp;DefinedConcept"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment>a definition is associated to a concept that is (implicitly) defined by the definition itself</rdfs:comment>
        <rdfs:label>definition</rdfs:label>
        <skos:definition>a work of knowledge that captures necessary and sufficient conditions to recognize something</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;DescriptiveGrammar">
        <rdfs:subClassOf rdf:resource="&api4kp;Grammar"/>
        <rdfs:label>descriptive grammar</rdfs:label>
        <rdfs:seeAlso>https://www.teachingenglish.org.uk/article/descriptive-grammar</rdfs:seeAlso>
        <skos:definition>a grammar that documents how a language is actually used</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;DescriptiveMarkupLanguage">
        <rdfs:subClassOf rdf:resource="&api4kp;MarkupLanguage"/>
        <rdfs:label>declarative markup language</rdfs:label>
        <skos:definition>markup language used to express structural or semantic knowledge</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;EncodedKnowledgeExpression">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:comment>A concrete expression such that the atomic syntactic elements of that expression are encoded in a way that makes them suitable to be engraved on a carrier medium</rdfs:comment>
        <rdfs:label>encoded knowledge expression</rdfs:label>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;Encoding">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeProcessingMethodSpecification"/>
        <rdfs:label>encoding</rdfs:label>
        <rdfs:seeAlso>https://en.wikipedia.org/wiki/Code</rdfs:seeAlso>
        <rdfs:seeAlso>https://en.wikipedia.org/wiki/Encoding_(memory)</rdfs:seeAlso>
        <skos:definition>method for converting a concrete (knowledge) expression into a from that is suitable to be engraved on a carrier of choice</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;FlattenedKnowledgeResource">
        <owl:equivalentClass>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;flattening-of"/>
                <owl:someValuesFrom rdf:resource="&api4kp;CompositeKnowledgeResource"/>
            </owl:Restriction>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;DeconstructableKnowledgeResource"/>
        <rdfs:label>flattened knowledge resource</rdfs:label>
        <skos:definition>knowledge resource that is obtained from a composite knowledge resource by means of some flattening operation</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;FormalGrammar">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;Grammar"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;conceptualizes"/>
                        <owl:someValuesFrom>
                            <owl:Class>
                                <owl:intersectionOf rdf:parseType="Collection">
                                    <rdf:Description rdf:about="&api4kp;Syntax"/>
                                    <owl:Restriction>
                                        <owl:onProperty rdf:resource="&api4kp;uses-language"/>
                                        <owl:someValuesFrom rdf:resource="&api4kp;FormalLanguage"/>
                                    </owl:Restriction>
                                </owl:intersectionOf>
                            </owl:Class>
                        </owl:someValuesFrom>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;Grammar"/>
        <rdfs:label>formal grammar</rdfs:label>
        <skos:definition>A grammar such there exists at least one syntax that uses a formal language and is a faithful expression of that grammar</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;FormalLanguage">
        <rdfs:subClassOf rdf:resource="&api4kp;ConstructedLanguage"/>
        <rdfs:label xml:lang="en">formal logic language</rdfs:label>
        <skos:definition>language equipped with a formal, declarative, logic-based semantics</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;Grammar">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;KnowledgeAsset"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;captures"/>
                        <owl:someValuesFrom rdf:resource="&lcc-lr;Language"/>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;ConstructiveDefinition"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;conceptualizes"/>
                <owl:someValuesFrom rdf:resource="&api4kp;Syntax"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment>If a grammar X formalizes a Language L, and X is expressed by an abstract syntax S, L is &apos;specified by&apos; S.</rdfs:comment>
        <rdfs:comment>Language Specifications are expressed by syntaxes and realized by (formal) grammars</rdfs:comment>
        <rdfs:label>grammar</rdfs:label>
        <skos:altLabel>Combinatorial Information Encoding System</skos:altLabel>
        <skos:definition>A conceptualization of the set of rules and constraints that define (the valid sentences of) a language</skos:definition>
    </owl:Class>
 
    <owl:Class rdf:about="&api4kp;GranularityOperationClassifier">
        <rdfs:subClassOf rdf:resource="&api4kp;OperationClassifier"/>
        <rdfs:label>granularity operation classifier (aspect)</rdfs:label>
        <skos:definition>classifier based on the decomposability of an operation into simpler operations</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&lcc-lr;Identifier">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeElement"/>
        <skos:note>Identifers are resolved to exactly 1 entity, and express the concept that abstracts that entity</skos:note>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;InformationProcessingActivity">
        <rdfs:subClassOf rdf:resource="&api4kp;Activity"/>
        <rdfs:label>information processing activity</rdfs:label>
        <skos:definition>activity that has at least one information object as input</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;InformationProcessingTask">
        <rdfs:subClassOf rdf:resource="&api4kp;DefinedConcept"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;archetypes"/>
                <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeActivity"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;defined-by"/>
                <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeProcessingMethodSpecification"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;archetypes"/>
                <owl:allValuesFrom rdf:resource="&api4kp;KnowledgeActivity"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment>Tasks can be subclassed according to the kind of methods they follow. Complex (non atomic) tasks can also be defined in terms of a plan that organizes the sub-tasks</rdfs:comment>
        <rdfs:label>knowledge processing task</rdfs:label>
        <skos:definition>The conceptual abstraction of any knowledge processing activity</skos:definition>
        <skos:scopeNote>this class is intended to be limited to tasks regarding the processing of knowledge. As such it should always be narrower than the general notion of &apos;task&apos; usually defined in upper ontologies</skos:scopeNote>
    </owl:Class>
 
    <owl:Class rdf:about="&api4kp;Knowledge">
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;is-about"/>
                <owl:someValuesFrom rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;part-of"/>
                <owl:someValuesFrom rdf:resource="&api4kp;Knowledge"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label xml:lang="en">knowledge</rdfs:label>
        <skos:definition>The cognition (know-what), pragmatics (know-how) and understanding (know-why) - about the nature and/or behaviour of some Thing</skos:definition>
        <skos:definition>A finite, complex association of one or more Concepts, intended as generically dependent representational units.</skos:definition>
        <skos:scopeNote>A Piece of Knowledge must be interpreted as a generically dependent continuant (GDC): an instance is the (abstract) information content that any agent can represent internally, or that any artifact can carry, without depending on any one specific agent or carrier. As such, pieces of knowledge correspond to the class of equivalence of the internal and/or carried representations, across different agents and/or carriers. 
Members of that class - e.g. the knowledge as internally represented by one specific agent  - are specifically dependent continuants (SDC). Specifically dependent continuants may realize the knowledge with some variation in practice, but are not of interest until communicated and diffused again, possibly as a variation/derivation/evolution of the original knowledge. Hence, the API4KP notion of Knowledge focuses on GDC, recognizing the role of individual SDCs.</skos:scopeNote>
	</owl:Class>
    
    <owl:Class rdf:about="&api4kp;KnowledgeActivity">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;InformationProcessingActivity"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;involves"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeCarrier"/>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;archetyped-by"/>
                <owl:someValuesFrom rdf:resource="&api4kp;InformationProcessingTask"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;uses-method"/>
                <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeProcessingMethodSpecification"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label>knowledge processing activity</rdfs:label>
        <skos:definition>Any Activity that involves the participation of a Knowledge Carrier as a product, tool, aid or background resource. The Knowledge Carrier carries the Knowledge which plays the role of information object in this context</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;KnowledgeArtifact">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeCarrier"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;product-of"/>
                <owl:someValuesFrom rdf:resource="&api4kp;Activity"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment>As a concrete information carrier, it is expressed in some language, using a concrete notation, and is an exemplar of the class of artifacts that corresponds to a specific type of Manifestation</rdfs:comment>
        <rdfs:label xml:lang="en">knowledge artifact</rdfs:label>
        <rdfs:label>material knowledge carrier</rdfs:label>
        <skos:definition>A digital or physical object that carries (copy of) one or more serialized Knowledge Expressions.</skos:definition>
        <skos:scopeNote>In FRBR, classes of artifacts are defined intensionally, using &apos;universals&apos; (&apos;species&apos;) which are themselves instances of the class Manifestation.

In OWL-DL, it is not possible to express at the same time the extensional definition (different subclasses of Knowledge Artifact) and its intensional counterpart (different individuals, instances of Manifestation), other than using punning. For this reason, the notion of Manifestation is not explicitly modelled</skos:scopeNote>
    </owl:Class>
 
    <owl:Class rdf:about="&api4kp;KnowledgeArtifactReplicationActivity">
        <rdfs:subClassOf rdf:resource="&api4kp;Activity"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;has-product"/>
                <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeArtifact"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;involves"/>
                <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeManifestation"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;makes-use-of"/>
                <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeArtifact"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label>knowledge artifact replication activity</rdfs:label>
        <skos:altLabel>replication activity</skos:altLabel>
        <skos:definition>The act of producing a Knowledge Artifact, using another Artifact as an input, such that the two are exemplars of the same Knowledge Manifestation</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;KnowledgeArtifactRepository">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeProcessingFunction"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;function-of"/>
                <owl:someValuesFrom>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;stores"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeArtifact"/>
                    </owl:Restriction>
                </owl:someValuesFrom>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label>knowledge artifact repository</rdfs:label>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;KnowledgeAsset">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:subClassOf rdf:resource="&api4kp;WorkOfKnowledge"/>
        <rdfs:label>knowledge asset</rdfs:label>
        <skos:definition>knowledge resource that is a (snapshot of a) work of knowledge that is represented by means of at least one knowledge representation.

The asset, an abstract entity, corresponds to the class of equivalence of all variant representations of the same work of knowledge</skos:definition>
    </owl:Class>
	
	<owl:Class rdf:about="&api4kp;KnowledgeAssetSurrogate">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:label>knowledge asset surogate</rdfs:label>
        <skos:definition>***TODO***</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;KnowledgeCarrier">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;carries"/>
                <owl:someValuesFrom>
                    <owl:Class>
                        <owl:intersectionOf rdf:parseType="Collection">
                            <rdf:Description rdf:about="&api4kp;ConcreteExpression"/>
                            <owl:Restriction>
                                <owl:onProperty rdf:resource="&api4kp;representation-of"/>
                                <owl:someValuesFrom rdf:resource="&api4kp;Knowledge"/>
                            </owl:Restriction>
                        </owl:intersectionOf>
                    </owl:Class>
                </owl:someValuesFrom>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label>knowledge carrier</rdfs:label>
        <skos:definition>The medium that supoprts an engraving of (an encoding of) a concrete, serialized knowledge expression</skos:definition>
        <skos:scopeNote>From the perspective of an agent, this class includes external carriers, such as documents and files, as well as internal carriers, such as neural patterns and/or digital memories</skos:scopeNote>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;KnowledgeConstructionActivity">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;KnowledgeActivity"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;has-product"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;StructuredKnowledgeResource"/>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeActivity"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;targets"/>
                <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeResource"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label>knowledge construction activity</rdfs:label>
        <skos:definition>the class of activities that involve structured knowledge resources as products</skos:definition>
    </owl:Class>
 
    <owl:Class rdf:about="&api4kp;KnowledgeElement">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeFragment"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;expresses"/>
                <owl:qualifiedCardinality rdf:datatype="http://www.w3.org/2001/XMLSchema#nonNegativeInteger">1</owl:qualifiedCardinality>
                <owl:onClass rdf:resource="&api4kp;AtomicConcept"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label>knowledge expression element</rdfs:label>
        <rdfs:seeAlso>http://www.w3.org/ns/lemon/ontolex#LexicalEntry</rdfs:seeAlso>
        <skos:definition>fragment that expresses exactly one concept in a given interpretation context</skos:definition>
        <skos:note>knowledge expression elements are the leaves of an expression&apos;s AST, and as such are derived from (a subset of) the tokens into which a concrete expression is broken during its parsing.</skos:note>
    </owl:Class>
 
    <owl:Class rdf:about="&api4kp;KnowledgeExpression">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;uses-language"/>
                <owl:someValuesFrom rdf:resource="&lcc-lr;Language"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;uses-syntax"/>
                <owl:someValuesFrom rdf:resource="&api4kp;AbstractSyntax"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <owl:disjointUnionOf rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;AbstractExpression"/>
            <rdf:Description rdf:about="&api4kp;ConcreteExpression"/>
        </owl:disjointUnionOf>
        <rdfs:comment>Expressions can be abstract or concrete, depending on their conformance to the constraints that specify either an abstract, as opposed to a concrete, syntax for the language used to express the Work</rdfs:comment>
        <rdfs:label xml:lang="en">knowledge expression</rdfs:label>
        <skos:definition>The expression of a Work, constrained by an information encoding system such as the abstract syntax of a grammar, a schema or a (meta)model</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;KnowledgeFragment">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;AbstractExpression"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;proper-part-of"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeRepresentation"/>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;AbstractExpression"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;expresses"/>
                <owl:someValuesFrom>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;proper-part-of"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;WorkOfKnowledge"/>
                    </owl:Restriction>
                </owl:someValuesFrom>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;knowledge-representation-of"/>
                <owl:someValuesFrom>
                    <owl:Class>
                        <owl:complementOf rdf:resource="&api4kp;WorkOfKnowledge"/>
                    </owl:Class>
                </owl:someValuesFrom>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment>Fragments express proper parts of a Work of Knowledge</rdfs:comment>
        <rdfs:label>knowledge fragment</rdfs:label>
        <skos:altLabel>knowledge representation fragment</skos:altLabel>
        <skos:definition>A proper part of a Knowledge Representation that is not a Representation of a Work of Knowledge itself</skos:definition>
    </owl:Class>
 
    <owl:Class rdf:about="&api4kp;KnowledgeManifestation">
        <rdfs:subClassOf rdf:resource="&api4kp;DefinedConcept"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;archetypes"/>
                <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeCarrier"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment>All the exemplars of a given manifestation are copies (replicas) of each other. Conversely, given an exemplar of a manifestation, if that exemplar is copied (replicated), the copy will be an exemplar of the same manifestation</rdfs:comment>
        <rdfs:comment>The original exemplar is called a &apos;master copy&apos;</rdfs:comment>
        <rdfs:label>knowledge manifestation</rdfs:label>
        <skos:definition>The archetypical concept that abstracts a class of Knowledge Artifacts, defining the common qualities - including the concrete expression(s) carried by the artifacts, and the form used to encode and engrave the expression in each artifact of that class.</skos:definition>
    </owl:Class>
 
    <owl:Class rdf:about="&api4kp;KnowledgeProcessingFunction">
        <rdfs:subClassOf rdf:resource="&api4kp;DefinedConcept"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;associated-to"/>
                <owl:someValuesFrom rdf:resource="&api4kp;InformationProcessingTask"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;associated-to"/>
                <owl:someValuesFrom>
                    <owl:Class>
                        <owl:unionOf rdf:parseType="Collection">
                            <rdf:Description rdf:about="&api4kp;AgentiveRole"/>
                            <rdf:Description rdf:about="&api4kp;PassiveRole"/>
                        </owl:unionOf>
                    </owl:Class>
                </owl:someValuesFrom>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment>in general: &quot;the purpose for which something is designed or exists&quot;</rdfs:comment>
        <rdfs:label>(knowledge processing) function</rdfs:label>
        <skos:definition>concept that defines the purpose on an entity, manifested as it plays a certain role and realized through the execution of certain tasks</skos:definition>
        <skos:scopeNote>not to be confused with the notion of function in mathematics</skos:scopeNote>
        <skos:scopeNote>this class is intended to be limited to functions regarding the processing of knowledge. As such it should always be narrower than the general notion of &apos;function&apos; usually defined in upper ontologies</skos:scopeNote>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;KnowledgeProcessingMethodSpecification">
        <rdfs:subClassOf rdf:resource="&api4kp;Definition"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;conceptualizes"/>
                <owl:someValuesFrom rdf:resource="&api4kp;Specification"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;defines"/>
                <owl:someValuesFrom rdf:resource="&api4kp;InformationProcessingTask"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;uses-concept"/>
                <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeProcessingTechnique"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label>knowledge processing method specification</rdfs:label>
        <skos:definition>a conceptualization that defines how to perform some knowledge processing task. 
As such, it is expressed by means of a specification, and leverages some knowledge processing technique</skos:definition>
        <skos:example>A way to predict a risk factor that is based on a logistic regression model.</skos:example>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;KnowledgeProcessingPlan">
        <rdfs:subClassOf rdf:resource="&api4kp;ConstructiveDefinition"/>
        <rdfs:comment>process plans can be imperative or adaptive, descriptive or prescriptive.

As constructive definitions, they can be used to recognize activities from a given trace, or as specifications for the execution of future activities</rdfs:comment>
        <rdfs:label>knowledge processing plan</rdfs:label>
        <skos:altLabel>structured process plan</skos:altLabel>
        <skos:definition>the definition of the tasks that are necessary (and possibly sufficient) to perform an activity of a given kind, in order to achieve some goals, possibly with more or less prescriptive constraints e.g. on the (relative) ordering, roles of the performers, and execution modalities</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;KnowledgeProcessingTechnique">
        <rdfs:subClassOf rdf:resource="&api4kp;DefinedConcept"/>
        <rdfs:label>(knowledge processing) technique</rdfs:label>
        <skos:definition>Techniques are &apos;bodies of specialized procedures and methods used in some field&apos;. Knowledge processing techniques are specifically leveraged in knowledge processing activities: in particular, techniques are part of the methods that define those tasks.</skos:definition>
        <skos:example>Artificial Intelligence driven techniques in general, as a concept to be refined</skos:example>
        <skos:example>Natural Language Processing</skos:example>
    </owl:Class>
 
    <owl:Class rdf:about="&api4kp;KnowledgeRepresentation">
        <rdfs:subClassOf rdf:resource="&api4kp;AbstractExpression"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;expresses"/>
                <owl:someValuesFrom rdf:resource="&api4kp;WorkOfKnowledge"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment>By definition, an information object that is about (an intellectual work that is about) some form of knowledge about something</rdfs:comment>
        <rdfs:label xml:lang="en">knowledge representation</rdfs:label>
        <skos:altLabel>representation of knowledge</skos:altLabel>
        <skos:definition>The Expression of some Work of Knowledge in the Abstract Syntax of some language</skos:definition>
        <skos:example>the specification of the allgorithm for the extraction of the square root of a number in some programming language such as Java (version 8)</skos:example>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;KnowledgeRepresentationAndReasoningLanguage">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;FormalLanguage"/>
                    <rdf:Description rdf:about="&api4kp;MachineExecutableLanguage"/>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty>
                    <rdf:Description>
                        <owl:inverseOf rdf:resource="&api4kp;uses-language"/>
                    </rdf:Description>
                </owl:onProperty>
                <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeExpression"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label xml:lang="en">KRR Language</rdfs:label>
        <skos:definition>Language for knowledge representation and automated reasoning. 

KRR Languages are formal, and usually designed to be parsed and computed by a (running) software using tractable amounts of resources.</skos:definition>
        <skos:example>Prolog</skos:example>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;KnowledgeResource">
        <rdfs:label>knowledge resource</rdfs:label>
        <skos:definition>An immutable, identifiable, versionable knowledge endeavor - ***TODO***</skos:definition>
        <rdfs:label>knowledge endeavour</rdfs:label>
        <skos:altLabel>knowledge source</skos:altLabel>
        <skos:definition>Endurant that embeds, directly or indirectly, some Piece of Knowledge</skos:definition>
    </owl:Class>
 
    <owl:Class rdf:about="&api4kp;KnowledgeResourceDescription">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;KnowledgeRepresentation"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;is-about"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeResource"/>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeRepresentation"/>
        <rdfs:comment>For the purpose of knowledge management and delivery, from the perspective of the described resource, the description can be considered &apos;metadata&apos;</rdfs:comment>
        <rdfs:label xml:lang="en">knowledge resource description</rdfs:label>
        <skos:definition>Representation of Knowledge that contains information about another Resource.</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;KnowledgeStructuringActivity">
        <rdfs:label>knowledge structuring activity</rdfs:label>
        <skos:definition>activity that organizes other resources, producing a structure</skos:definition>
        <skos:note>The structuring resource is &apos;structured&apos; by definition. The input resources become &apos;structured resources&apos;, and structured with each other, as a consequence of this activity if not already structured</skos:note>
    </owl:Class>
 
    <owl:Class rdf:about="&api4kp;KnowledgeSurrogate">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;KnowledgeArtifact"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;carries"/>
                        <owl:someValuesFrom>
                            <owl:Class>
                                <owl:intersectionOf rdf:parseType="Collection">
                                    <rdf:Description rdf:about="&api4kp;ConcreteExpression"/>
                                    <owl:Restriction>
                                        <owl:onProperty rdf:resource="&api4kp;serialization-of"/>
                                        <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeResourceDescription"/>
                                    </owl:Restriction>
                                </owl:intersectionOf>
                            </owl:Class>
                        </owl:someValuesFrom>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:label xml:lang="en">knowledge surrogate</rdfs:label>
        <skos:altLabel>knowledge resource surrogate</skos:altLabel>
        <skos:definition>A Knowledge Artifact that carries the serialization of a Knowledge Resource Description</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;KnowledgeableAgent">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;Agent"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;internally-represents"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;Knowledge"/>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;Agent"/>
        <rdfs:label>knowledgeable agent</rdfs:label>
        <skos:definition>An Agent that internally represents some (piece of) Knowledge</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&lcc-lr;Language">
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;specifies"/>
                <owl:someValuesFrom rdf:resource="&api4kp;Grammar"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment>All languages have a grammar, which specifies how to construct valid sentences through combinations of atomic tokens (e.g. words) from a common vocabulary expressed in that language.</rdfs:comment>
        <rdfs:comment>The extension of the language is the actual set of valid sentences. This notion of language &apos;per se&apos;, instead, captures an agent&apos;s knowledge of how to use the language to express or acquire information, including Knowledge</rdfs:comment>
        <skos:note>The Knowledge of how to create and/or reconstruct sentences within a certain class - the class of all the possible sentences that follow the rules of the language (regardless of the existence of an explict Notation that formalizes it).</skos:note>
        <skos:example>Contemporary Italian, as of 2017, as established by the Italian &apos;Accademia della Crusca&apos;</skos:example>
        <skos:example>The 2nd officially released version of the Ontology Web Language</skos:example>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;Lexicon">
        <rdfs:subClassOf rdf:resource="&api4kp;Knowledge"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;has-part"/>
                <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeElement"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label>lexicon</rdfs:label>
        <rdfs:label>vocabulary</rdfs:label>
        <rdfs:seeAlso>https://en.wikipedia.org/wiki/Lexicon</rdfs:seeAlso>
        <skos:definition>Conceptual structure that organizes the lexical entries used or supported by a person, language, or branch of knowledge</skos:definition>
        <skos:note>&apos;Lexicon&apos; and &apos;Vocabulary&apos; are overloaded terms, whose sense is very context-specific</skos:note>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;MachineExecutableLanguage">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;ComputableLanguage"/>
                    <rdf:Description rdf:about="&api4kp;MachineReadableLanguage"/>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;ComputableLanguage"/>
        <rdfs:label xml:lang="en">machine-executable language</rdfs:label>
        <skos:definition>Language that can be interpreted by a machine, and the machine will be able to act based on that representation</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;MachineReadableLanguage">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;ConstructedLanguage"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;internally-represented-by"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;ArtificialAgent"/>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;SerializableLanguage"/>
        <rdfs:label xml:lang="en">machine-readable language</rdfs:label>
        <skos:definition>Language such that Expressions that use it can be internally represented (i.e. parsed and interpreted) by a software at runtime</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;MarkupLanguage">
        <rdfs:subClassOf rdf:resource="&api4kp;MachineReadableLanguage"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;embedsLanguage"/>
                <owl:someValuesFrom rdf:resource="&lcc-lr;Language"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <dct:source>https://www.merriam-webster.com/dictionary/markup%20language</dct:source>
        <rdfs:comment>Informally (and more narrowly) defined as &quot;a system (such as HTML or SGML) for marking or tagging a document that indicates its logical structure (such as paragraphs) and gives instructions for its layout on the page especially for electronic transmission and display&quot;</rdfs:comment>
        <rdfs:label>markup language</rdfs:label>
        <skos:definition>Language L1 that embeds another language L2 by design.
When an expression E in L2 is marked with fragments F in L1, the subject of F is either E itself or the manifestation of E, as opposed to the subject of E.

That is: if E is about X, F is about E and not X</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;MasterKnowledgeArtifact">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeArtifact"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;stored-in"/>
                <owl:someValuesFrom>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;has-function"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeArtifactRepository"/>
                    </owl:Restriction>
                </owl:someValuesFrom>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;used-in"/>
                <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeArtifactReplicationActivity"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label>knowledge artifact master copy</rdfs:label>
        <skos:altLabel>master copy</skos:altLabel>
        <skos:definition>A Knowledge Artifact that is used as the primary source in replication activities.</skos:definition>
    </owl:Class>
 
    <owl:Class rdf:about="&api4kp;MetaFormat">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;MachineReadableLanguage"/>
                    <owl:Class>
                        <owl:complementOf>
                            <owl:Restriction>
                                <owl:onProperty rdf:resource="&api4kp;has-wordstock"/>
                                <owl:someValuesFrom rdf:resource="&api4kp;Lexicon"/>
                            </owl:Restriction>
                        </owl:complementOf>
                    </owl:Class>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;MachineReadableLanguage"/>
        <rdfs:comment>A purely syntactic language that is used in the definition of markup languages</rdfs:comment>
        <rdfs:label>meta-format</rdfs:label>
        <rdfs:seeAlso>https://www.w3.org/standards/webarch/metaformats</rdfs:seeAlso>
        <skos:definition>A (meta) language without any specific lexicon</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;MetaFormatSerializableLanguage">
        <rdfs:subClassOf rdf:resource="&api4kp;MachineReadableLanguage"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;uses-concept"/>
                <owl:someValuesFrom rdf:resource="&api4kp;MetaFormat"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label>meta-format serializable language</rdfs:label>
        <skos:definition>machine readable, serializable language that has at least one concrete syntax that is based on a meta-format</skos:definition>
        <skos:example>any language that supports an XML based serialization, such as BPMN or RuleML</skos:example>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;Model">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeRepresentation"/>
        <rdfs:comment>TODO: Does OMG have a standard def?</rdfs:comment>
        <rdfs:label>model</rdfs:label>
        <skos:definition>expression of knowledge about the structure (static) and/or behaviour (dynamic) of a system, constructed to emulate, study and/or predict certain aspects of that system</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&lcc-lr;NaturalLanguage">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&lcc-lr;Language"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;described-by"/>
                        <owl:someValuesFrom>
                            <owl:Class>
                                <owl:intersectionOf rdf:parseType="Collection">
                                    <rdf:Description rdf:about="&api4kp;Syntax"/>
                                    <owl:Restriction>
                                        <owl:onProperty rdf:resource="&api4kp;expresses"/>
                                        <owl:someValuesFrom rdf:resource="&api4kp;DescriptiveGrammar"/>
                                    </owl:Restriction>
                                </owl:intersectionOf>
                            </owl:Class>
                        </owl:someValuesFrom>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:comment>Natural languages can be written, oral and pictorial - as differentiated by the choice of alphabet used to construct the ‘sentences’ of the languages</rdfs:comment>
        <skos:note>Language that is not structured. 
A language for which it is not possible to define an explicit, tractable grammar such that, for each sentence constructed out of all the possible combination of the words in that language&apos;s dictionary, always allows to distinguish and disambiguate all and only the sentences that are valid syntactically and semantically.</skos:note>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;Ontology">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeRepresentation"/>
        <rdfs:comment>TODO: Does OMG have a standard def?</rdfs:comment>
        <rdfs:label>ontology</rdfs:label>
        <skos:definition>descriptive expression of knowledge about the structural, necessary aspects of a domain of interest</skos:definition>
    </owl:Class>
 
    <owl:Class rdf:about="&api4kp;OperationClassifier">
        <rdfs:subClassOf rdf:resource="&api4kp;Classifier"/>
        <rdfs:label>operation classifier (aspect)</rdfs:label>
        <skos:definition>A higher order category which specifically applies to (API4KP) operations</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;OutputArityClassifier">
        <rdfs:subClassOf rdf:resource="&api4kp;SyntacticClassifier"/>
        <rdfs:label>output arity classifier (aspect)</rdfs:label>
    </owl:Class>
 
    <owl:Class rdf:about="&api4kp;ParseTree">
        <rdfs:subClassOf rdf:resource="&api4kp;AbstractExpression"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;formalizes"/>
                <owl:someValuesFrom>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;has-subject"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;ConcreteExpression"/>
                    </owl:Restriction>
                </owl:someValuesFrom>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label>Parse Tree</rdfs:label>
        <rdfs:label>concrete syntax tree</rdfs:label>
        <skos:definition>The representation, in terms of a tree, of the internal structure of a Concrete (Knowledge) Expression, according to some Concrete Syntax</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;ParsedExpression">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeExpression"/>
        <rdfs:comment>An expression that has been superimposed with a parse tree proving that (and how) the expression is a valid sentence of a given language, according to a concrete syntax of that language</rdfs:comment>
        <rdfs:label>parsed knowedge expression</rdfs:label>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;PassiveRole">
        <rdfs:subClassOf rdf:resource="&api4kp;DefinedConcept"/>
        <rdfs:label>passive role</rdfs:label>
        <skos:definition>Role played by an entity that participates passively in an activity, e.g. as a resource, or as the subject/target of the activity</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;PrescriptiveGrammar">
        <rdfs:subClassOf rdf:resource="&api4kp;Grammar"/>
        <rdfs:label>prescriptive grammar</rdfs:label>
        <rdfs:seeAlso>https://www.teachingenglish.org.uk/article/descriptive-grammar</rdfs:seeAlso>
        <skos:definition>a grammar that describes how a language should be used correctly</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;PresentationalMarkupLanguage">
        <rdfs:subClassOf rdf:resource="&api4kp;MarkupLanguage"/>
        <rdfs:label>presentational markup language</rdfs:label>
        <skos:definition>Markup language that guides the realization of manifestations of the marked expression</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;PrimitiveConcept">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;AtomicConcept"/>
                    <owl:Class>
                        <owl:complementOf>
                            <owl:Restriction>
                                <owl:onProperty rdf:resource="&api4kp;capturedBy"/>
                                <owl:someValuesFrom rdf:resource="&api4kp;WorkOfKnowledge"/>
                            </owl:Restriction>
                        </owl:complementOf>
                    </owl:Class>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;AtomicConcept"/>
        <rdfs:comment>When expressed in OWL, primitive concepts are not the subject of subClassOf or equivalentClass axioms</rdfs:comment>
        <rdfs:label>primitive concept</rdfs:label>
        <skos:definition>A concept that does not need an explicit definition. 

Concepts of this kind are usually acquired through experience, and/or are considered part of Common Knowledge (Knowledge that every agent possesses, and is expected by other agents to possess). 

As such, they live at the boundaries of the semantic graphs that constitute a work of knowledge, and their definition (if any exists) does not need to be communicated</skos:definition>
        <skos:scopeNote>The notion of &apos;Common Knowledge&apos; may be universal, or be scoped to a domain. That is, certain concepts can be expected to be represented by any intelligent agent (e.g. the concept of the number &quot;one&quot;), while others may depend on the nature of the agent (e.g. feelings are natural to human beings, not so much to computer agents), or on their expertise (e.g. the notion of &quot;physiology&quot; requires expertise in medicine).

This class of &apos;primitive&apos; concept does not make a distinction, and assumes that &apos;primitive&apos; is based on the context in which the ontology is used.</skos:scopeNote>
    </owl:Class>
 
    <owl:Class rdf:about="&api4kp;ProceduralMarkupLanguage">
        <rdfs:subClassOf rdf:resource="&api4kp;MarkupLanguage"/>
        <rdfs:label>procedural markup language</rdfs:label>
        <skos:definition>markup language used to express procedural or behavioral knowledge</skos:definition>
    </owl:Class>
 
    <owl:Class rdf:about="&api4kp;Profile">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;AbstractSyntax"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;profiles"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;AbstractSyntax"/>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;AbstractSyntax"/>
        <rdfs:label>profile</rdfs:label>
        <skos:altLabel>Linguistic Profile</skos:altLabel>
        <skos:definition>A profile is a restricted abstract syntax that limits the expressvity of (the admissible expression in) a given language, usually to reduce the complexity, narrow the scope, and/or improve the semantic clarity of the expressions</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;RelationshipClassifier">
        <rdfs:subClassOf rdf:resource="&api4kp;Classifier"/>
        <rdfs:label>relationship classifier (aspect)</rdfs:label>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;ResolvableConcept">
        <rdfs:subClassOf rdf:resource="&api4kp;DefinedConcept"/>
        <rdfs:comment>Defined Concept that has some Operational (constructive) Definition, i.e. a definition that can be applied to a situation, to infer whether or not the concept archetypes that Situation</rdfs:comment>
        <rdfs:label>resolvable concept</rdfs:label>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;SelfContainedKnowledgeArtifact">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeArtifact"/>
        <rdfs:comment>As an instance of a self-contained manifestation, it carries all the expression(s) needed to understand its content, if any dependencies exist</rdfs:comment>
        <rdfs:label xml:lang="en">self-contained knowledge artifact</rdfs:label>
        <skos:definition>A Knowledge Artifact that is an exemplar of a self-contained manifestation</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;SemanticClassifier">
        <rdfs:subClassOf rdf:resource="&api4kp;OperationClassifier"/>
        <rdfs:label>semantic operation classifier (aspect)</rdfs:label>
        <skos:definition>aspects of an operation based on its computational semantics</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;SemanticRelationshipClassifier">
        <rdfs:subClassOf rdf:resource="&api4kp;RelationshipClassifier"/>
        <rdfs:label>semantic relationship classifier (aspect)</rdfs:label>
        <skos:definition>classifier based on the formal semantics of a relationship</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;SerializableLanguage">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&lcc-lr;Language"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;specified-by"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;Serialization"/>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&lcc-lr;Language"/>
        <rdfs:label>serializable language</rdfs:label>
        <skos:definition>language that has at least one concrete syntax</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;Serialization">
        <rdfs:subClassOf rdf:resource="&api4kp;Syntax"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;externalizes"/>
                <owl:someValuesFrom rdf:resource="&api4kp;AbstractSyntax"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label xml:lang="en">concrete syntax</rdfs:label>
        <skos:altLabel>serialization</skos:altLabel>
        <skos:definition>The set of structures and/or rules that constrain the parse tree of a valid sentence of a language, itself expressed in some (meta) language</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;SideEffectClassifier">
        <rdfs:subClassOf rdf:resource="&api4kp;SemanticClassifier"/>
        <rdfs:label>side-effect classifier (aspect)</rdfs:label>
        <skos:definition>aspects based on an operation&apos;s (not) causing side effects as part of its computation</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;Software">
        <rdfs:subClassOf rdf:resource="&api4kp;ConcreteExpression"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;uses-language"/>
                <owl:someValuesFrom rdf:resource="&api4kp;MachineExecutableLanguage"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:label>software</rdfs:label>
        <skos:definition>Concrete Expression, in an executable language, that specifies and/or directs the behaviour of a (virtual) machine</skos:definition>
        <skos:note>A Software is a &quot;Performance Plan&quot; for a (virtual) machine to execute</skos:note>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;Specification">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeRepresentation"/>
        <rdfs:comment>TODO: Does OMG have a standard def?</rdfs:comment>
        <rdfs:label>specification</rdfs:label>
        <skos:definition>prescriptive expression of knowledge about the expected and/or required behavior of a system</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;StructuralMarkupLanguage">
        <rdfs:subClassOf rdf:resource="&api4kp;MarkupLanguage"/>
        <rdfs:label>structural markup language</rdfs:label>
        <skos:definition>markup language L that is used in (the expression of) decomposable structured expressions, such that the structural frame of that expression is expressed in L, while the components are expressed in the embedded language(s)</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;StructuredKnowledgeResource">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;KnowledgeResource"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;structured-with"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeRepresentation"/>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <owl:equivalentClass>
            <owl:Class>
                <owl:unionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;StructuringKnowledgeRepresentation"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;structured-by"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;StructuringKnowledgeRepresentation"/>
                    </owl:Restriction>
                </owl:unionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:label xml:lang="en">structured knowledge resource</rdfs:label>
        <skos:definition>Knowledge Resource that is structured with some other Resource, i.e. it is either a structure or is structured by a structure</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;StructuringKnowledgeRepresentation">
        <owl:equivalentClass>
            <owl:Class>
                <owl:intersectionOf rdf:parseType="Collection">
                    <rdf:Description rdf:about="&api4kp;KnowledgeRepresentation"/>
                    <rdf:Description rdf:about="&api4kp;StructuredKnowledgeResource"/>
                    <owl:Restriction>
                        <owl:onProperty rdf:resource="&api4kp;structures"/>
                        <owl:someValuesFrom rdf:resource="&api4kp;StructuredKnowledgeResource"/>
                    </owl:Restriction>
                </owl:intersectionOf>
            </owl:Class>
        </owl:equivalentClass>
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeRepresentation"/>
        <rdfs:subClassOf rdf:resource="&api4kp;StructuredKnowledgeResource"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;expresses"/>
                <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeProcessingPlan"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment>Structures can be set-oriented, tree-oriented, or both. A set-oriented structure defines a composite by aggregation of similar resources, while a tree-oriented structure defines composites by means of composition of Resources into other Resources.</rdfs:comment>
        <rdfs:label>structure</rdfs:label>
        <rdfs:label>structuring knowledge representation</rdfs:label>
        <skos:definition>A knowledge representation that defines - declaratively or procedurally - how other resources can be aggregated or composed into a composite resource</skos:definition>
        <skos:scopeNote>Structures can describe or define how Resources at any level of abstraction are combined. However, structures themselves are modelled at the level of representations (expressions), to emphasize their explicit nature and their use in communication and information processing</skos:scopeNote>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;SyntacticClassifier">
        <rdfs:subClassOf rdf:resource="&api4kp;OperationClassifier"/>
        <rdfs:label>syntactic operation classifier (aspect)</rdfs:label>
        <skos:definition>aspects of an operation based on its signature</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;Syntax">
        <rdfs:subClassOf rdf:resource="&api4kp;Specification"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;expresses"/>
                <owl:someValuesFrom rdf:resource="&api4kp;Grammar"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment>Syntaxes are &apos;reconstructed&apos; from natural languages, but designed in the case of constructed languages</rdfs:comment>
        <rdfs:comment>This notion of Syntax is defined at the Abstract Expression Level. 
For comparison, see &apos;Notation&apos; and &apos;Formal Grammar&apos;</rdfs:comment>
        <rdfs:label xml:lang="en">syntax</rdfs:label>
        <skos:definition>The set of structures and/or rules that constrain a valid sentence of a language, itself expressed in some (meta) language</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;TypeClassifier">
        <rdfs:subClassOf rdf:resource="&api4kp;SyntacticClassifier"/>
        <rdfs:label>I/O type classifier (aspect)</rdfs:label>
        <skos:definition>Syntactic aspect that specifies the type of input and/or output.</skos:definition>
    </owl:Class>
    
    <owl:Class rdf:about="&api4kp;VersionedIdentifier">
        <rdfs:subClassOf rdf:resource="&lcc-lr;Identifier"/>
        <rdfs:label>versioned identifier</rdfs:label>
        <skos:definition>Identifier of a particular version of a given entity, i.e. the particular configuration of (mutable) qualities of a given entity over a specific period of time</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;VersionedKnowledgeResource">
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeResource"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&lcc-lr;isIdentifiedBy"/>
                <owl:someValuesFrom rdf:resource="&api4kp;VersionedIdentifier"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment>versioned endeavors are identified explicitly by a version identifier</rdfs:comment>
        <rdfs:label>versioned knowledge resource</rdfs:label>
        <skos:definition>endeavor that is part of a series - a temporally ordered chain of endeavors of the same type, related by the fact that each successor is a revision of its predecessor.</skos:definition>
    </owl:Class>

    <owl:Class rdf:about="&api4kp;WorkOfKnowledge">
        <rdfs:subClassOf rdf:resource="&api4kp;Knowledge"/>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;captures"/>
                <owl:someValuesFrom rdf:resource="&api4kp;Knowledge"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;has-part"/>
                <owl:someValuesFrom rdf:resource="&api4kp;AtomicConcept"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:subClassOf>
            <owl:Restriction>
                <owl:onProperty rdf:resource="&api4kp;product-of"/>
                <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeActivity"/>
            </owl:Restriction>
        </rdfs:subClassOf>
        <rdfs:comment>A Work of Knowledge can be conceptualized in terms of an Abstract  Semantic Graph</rdfs:comment>
        <rdfs:comment>The Activity that generates the Intellectual Work consists in identifying, selecting and preparing the Concepts that are intended to be expressed and communicated. Even if it is generated in the &apos;mind&apos; of an agent, by the time the work of knowledge is socialized, it becomes a generically dependent continuant</rdfs:comment>
        <rdfs:comment>The term &apos;Work of Knowledge&apos; mirrors the term &apos;Work of Art&apos;</rdfs:comment>
        <rdfs:label>work of knowledge</rdfs:label>
        <rdfs:seeAlso>http://www.tlainc.com/articl134.htm</rdfs:seeAlso>
        <rdfs:seeAlso>https://en.wikipedia.org/wiki/Abstract_semantic_graph</rdfs:seeAlso>
        <skos:definition>An Explicit (i.e. non Tacit) Piece of Knowledge that is the result of one or more (possibly non-deterministic) graph productions applied to some (chosen Piece of) Knowledge, intended for representation and/or communication.</skos:definition>
        <skos:definition>An Intellectual Work that captures some (piece of) Knowledge, which itself has a subject that can be reflected in the Work by means of one or more explicitly marked, &apos;focal&apos; concepts</skos:definition>
        <skos:example>a formal Ontology, prepared by an ontologist, and engineered to answer a number of competency questions, independently of the actual formal language used to express it.</skos:example>
        <skos:example>a lecture, as the outcome of a teacher&apos;s choosing and organizing the topics so they can be explained to the students.</skos:example>
        <skos:example>a statistician&apos;s description of a stochastic process by means of a Markov model</skos:example>
        <skos:example>an algorithm for the extraction of the square root of a number</skos:example>
        <skos:example>the content of a newspaper article, as determined by a journalist deciding what facts and/or opinions to include, and how to present them, independently of any editorial and/or formatting</skos:example>
        <rdfs:comment>Initially, it generically depends on some Agent, that carries its internal representation, until it can be carried by a concrete manifestation and possibly assimilated by other Agents.</rdfs:comment>
        <rdfs:comment>Semiotically, an Intellectual Work is situated at the Meaning level: It needs to be expressed (and carried by a medium) in order to be communicated</rdfs:comment>
        <skos:definition>The conceptual outcome of an intellectual creative activity. It has as a subject, and thus is about, some kind of Thing (e.g. idea, person, place, etc..).</skos:definition>
    </owl:Class>
    

    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // Individuals
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    <owl:NamedIndividual rdf:about="&api4kp;atomic-operation">
        <rdf:type rdf:resource="&api4kp;GranularityOperationClassifier"/>
        <rdfs:label>atomic</rdfs:label>
        <rdfs:seeAlso>https://en.wikipedia.org/wiki/Composite_pattern</rdfs:seeAlso>
        <skos:definition>atomic operations cannot be further decomposed into simpler actions witihin a given framework that defines the boundaries of atomicity (as opposed to sub-atomic components)</skos:definition>
    </owl:NamedIndividual>
    
    <owl:NamedIndividual rdf:about="&api4kp;augmented-operation">
        <rdf:type rdf:resource="&api4kp;OutputArityClassifier"/>
        <rdfs:label>augmented</rdfs:label>
        <skos:definition>operation that has one primary output argument, and one or more (optional) secondary arguments</skos:definition>
    </owl:NamedIndividual>
    
    <owl:NamedIndividual rdf:about="&api4kp;binary-operation">
        <rdf:type rdf:resource="&api4kp;ArityClassifier"/>
        <rdfs:label>binary</rdfs:label>
        <rdfs:seeAlso>https://en.wikipedia.org/wiki/Arity</rdfs:seeAlso>
        <skos:definition>operation that has exactly two input arguments</skos:definition>
    </owl:NamedIndividual>
    
    <owl:NamedIndividual rdf:about="&api4kp;chainable-operation">
        <rdf:type rdf:resource="&api4kp;SyntacticClassifier"/>
        <rdfs:label>chainable</rdfs:label>
        <skos:definition>a safe, idempotent operation that has one primary input (unary) and at most one primary output, so that is can composed into a chain of invocations</skos:definition>
    </owl:NamedIndividual>
    
    <owl:NamedIndividual rdf:about="&api4kp;composite-operation">
        <rdf:type rdf:resource="&api4kp;GranularityOperationClassifier"/>
        <rdfs:label>composite</rdfs:label>
        <rdfs:seeAlso>https://en.wikipedia.org/wiki/Composite_pattern</rdfs:seeAlso>
        <skos:altLabel>complex</skos:altLabel>
        <skos:definition>composite operations can be decomposed into a sequence of simpler operations, composite or atomic</skos:definition>
    </owl:NamedIndividual>
    
    <owl:NamedIndividual rdf:about="&api4kp;formal-relationship">
        <rdf:type rdf:resource="&api4kp;SemanticRelationshipClassifier"/>
        <rdfs:label>formal</rdfs:label>
        <skos:definition>A relationship that uniquely depends on the qualities of the related individuals, without any mediating entity (event, activity, etc...)</skos:definition>
    </owl:NamedIndividual>
    
    <owl:NamedIndividual rdf:about="&api4kp;idempotent-operation">
        <rdf:type rdf:resource="&api4kp;SemanticClassifier"/>
        <rdfs:label>idempotent</rdfs:label>
        <rdfs:seeAlso>https://en.wikipedia.org/wiki/Idempotence</rdfs:seeAlso>
        <skos:definition>an idempotent operation can be composed with itself multiple times, without changing the result of the first, initial application.</skos:definition>
        <skos:example>abs(abs(x)) = abs(x)
where abs is the function that extracts the absolute value of a number</skos:example>
    </owl:NamedIndividual>
    
    <owl:NamedIndividual rdf:about="&api4kp;material-relationship">
        <rdf:type rdf:resource="&api4kp;SemanticRelationshipClassifier"/>
        <rdfs:label>material</rdfs:label>
        <skos:definition>A relationship that is mediated by a supporting third entity (e.g. event, action, etc...)</skos:definition>
    </owl:NamedIndividual>
    
    <owl:NamedIndividual rdf:about="&api4kp;multi-output-operation">
        <rdf:type rdf:resource="&api4kp;OutputArityClassifier"/>
        <rdfs:label>multi output</rdfs:label>
        <skos:definition>an operations that has two or more output arguments</skos:definition>
    </owl:NamedIndividual>
    
    <owl:NamedIndividual rdf:about="&api4kp;nary-operation">
        <rdf:type rdf:resource="&api4kp;ArityClassifier"/>
        <rdfs:label>n-ary</rdfs:label>
        <rdfs:seeAlso>https://en.wikipedia.org/wiki/Arity</rdfs:seeAlso>
        <skos:definition>an operation that takes a number n of arguments</skos:definition>
    </owl:NamedIndividual>
    
    <owl:NamedIndividual rdf:about="&api4kp;nullary-operation">
        <rdf:type rdf:resource="&api4kp;ArityClassifier"/>
        <rdfs:label>nullary</rdfs:label>
        <rdfs:seeAlso>https://en.wikipedia.org/wiki/Arity</rdfs:seeAlso>
        <skos:definition>an operation that has no explicit input arguments</skos:definition>
    </owl:NamedIndividual>
    
    <owl:NamedIndividual rdf:about="&api4kp;pure-operation">
        <rdf:type rdf:resource="&api4kp;SideEffectClassifier"/>
        <rdfs:label>pure</rdfs:label>
        <rdfs:seeAlso>https://en.wikipedia.org/wiki/Side_effect_(computer_science)</rdfs:seeAlso>
        <skos:altLabel>side effect free</skos:altLabel>
        <skos:definition>an operation without side effects</skos:definition>
    </owl:NamedIndividual>
    
    <owl:NamedIndividual rdf:about="&api4kp;side-effecful-operation">
        <rdf:type rdf:resource="&api4kp;SideEffectClassifier"/>
        <rdfs:label>side effectful</rdfs:label>
        <rdfs:seeAlso>https://en.wikipedia.org/wiki/Side_effect_(computer_science)</rdfs:seeAlso>
        <skos:definition>an operation with side effects other than the computation of the returned output values</skos:definition>
    </owl:NamedIndividual>
    
    <owl:NamedIndividual rdf:about="&api4kp;single-output-operation">
        <rdf:type rdf:resource="&api4kp;OutputArityClassifier"/>
        <rdfs:label>single output</rdfs:label>
        <skos:definition>an operation that has exactly one output argument</skos:definition>
    </owl:NamedIndividual>
    
    <owl:NamedIndividual rdf:about="&api4kp;ternary-operation">
        <rdf:type rdf:resource="&api4kp;ArityClassifier"/>
        <rdfs:label>ternary</rdfs:label>
        <rdfs:seeAlso>https://en.wikipedia.org/wiki/Arity</rdfs:seeAlso>
        <skos:definition>an operation that has exactly three input arguments</skos:definition>
    </owl:NamedIndividual>
    
    <owl:NamedIndividual rdf:about="&api4kp;unary-operation">
        <rdf:type rdf:resource="&api4kp;ArityClassifier"/>
        <rdfs:label>unary</rdfs:label>
        <rdfs:seeAlso>https://en.wikipedia.org/wiki/Arity</rdfs:seeAlso>
        <skos:definition>an operation that has a single input argument</skos:definition>
    </owl:NamedIndividual>

    <owl:NamedIndividual rdf:about="&api4kp;void-operation">
        <rdf:type rdf:resource="&api4kp;OutputArityClassifier"/>
        <rdfs:label>void</rdfs:label>
        <skos:definition>an operation that has no ouptut arguments</skos:definition>
    </owl:NamedIndividual>
    

    <!-- 
    ///////////////////////////////////////////////////////////////////////////////////////
    //
    // General axioms
    //
    ///////////////////////////////////////////////////////////////////////////////////////
     -->

    <owl:Restriction>
        <owl:onProperty rdf:resource="&api4kp;has-wordstock"/>
        <owl:someValuesFrom rdf:resource="&api4kp;Lexicon"/>
        <rdfs:subClassOf rdf:resource="&lcc-lr;Language"/>
    </owl:Restriction>
    <owl:Restriction>
        <owl:onProperty rdf:resource="&api4kp;performs"/>
        <owl:someValuesFrom rdf:resource="&api4kp;KnowledgeActivity"/>
        <rdfs:subClassOf rdf:resource="&api4kp;KnowledgeableAgent"/>
    </owl:Restriction>
    <rdf:Description>
        <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#AllDisjointClasses"/>
        <owl:members rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;KnowledgeAsset"/>
            <rdf:Description rdf:about="&api4kp;KnowledgeArtifact"/>
            <rdf:Description rdf:about="&api4kp;KnowledgeExpression"/>
        </owl:members>
    </rdf:Description>
    <rdf:Description>
        <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#AllDifferent"/>
        <owl:distinctMembers rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;atomic-operation"/>
            <rdf:Description rdf:about="&api4kp;composite-operation"/>
        </owl:distinctMembers>
    </rdf:Description>
    <rdf:Description>
        <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#AllDifferent"/>
        <owl:distinctMembers rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;binary-operation"/>
            <rdf:Description rdf:about="&api4kp;nullary-operation"/>
            <rdf:Description rdf:about="&api4kp;ternary-operation"/>
            <rdf:Description rdf:about="&api4kp;unary-operation"/>
        </owl:distinctMembers>
    </rdf:Description>
    <rdf:Description>
        <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#AllDifferent"/>
        <owl:distinctMembers rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;formal-relationship"/>
            <rdf:Description rdf:about="&api4kp;material-relationship"/>
        </owl:distinctMembers>
    </rdf:Description>
    <rdf:Description>
        <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#AllDifferent"/>
        <owl:distinctMembers rdf:parseType="Collection">
            <rdf:Description rdf:about="&api4kp;pure-operation"/>
            <rdf:Description rdf:about="&api4kp;side-effecful-operation"/>
        </owl:distinctMembers>
    </rdf:Description>

</rdf:RDF>
