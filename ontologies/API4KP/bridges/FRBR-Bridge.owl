Prefix(:=<http://www.omg.org/spec/API4KP/FRBR-Bridge#>)
Prefix(dc:=<http://www.dublin#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(frbr:=<http://purl.org/vocab/frbr/core#>)
Prefix(froo:=<http://iflastandards.info/ns/fr/frbr/frbroo/>)
Prefix(know:=<http://www.omg.org/spec/API4KP/core#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(skos:=<http://www.w3.org/2004/02/skos/core#>)


Ontology(<http://www.omg.org/spec/API4KP/FRBR-Bridge>
<http://www.omg.org/spec/API4KP/2017/12/FRBR-Bridge>
Import(<http://www.omg.org/spec/API4KP/2017/12/core>)
Import(<http://purl.org/spar/frbr>)

Declaration(Class(froo:F14_Individual_Work))
Declaration(Class(froo:F15_Complex_Work))
Declaration(Class(froo:F1_Work))
Declaration(Class(froo:F22_Self-Contained_Expression))
Declaration(Class(froo:F23_Expression_Fragment))
Declaration(Class(froo:F24_Publication_Expression))
Declaration(Class(froo:F25_Performance_Plan))
Declaration(Class(froo:F2_Expression))
Declaration(Class(froo:F31_Performance))
Declaration(Class(froo:F3_Manifestation_Product_Type))
Declaration(Class(froo:F4_Manifestation_Singleton))
Declaration(Class(froo:F53_Material_Copy))
Declaration(Class(froo:F54_Utilized_Information_Carrier))
Declaration(Class(froo:F5_Item))
Declaration(Class(frbr:Endeavour))
Declaration(Class(frbr:Expression))
Declaration(Class(frbr:Item))
Declaration(Class(frbr:Manifestation))
Declaration(Class(frbr:ResponsibleEntity))
Declaration(Class(frbr:Subject))
Declaration(Class(frbr:Work))
Declaration(Class(:Manifestation))
Declaration(Class(:SelfContainedManifestation))
Declaration(Class(know:Endeavour))
Declaration(Class(know:Manifestation))
Declaration(ObjectProperty(froo:R10_has_member))
Declaration(ObjectProperty(froo:R10i_is_member_of))
Declaration(ObjectProperty(froo:R15_has_fragment))
Declaration(ObjectProperty(froo:R15i_is_fragment_of))
Declaration(ObjectProperty(froo:R1_is_logical_successor_of))
Declaration(ObjectProperty(froo:R1i_has_successor))
Declaration(ObjectProperty(froo:R25_performed))
Declaration(ObjectProperty(froo:R2_is_derivative_of))
Declaration(ObjectProperty(froo:R2i_has_derivative))
Declaration(ObjectProperty(froo:R3_is_realised_in))
Declaration(ObjectProperty(froo:R3i_realises))
Declaration(ObjectProperty(froo:R40_has_representative_expression))
Declaration(ObjectProperty(froo:R40i_is_representative_expression_for))
Declaration(ObjectProperty(froo:R41_has_rep_manifestation_product_type))
Declaration(ObjectProperty(froo:R41i_is_rep_manifestation_product_type_for))
Declaration(ObjectProperty(froo:R42_is_representative_manifestation_singleton_for))
Declaration(ObjectProperty(froo:R42i_has_representative_manifestation_singleton))
Declaration(ObjectProperty(froo:R4_carriers_provided_by))
Declaration(ObjectProperty(froo:R4i_comprises_carriers_of))
Declaration(ObjectProperty(froo:R5_has_component))
Declaration(ObjectProperty(froo:R5i_is_component_of))
Declaration(ObjectProperty(froo:R6_carries))
Declaration(ObjectProperty(froo:R6i_is_carried_by))
Declaration(ObjectProperty(froo:R7_is_example_of))
Declaration(ObjectProperty(froo:R7i_has_example))
Declaration(ObjectProperty(froo:R9_is_realised_in))
Declaration(ObjectProperty(froo:R9i_realises))
Declaration(ObjectProperty(frbr:complement))
Declaration(ObjectProperty(frbr:embodiment))
Declaration(ObjectProperty(frbr:embodimentOf))
Declaration(ObjectProperty(frbr:exemplar))
Declaration(ObjectProperty(frbr:exemplarOf))
Declaration(ObjectProperty(frbr:part))
Declaration(ObjectProperty(frbr:partOf))
Declaration(ObjectProperty(frbr:realization))
Declaration(ObjectProperty(frbr:realizationOf))
Declaration(ObjectProperty(frbr:relatedEndeavour))
Declaration(ObjectProperty(frbr:responsibleEntity))
Declaration(ObjectProperty(frbr:responsibleEntityOf))
Declaration(ObjectProperty(frbr:revision))
Declaration(ObjectProperty(frbr:revisionOf))
Declaration(ObjectProperty(frbr:subject))
Declaration(ObjectProperty(frbr:successor))
Declaration(ObjectProperty(frbr:successorOf))
Declaration(ObjectProperty(frbr:supplement))
Declaration(ObjectProperty(know:endorsed-by))
Declaration(ObjectProperty(know:endorses))
Declaration(ObjectProperty(know:executed))
Declaration(DataProperty(froo:CLP57_should_have_number_of_parts))
Declaration(AnnotationProperty(dc:creator))
Declaration(AnnotationProperty(dc:date))

############################
#   Object Properties
############################

# Object Property: froo:R10_has_member (has member)

AnnotationAssertion(rdfs:comment froo:R10_has_member "This property associates an instance of F15 Complex Work with an instance of F1 Work that forms part of it.
"@en)
AnnotationAssertion(rdfs:label froo:R10_has_member "has member"@en)
SubObjectPropertyOf(froo:R10_has_member frbr:part)
InverseObjectProperties(froo:R10_has_member froo:R10i_is_member_of)
ObjectPropertyDomain(froo:R10_has_member froo:F15_Complex_Work)
ObjectPropertyRange(froo:R10_has_member froo:F1_Work)

# Object Property: froo:R10i_is_member_of (is member of)

AnnotationAssertion(rdfs:comment froo:R10i_is_member_of "
"@en)
AnnotationAssertion(rdfs:label froo:R10i_is_member_of "is member of"@en)
SubObjectPropertyOf(froo:R10i_is_member_of frbr:partOf)
ObjectPropertyDomain(froo:R10i_is_member_of froo:F1_Work)
ObjectPropertyRange(froo:R10i_is_member_of froo:F15_Complex_Work)

# Object Property: froo:R15_has_fragment (has fragment)

AnnotationAssertion(rdfs:comment froo:R15_has_fragment "This property associates the fragment of an expression and the expression of which it is a fragment.
"@en)
AnnotationAssertion(rdfs:label froo:R15_has_fragment "has fragment"@en)
SubObjectPropertyOf(froo:R15_has_fragment frbr:part)
InverseObjectProperties(froo:R15_has_fragment froo:R15i_is_fragment_of)
ObjectPropertyDomain(froo:R15_has_fragment froo:F2_Expression)
ObjectPropertyRange(froo:R15_has_fragment froo:F23_Expression_Fragment)

# Object Property: froo:R15i_is_fragment_of (is fragment of)

AnnotationAssertion(rdfs:comment froo:R15i_is_fragment_of "
"@en)
AnnotationAssertion(rdfs:label froo:R15i_is_fragment_of "is fragment of"@en)
SubObjectPropertyOf(froo:R15i_is_fragment_of frbr:partOf)
ObjectPropertyDomain(froo:R15i_is_fragment_of froo:F23_Expression_Fragment)
ObjectPropertyRange(froo:R15i_is_fragment_of froo:F2_Expression)

# Object Property: froo:R1_is_logical_successor_of (is logical successor of)

AnnotationAssertion(rdfs:comment froo:R1_is_logical_successor_of "This property associates an instance of F1 Work which logically continues the content of another instance of F1 Work with the latter.
"@en)
AnnotationAssertion(rdfs:label froo:R1_is_logical_successor_of "is logical successor of"@en)
SubObjectPropertyOf(froo:R1_is_logical_successor_of frbr:successorOf)
InverseObjectProperties(froo:R1_is_logical_successor_of froo:R1i_has_successor)
ObjectPropertyDomain(froo:R1_is_logical_successor_of froo:F1_Work)
ObjectPropertyRange(froo:R1_is_logical_successor_of froo:F1_Work)

# Object Property: froo:R1i_has_successor (has successor)

AnnotationAssertion(rdfs:comment froo:R1i_has_successor "
"@en)
AnnotationAssertion(rdfs:label froo:R1i_has_successor "has successor"@en)
SubObjectPropertyOf(froo:R1i_has_successor frbr:successor)
ObjectPropertyDomain(froo:R1i_has_successor froo:F1_Work)
ObjectPropertyRange(froo:R1i_has_successor froo:F1_Work)

# Object Property: froo:R25_performed (performed)

AnnotationAssertion(rdfs:label froo:R25_performed "performed")
ObjectPropertyDomain(froo:R25_performed froo:F31_Performance)
ObjectPropertyRange(froo:R25_performed froo:F25_Performance_Plan)

# Object Property: froo:R2_is_derivative_of (is derivative of)

AnnotationAssertion(rdfs:comment froo:R2_is_derivative_of "This property associates an instance of F1 Work which modifies the content of another instance of F1 Work with the latter. The property R2.1 has type of this property allows for specifying the kind of derivation, such as adaptation, summarisation etc.
"@en)
AnnotationAssertion(rdfs:label froo:R2_is_derivative_of "is derivative of"@en)
ObjectPropertyDomain(froo:R2_is_derivative_of froo:F1_Work)
ObjectPropertyRange(froo:R2_is_derivative_of froo:F1_Work)

# Object Property: froo:R2i_has_derivative (has derivative)

AnnotationAssertion(rdfs:comment froo:R2i_has_derivative "
"@en)
AnnotationAssertion(rdfs:label froo:R2i_has_derivative "has derivative"@en)
ObjectPropertyDomain(froo:R2i_has_derivative froo:F1_Work)
ObjectPropertyRange(froo:R2i_has_derivative froo:F1_Work)

# Object Property: froo:R3_is_realised_in (is realised in)

AnnotationAssertion(rdfs:comment froo:R3_is_realised_in "This property associates an instance of F22 Self-Contained Expression with an instance of F1 Work.
This property expresses the association that exists between an expression (F22) and the work that this expression conveys. The semantics of the association will be different depending on what specific subtype of F1 Work the work is an instance of. If the work is an instance of F14 Individual Work, the F22 Self-Contained Expression completely conveys the individual work. If the work is an instance of F15 Complex Work, the F22 Self-Contained Expression conveys an alternative member of the complex work.
Our factual knowledge of how a given work is realised into an expression is often limited and this property makes it possible to express the association between instances of F22 Self-Contained Expression and the work it conveys without using the more developed paths.
The property R3.1 has type: E55 Type allows for specifying the role played by the referred to expression in the overall bibliographic history of the work (e.g., ‘progenitor expression’, on which all other expressions of the same work are based; ‘reference for canonical citations’, in the sense of the HuCit ontology developed by Matteo Romanello and Michele Pasin; ‘earliest draft’, ‘intermediate draft’, ‘final clean draft’, ‘princeps edition’, etc.).
"@en)
AnnotationAssertion(rdfs:label froo:R3_is_realised_in "is realised in"@en)
SubObjectPropertyOf(froo:R3_is_realised_in frbr:realization)
InverseObjectProperties(froo:R3_is_realised_in froo:R3i_realises)
ObjectPropertyDomain(froo:R3_is_realised_in froo:F1_Work)
ObjectPropertyRange(froo:R3_is_realised_in froo:F22_Self-Contained_Expression)

# Object Property: froo:R3i_realises (realises)

AnnotationAssertion(rdfs:comment froo:R3i_realises "
"@en)
AnnotationAssertion(rdfs:label froo:R3i_realises "realises"@en)
SubObjectPropertyOf(froo:R3i_realises frbr:realizationOf)
ObjectPropertyDomain(froo:R3i_realises froo:F22_Self-Contained_Expression)
ObjectPropertyRange(froo:R3i_realises froo:F1_Work)

# Object Property: froo:R40_has_representative_expression (has representative expression)

AnnotationAssertion(rdfs:comment froo:R40_has_representative_expression "This property identifies an instance of F22 Self-Contained Expression that has been chosen as the most characteristic expression of the instance of F1 Work of which it is an expression. There is no other semantic implication to this notion of being characteristic than to be an adequate candidate to uniquely identify the Work realized by it. Prototypically, this is the instance of F22 Self-Contained Expression that is deemed characteristic of an instance of F15 Complex Work.
Typically, any expression that is not regarded as “representative” for the work it expresses, would require a controlled access point, with qualifiers specifying the differences between that expression and a representative expression, although this may not always be done in practice. The title of a Work may not be one taken from a representative expression.
A given work can have more than one representative expression, provided the differences between these expressions are not deemed “substantial.” If the anticipated needs of users are not considered to call for bibliographic distinctions between variant expressions of a work, then even expressions that differ significantly from each other can be regarded as equally representative for the work. (See FRBR: Final Report, p. 19-20).
A given expression can be deemed representative for a work with regard to some of its aspects (e.g., the text contained in an edition the title proper of which reads ‘The tragicall historie of HAMLET Prince of Denmarke’, and the language of that text), and not representative for it with regard to some other aspects (e.g., the title proper ‘The tragicall historie of HAMLET Prince of Denmarke’ itself, which, being different from the title that is regarded as “representative” for Shakespeare’s work, will require the use of a controlled access point).
R40 has representative expression is a shortcut of the more developed path F1 Work R50i was assigned by F42 Representative Expression Assignment R51 assigned F2 Expression.

"@en)
AnnotationAssertion(rdfs:label froo:R40_has_representative_expression "has representative expression"@en)
SubObjectPropertyOf(froo:R40_has_representative_expression frbr:realization)
InverseObjectProperties(froo:R40_has_representative_expression froo:R40i_is_representative_expression_for)
ObjectPropertyDomain(froo:R40_has_representative_expression froo:F1_Work)
ObjectPropertyRange(froo:R40_has_representative_expression froo:F22_Self-Contained_Expression)

# Object Property: froo:R40i_is_representative_expression_for (is representative expression for)

AnnotationAssertion(rdfs:comment froo:R40i_is_representative_expression_for "
"@en)
AnnotationAssertion(rdfs:label froo:R40i_is_representative_expression_for "is representative expression for"@en)
SubObjectPropertyOf(froo:R40i_is_representative_expression_for frbr:realizationOf)
ObjectPropertyDomain(froo:R40i_is_representative_expression_for froo:F22_Self-Contained_Expression)
ObjectPropertyRange(froo:R40i_is_representative_expression_for froo:F1_Work)

# Object Property: froo:R41_has_rep_manifestation_product_type (has rep manifestation product type)

AnnotationAssertion(rdfs:comment froo:R41_has_rep_manifestation_product_type "This property identifies an instance of F3 Manifestation Product Type that has been chosen as the most characteristic Manifestation Product Type of the instance of F2 Expression of which it is a manifestation.
Identifying an instance of F3 Manifestation Product Type that is representative for an instance of F2 Expression makes it possible in turn to identify an instance of F2 Expression that is representative for an instance of F1 Work, and to decide what should be regarded as the title of the work.
The title of an Expression may not be one taken from a representative Manifestation Product Type or Manifestation Singleton.
A given expression can have more than one Representative Manifestation Product Type.
R41 has representative manifestation product type is a shortcut of the more developed path F2 Expression R48i was assigned by F41 Representative Manifestation Assignment R49 assigned F3 Manifestation Product Type.

"@en)
AnnotationAssertion(rdfs:label froo:R41_has_rep_manifestation_product_type "has rep manifestation product type"@en)
SubObjectPropertyOf(froo:R41_has_rep_manifestation_product_type frbr:embodiment)
InverseObjectProperties(froo:R41_has_rep_manifestation_product_type froo:R41i_is_rep_manifestation_product_type_for)
ObjectPropertyDomain(froo:R41_has_rep_manifestation_product_type froo:F2_Expression)
ObjectPropertyRange(froo:R41_has_rep_manifestation_product_type froo:F3_Manifestation_Product_Type)

# Object Property: froo:R41i_is_rep_manifestation_product_type_for (is rep manifestation product type for)

AnnotationAssertion(rdfs:comment froo:R41i_is_rep_manifestation_product_type_for "
"@en)
AnnotationAssertion(rdfs:label froo:R41i_is_rep_manifestation_product_type_for "is rep manifestation product type for"@en)
SubObjectPropertyOf(froo:R41i_is_rep_manifestation_product_type_for frbr:embodimentOf)
ObjectPropertyDomain(froo:R41i_is_rep_manifestation_product_type_for froo:F3_Manifestation_Product_Type)
ObjectPropertyRange(froo:R41i_is_rep_manifestation_product_type_for froo:F2_Expression)

# Object Property: froo:R42_is_representative_manifestation_singleton_for (is representative manifestation singleton for)

AnnotationAssertion(rdfs:comment froo:R42_is_representative_manifestation_singleton_for "This property identifies an instance of Manifestation Singleton that has been declared as the unique representative for an instance of F2 Expression by some bibliographic agency.
This property identifies an instance of F4 Manifestation Singleton that has been chosen as the most characteristic Manifestation Singleton of the instance of F2 Expression of which it is a manifestation.
Identifying an instance of F4 Manifestation Singleton that is representative for an instance of F2 Expression makes it possible in turn to identify an instance of F2 Expression that is representative for an instance of F1 Work, and to decide what should be regarded as the title of the work.
The title of an Expression may not be one taken from a representative Manifestation Product Type or Manifestation Singleton.
A given expression can have more than one representative Manifestation Singleton.
It is a shortcut for the more developed path: F2 Expression R48i was assigned by F41 Representative Manifestation Assignment R53 assigned F4 Manifestation Singleton.

"@en)
AnnotationAssertion(rdfs:label froo:R42_is_representative_manifestation_singleton_for "is representative manifestation singleton for"@en)
SubObjectPropertyOf(froo:R42_is_representative_manifestation_singleton_for frbr:embodimentOf)
InverseObjectProperties(froo:R42_is_representative_manifestation_singleton_for froo:R42i_has_representative_manifestation_singleton)
ObjectPropertyDomain(froo:R42_is_representative_manifestation_singleton_for froo:F4_Manifestation_Singleton)
ObjectPropertyRange(froo:R42_is_representative_manifestation_singleton_for froo:F2_Expression)

# Object Property: froo:R42i_has_representative_manifestation_singleton (has representative manifestation singleton)

AnnotationAssertion(rdfs:comment froo:R42i_has_representative_manifestation_singleton "
"@en)
AnnotationAssertion(rdfs:label froo:R42i_has_representative_manifestation_singleton "has representative manifestation singleton"@en)
SubObjectPropertyOf(froo:R42i_has_representative_manifestation_singleton frbr:embodiment)
ObjectPropertyDomain(froo:R42i_has_representative_manifestation_singleton froo:F2_Expression)
ObjectPropertyRange(froo:R42i_has_representative_manifestation_singleton froo:F4_Manifestation_Singleton)

# Object Property: froo:R4_carriers_provided_by (carriers provided by)

AnnotationAssertion(rdfs:comment froo:R4_carriers_provided_by "This property associates a publication, i.e. an instance of F3 Manifestation Product Type, with an instance of F2 Expression, which all exemplars of that publication should carry, as long as they are recognised as complete exemplars of that publication. Typically, this property is observed on one exemplar of a publication, and extrapolated to all other exemplars of the same publication.
This property is a shortcut of: F2 Expression P165i is incorporated in F24 Publication Expression CLR6i should be carried by F3 Manifestation Product Type.
"@en)
AnnotationAssertion(rdfs:label froo:R4_carriers_provided_by "carriers provided by"@en)
SubObjectPropertyOf(froo:R4_carriers_provided_by frbr:embodiment)
InverseObjectProperties(froo:R4_carriers_provided_by froo:R4i_comprises_carriers_of)
ObjectPropertyDomain(froo:R4_carriers_provided_by froo:F2_Expression)
ObjectPropertyRange(froo:R4_carriers_provided_by froo:F3_Manifestation_Product_Type)

# Object Property: froo:R4i_comprises_carriers_of (comprises carriers of)

AnnotationAssertion(rdfs:comment froo:R4i_comprises_carriers_of "
"@en)
AnnotationAssertion(rdfs:label froo:R4i_comprises_carriers_of "comprises carriers of"@en)
SubObjectPropertyOf(froo:R4i_comprises_carriers_of frbr:embodimentOf)
ObjectPropertyDomain(froo:R4i_comprises_carriers_of froo:F3_Manifestation_Product_Type)
ObjectPropertyRange(froo:R4i_comprises_carriers_of froo:F2_Expression)

# Object Property: froo:R5_has_component (has component)

AnnotationAssertion(rdfs:comment froo:R5_has_component "This property associates an F2 Expression X with a structural component Y that conveys in itself the complete concept of a work that is member of (R10) the overall work realized by X.
It does not cover the relationship that exists between pre-existing expressions that are re-used in a new, larger expression and that new, larger expression. Such a relationship is modelled by P165 incorporates.
"@en)
AnnotationAssertion(rdfs:label froo:R5_has_component "has component"@en)
SubObjectPropertyOf(froo:R5_has_component frbr:part)
InverseObjectProperties(froo:R5_has_component froo:R5i_is_component_of)
ObjectPropertyDomain(froo:R5_has_component froo:F2_Expression)
ObjectPropertyRange(froo:R5_has_component froo:F22_Self-Contained_Expression)

# Object Property: froo:R5i_is_component_of (is component of)

AnnotationAssertion(rdfs:comment froo:R5i_is_component_of "
"@en)
AnnotationAssertion(rdfs:label froo:R5i_is_component_of "is component of"@en)
SubObjectPropertyOf(froo:R5i_is_component_of frbr:partOf)
ObjectPropertyDomain(froo:R5i_is_component_of froo:F22_Self-Contained_Expression)
ObjectPropertyRange(froo:R5i_is_component_of froo:F2_Expression)

# Object Property: froo:R6_carries (carries)

AnnotationAssertion(rdfs:comment froo:R6_carries "This property associates an instance of F54 Utilised Information Carrier with the unique instance of F24 Publication Expression it carries.
"@en)
AnnotationAssertion(rdfs:label froo:R6_carries "carries"@en)
ObjectPropertyDomain(froo:R6_carries froo:F54_Utilized_Information_Carrier)
ObjectPropertyRange(froo:R6_carries froo:F24_Publication_Expression)

# Object Property: froo:R6i_is_carried_by (is carried by)

AnnotationAssertion(rdfs:comment froo:R6i_is_carried_by "
"@en)
AnnotationAssertion(rdfs:label froo:R6i_is_carried_by "is carried by"@en)
ObjectPropertyDomain(froo:R6i_is_carried_by froo:F24_Publication_Expression)
ObjectPropertyRange(froo:R6i_is_carried_by froo:F54_Utilized_Information_Carrier)

# Object Property: froo:R7_is_example_of (is example of)

AnnotationAssertion(rdfs:comment froo:R7_is_example_of "This property associates a publication with one of its exemplars.
It is a shortcut of the more developed path: F5 Item R28i was produced by F32 Carrier Production R26 produced things of type (was produced by): F3 Manifestation Product Type.
"@en)
AnnotationAssertion(rdfs:label froo:R7_is_example_of "is example of"@en)
SubObjectPropertyOf(froo:R7_is_example_of frbr:exemplarOf)
InverseObjectProperties(froo:R7_is_example_of froo:R7i_has_example)
ObjectPropertyDomain(froo:R7_is_example_of froo:F5_Item)
ObjectPropertyRange(froo:R7_is_example_of froo:F3_Manifestation_Product_Type)

# Object Property: froo:R7i_has_example (has example)

AnnotationAssertion(rdfs:comment froo:R7i_has_example "
"@en)
AnnotationAssertion(rdfs:label froo:R7i_has_example "has example"@en)
SubObjectPropertyOf(froo:R7i_has_example frbr:exemplar)
ObjectPropertyDomain(froo:R7i_has_example froo:F3_Manifestation_Product_Type)
ObjectPropertyRange(froo:R7i_has_example froo:F5_Item)

# Object Property: froo:R9_is_realised_in (is realised in)

AnnotationAssertion(rdfs:comment froo:R9_is_realised_in "This property associates an F14 Individual Work with the unique F22 Self-Contained Expression that completely conveys it.
It is a shortcut for the more developed path: F14 Individual Work R19i was realised through F28 Expression Creation R17 created F22 Self-Contained Expression.
"@en)
AnnotationAssertion(rdfs:label froo:R9_is_realised_in "is realised in"@en)
SubObjectPropertyOf(froo:R9_is_realised_in froo:R3_is_realised_in)
ObjectPropertyDomain(froo:R9_is_realised_in froo:F14_Individual_Work)
ObjectPropertyRange(froo:R9_is_realised_in froo:F22_Self-Contained_Expression)

# Object Property: froo:R9i_realises (realises)

AnnotationAssertion(rdfs:comment froo:R9i_realises "
"@en)
AnnotationAssertion(rdfs:label froo:R9i_realises "realises"@en)
SubObjectPropertyOf(froo:R9i_realises froo:R3i_realises)
ObjectPropertyDomain(froo:R9i_realises froo:F22_Self-Contained_Expression)
ObjectPropertyRange(froo:R9i_realises froo:F14_Individual_Work)

# Object Property: frbr:partOf (is part of)

EquivalentObjectProperties(frbr:partOf know:part-of)

# Object Property: know:carried-by (carried by)

SubObjectPropertyOf(know:carried-by frbr:relatedEndeavour)

# Object Property: know:carries (carries)

SubObjectPropertyOf(know:carries frbr:relatedEndeavour)

# Object Property: know:conceptualizes (conceptualizes)

SubObjectPropertyOf(know:conceptualizes frbr:realization)

# Object Property: know:depends-on (depends on)

SubObjectPropertyOf(know:depends-on frbr:relatedEndeavour)

# Object Property: know:endorsed-by (know:endorsed-by)

SubObjectPropertyOf(know:endorsed-by frbr:responsibleEntity)
ObjectPropertyDomain(know:endorsed-by frbr:Work)
ObjectPropertyRange(know:endorsed-by frbr:ResponsibleEntity)

# Object Property: know:endorses (know:endorses)

SubObjectPropertyOf(know:endorses frbr:responsibleEntityOf)
ObjectPropertyDomain(know:endorses frbr:ResponsibleEntity)
ObjectPropertyRange(know:endorses frbr:Work)

# Object Property: know:executed (know:executed)

SubObjectPropertyOf(know:executed froo:R25_performed)

# Object Property: know:expresses (know:expresses)

SubObjectPropertyOf(know:expresses frbr:realizationOf)

# Object Property: know:has-later-versioned-revision (has later versioned revision)

SubObjectPropertyOf(know:has-later-versioned-revision frbr:revision)

# Object Property: know:has-subject (has subject)

SubObjectPropertyOf(know:has-subject frbr:subject)

# Object Property: know:is-later-versioned-revision-of (is later versioned revision of)

SubObjectPropertyOf(know:is-later-versioned-revision-of frbr:revisionOf)

# Object Property: know:is-serialized-in (has serialized representation in)

SubObjectPropertyOf(know:is-serialized-in frbr:relatedEndeavour)

# Object Property: know:realized-by (realized by)

SubObjectPropertyOf(know:realized-by frbr:relatedEndeavour)

# Object Property: know:realizes (realizes)

SubObjectPropertyOf(know:realizes frbr:relatedEndeavour)

# Object Property: know:serialization-of (is concrete representation of)

SubObjectPropertyOf(know:serialization-of frbr:relatedEndeavour)

# Object Property: know:serialized-into (concretely represented as)

SubObjectPropertyOf(know:serialized-into frbr:relatedEndeavour)


############################
#   Data Properties
############################

# Data Property: froo:CLP57_should_have_number_of_parts (froo:CLP57_should_have_number_of_parts)

DataPropertyDomain(froo:CLP57_should_have_number_of_parts froo:F3_Manifestation_Product_Type)



############################
#   Classes
############################

# Class: froo:F14_Individual_Work (Individual Work)

AnnotationAssertion(rdfs:comment froo:F14_Individual_Work "This class comprises works that are realised by one and only one self-contained expression, i.e., works representing the concept as expressed by precisely this expression.
Inherent to the notion of work is the completion of recognisable outcomes of the work. These outcomes, i.e. the Self-Contained Expressions, are regarded as the symbolic equivalents of Individual Works, which form the atoms of a complex work. Normally creators would characterise an outcome of a work as finished. In other cases, one could recognise an outcome of a work as complete from the elaboration or logical coherence of its content, or if there is any historical knowledge about the creator deliberately or accidentally never finishing (completing) that particular expression. In all those cases, one would regard the corresponding expression as equivalent to one Individual Work.")
AnnotationAssertion(rdfs:label froo:F14_Individual_Work "Individual Work")
EquivalentClasses(froo:F14_Individual_Work ObjectIntersectionOf(froo:F1_Work ObjectSomeValuesFrom(froo:R9_is_realised_in froo:F22_Self-Contained_Expression)))
SubClassOf(froo:F14_Individual_Work froo:F1_Work)

# Class: froo:F15_Complex_Work (Complex Work)

AnnotationAssertion(rdfs:label froo:F15_Complex_Work "Complex Work")
EquivalentClasses(froo:F15_Complex_Work ObjectIntersectionOf(froo:F1_Work ObjectSomeValuesFrom(froo:R10_has_member froo:F1_Work)))
SubClassOf(froo:F15_Complex_Work froo:F1_Work)

# Class: froo:F1_Work (Work)

AnnotationAssertion(rdfs:comment froo:F1_Work "This class comprises distinct concepts or combinations of concepts identified in artistic and intellectual expressions, such as poems, stories or musical compositions. Such concepts may appear in the course of the coherent evolution of an original idea into one or more expressions that are dominated by the original idea. A Work may be elaborated by one or more Actors simultaneously or over time. The substance of Work is ideas. A Work may have members that are works in their own right.
A Work can be either individual or complex. If it is individual its concept is completely realised in a single F22 Self-Contained Expression. If it is complex its concept is embedded in an F15 Complex Work. An F15 Complex Work consists of alternative members that are either F15 Complex Works themselves or F14 Individual Works.
A Work is the product of an intellectual process of one or more persons, yet only indirect evidence about it is at our hands. This can be contextual information such as the existence of an order for a work, reflections of the creators themselves that are documented somewhere, and finally the expressions of the work created. As ideas normally take shape during discussion, elaboration and implementation, it is not reasonable to assume that a work starts with a complete concept. In some cases, it can be very difficult or impossible to define the whole of the concept of a work at a particular time. The objective evidence for such a notion can only be based on a stage of expressions at a given time. In this sense, the sets of ideas that constitute  particular self-contained expressions may be regarded as a kind of “snap-shot” of a work.
A Work may include the concept of aggregating expressions of other works into a new expression. For instance, an anthology of poems is regarded as a work in its own right that makes use of expressions of the individual poems that have been selected and ordered as part of an intellectual process. This does not make the contents of the aggregated expressions part of this work, but only parts of the resulting expression.
"@en)
AnnotationAssertion(rdfs:label froo:F1_Work "Work"@en)
EquivalentClasses(froo:F1_Work frbr:Work)
EquivalentClasses(froo:F1_Work know:IntellectualWork)
SubClassOf(froo:F1_Work know:Endeavour)

# Class: froo:F22_Self-Contained_Expression (Self-Contained Expression)

AnnotationAssertion(rdfs:comment froo:F22_Self-Contained_Expression "This class comprises the immaterial realisations of individual works at a particular time that are regarded as a complete whole. The quality of wholeness reflects the intention of its creator that this expression should convey the concept of the work. Such a whole can in turn be part of a larger whole.
Inherent to the notion of work is the completion of recognisable outcomes of the work. These outcomes, i.e. the Self-Contained Expressions, are regarded as the symbolic equivalents of Individual Works, which form the atoms of a complex work. A Self-Contained Expression may contain expressions or parts of expressions from other work, such as citations or items collected in anthologies. Even though they are incorporated in the Self-Contained Expression, they are not regarded as becoming members of the expressed container work by their inclusion in the expression, but are rather regarded as foreign or referred to elements.
F22 Self-Contained Expression can be distinguished from F23 Expression Fragment in that an F23 Expression Fragment was not intended by its creator to make sense by itself. Normally creators would characterise an outcome of a work as finished. In other cases, one could recognise an outcome of a work as complete from the elaboration or logical coherence of its content, or if there is any historical knowledge about the creator deliberately or accidentally never finishing (completing) that particular expression. In all those cases, one would regard an expression as self-contained.")
AnnotationAssertion(rdfs:label froo:F22_Self-Contained_Expression "Self-Contained Expression")
SubClassOf(froo:F22_Self-Contained_Expression froo:F2_Expression)
DisjointClasses(froo:F22_Self-Contained_Expression froo:F23_Expression_Fragment)

# Class: froo:F23_Expression_Fragment (Expression Fragment)

AnnotationAssertion(rdfs:comment froo:F23_Expression_Fragment "This class comprises parts of Expressions and these parts are not Self-Contained Expressions themselves.
The existence of an instance of F23 Expression Fragment can be due to accident, such as loss of material over time, e.g. the only remaining manuscript of an antique text being partially eaten by worms, or due to deliberate isolation, such as excerpts taken from a text by the compiler of a collection of excerpts.
An F23 Expression Fragment is only identified with respect to its occurrence in a known or assumed whole. The size of an instance of F23 Expression Fragment ranges from more than 99% of an instance of F22 Self-Contained Expression to tiny bits (a few words from a text, one bar from a musical composition, one detail from a still image, a two-second clip from a movie, etc.).")
AnnotationAssertion(rdfs:label froo:F23_Expression_Fragment "Expression Fragment")
EquivalentClasses(froo:F23_Expression_Fragment ObjectIntersectionOf(froo:F2_Expression ObjectSomeValuesFrom(froo:R15i_is_fragment_of froo:F2_Expression)))
SubClassOf(froo:F23_Expression_Fragment froo:F2_Expression)

# Class: froo:F24_Publication_Expression (Publication Expression)

AnnotationAssertion(rdfs:label froo:F24_Publication_Expression "Publication Expression")
SubClassOf(froo:F24_Publication_Expression froo:F22_Self-Contained_Expression)

# Class: froo:F25_Performance_Plan (Performance Plan)

AnnotationAssertion(rdfs:comment froo:F25_Performance_Plan "This class comprises sets of directions to which individual performances of theatrical, choreographic, or musical works and their combinations should conform.
In the case of theatrical performances, such directions incorporate, but are not limited nor reducible to, the text of a given version of the play performed (e.g., a translated text, some passages of which are deliberately omitted, with some rephrased lines, etc.).
In the case of choreographic performances, such directions may incorporate, but are neither limited nor reducible to, the notation of choreographic movements in systems such as labanotation.
In the case of musical performances, such directions may incorporate, but are neither limited nor reducible to, the musical score. In case of electronic music, they may incorporate software instructions.
These directions may or may not completely determine the form of the intended performance. Depending on the nature of the directions, the form of the intended performance, such as the sets of movements or the sound characteristics, may or may not be predictable from the directions.
Note that a performance plan may be more or less elaborate, and may even foresee just improvisation.")
AnnotationAssertion(rdfs:label froo:F25_Performance_Plan "Performance Plan")
SubClassOf(froo:F25_Performance_Plan froo:F22_Self-Contained_Expression)

# Class: froo:F2_Expression (Expression)

AnnotationAssertion(rdfs:comment froo:F2_Expression "This class comprises the intellectual or artistic realisations of works in the form of identifiable immaterial objects, such as texts, poems, jokes, musical or choreographic notations, movement pattern, sound pattern, images, multimedia objects, or any combination of such forms that have objectively recognisable structures. The substance of F2 Expression is signs.
Expressions cannot exist without a physical carrier, but do not depend on a specific physical carrier and can exist on one or more carriers simultaneously. Carriers may include human memory.
Inasmuch as the form of F2 Expression is an inherent characteristic of the F2 Expression, any change in form (e.g., from alpha-numeric notation to spoken word, a poem created in capitals and rendered in lower case) is a new F2 Expression. Similarly, changes in the intellectual conventions or instruments that are employed to express a work (e.g., translation from one language to another) result in the creation of a new F2 Expression. Thus, if a text is revised or modified, the resulting F2 Expression is considered to be a new F2 Expression. Minor changes, such as corrections of spelling and punctuation, etc., are normally considered variations within the same F2 Expression. On a practical level, the degree to which distinctions are made between variant expressions of a work will depend to some extent on the nature of the F1 Work itself, and on the anticipated needs of users.
The genre of the work may provide an indication of which features are essential to the expression. In some cases, aspects of physical form, such as typeface and page layout, are not integral to the intellectual or artistic realisation of the work as such, and therefore are not distinctive criteria for the respective expressions. For another work, features such as layout may be essential. For instance, the author or a graphic designer may wrap a poem around an image.
An expression of a work may include expressions of other works within it. For instance, an anthology of poems is regarded as a work in its own right that makes use of expressions of the individual poems that have been selected and ordered as part of an intellectual process. This does not make the contents of the aggregated expressions part of this work, but only parts of the resulting expression.
If an instance of F2 Expression is of a specific form, such as text, image, etc., it may be simultaneously instantiated in the specific classes representing these forms in CIDOC CRM. Thereby one can make use of the more specific properties of these classes, such as language (which is applicable to instances of E33 Linguistic Object only).
"@en)
AnnotationAssertion(rdfs:label froo:F2_Expression "Expression"@en)
EquivalentClasses(froo:F2_Expression frbr:Expression)
SubClassOf(froo:F2_Expression know:Endeavour)

# Class: froo:F31_Performance (Performance)

AnnotationAssertion(rdfs:comment froo:F31_Performance "This class comprises activities that follow the directions of a performance plan, such as a theatrical play, an expression of a choreographic work or a musical work; i.e., they are intended to communicate directly or indirectly to an audience.
Such activities can be identified at various levels of granularity, and can be contiguous or not. Any individual performance (with or without intermissions) is a single instance of F31 Performance. In addition, a complete run of performances can also be seen as an instance of F31 Performance, with individual performances as parts. A complete run of performances may comprise an original run plus any of its extensions and tours.
Note that a performance plan may be more or less elaborate, and may even foresee just improvisation.")
AnnotationAssertion(rdfs:label froo:F31_Performance "Performance")

# Class: froo:F3_Manifestation_Product_Type (Manifestation Product Type)

AnnotationAssertion(rdfs:comment froo:F3_Manifestation_Product_Type "This class comprises the definitions of publication products.
An instance of F3 Manifestation Product Type is the “species”, and all copies of a given object are “specimens” of it. An instance of F3 Manifestation Product Type defines all of the features or traits that instances of F5 Item normally display in order that they may be recognised as copies of a particular publication. However, due to production problems or subsequent events, one or more instances of F5 Item may not exhibit all these features or traits; yet such instances still retain their relationship to the same instance of F3 Manifestation Product Type.
The features that characterise a given instance of F3 Manifestation Product Type include: one instance of F24 Publication Expression, containing one or more than one instance of F2 Expression, reflecting the authors’ content of the manifestation and all additional input by the publisher; and the appropriate types of physical features for that form of the object. For example, hardcover and paperback are two distinct publications (i.e. two distinct instances of F3 Manifestation Product Type) even though authorial and editorial content are otherwise identical in both publications. The activity of cataloguing aims at the most accurate listing of features or traits of an instance of F3 Manifestation Product Type that are sufficient to distinguish it from another instance of F3 Manifestation Product Type.
"@en)
AnnotationAssertion(rdfs:label froo:F3_Manifestation_Product_Type "Manifestation Product Type"@en)
SubClassOf(froo:F3_Manifestation_Product_Type know:Endeavour)

# Class: froo:F4_Manifestation_Singleton (Manifestation Singleton)

AnnotationAssertion(rdfs:comment froo:F4_Manifestation_Singleton "This class comprises physical objects that each carry an instance of F2 Expression, and that were produced as unique objects, with no siblings intended in the course of their production. It should be noted that if all but one copy of a given publication are destroyed, then that copy does not become an instance of F4 Manifestation Singleton, because it was produced together with sibling copies, even though it now happens to be unique. Examples of instances of F4 Manifestation Singleton include manuscripts, preparatory sketches and the final clean draft sent by an author or a composer to a publisher.
"@en)
AnnotationAssertion(rdfs:label froo:F4_Manifestation_Singleton "Manifestation Singleton"@en)
SubClassOf(froo:F4_Manifestation_Singleton know:Endeavour)

# Class: froo:F53_Material_Copy (Material Copy)

AnnotationAssertion(rdfs:comment froo:F53_Material_Copy "This class comprises the features created on an instance of E84 Information Carrier when an F24 Publication Expression is copied to it by an F32 Carrier Production Event. This is the typical result of an electronic publishing process.
"@en)
AnnotationAssertion(rdfs:label froo:F53_Material_Copy "Material Copy"@en)
SubClassOf(froo:F53_Material_Copy froo:F54_Utilized_Information_Carrier)

# Class: froo:F54_Utilized_Information_Carrier (Utilized Information Carrier)

AnnotationAssertion(rdfs:comment froo:F54_Utilized_Information_Carrier "This class comprises physical objects that carry one or more instances of F24 Publication Expression.
"@en)
AnnotationAssertion(rdfs:label froo:F54_Utilized_Information_Carrier "Utilized Information Carrier"@en)
SubClassOf(froo:F54_Utilized_Information_Carrier know:Endeavour)

# Class: froo:F5_Item (Item)

AnnotationAssertion(rdfs:comment froo:F5_Item "This class comprises physical objects (printed books, scores, CDs, DVDs, CD-ROMS, etc.) that carry a F24 Publication Expression and were produced by an industrial process involving an F3 Manifestation Product Type.
"@en)
AnnotationAssertion(rdfs:label froo:F5_Item "Item"@en)
EquivalentClasses(froo:F5_Item frbr:Item)
SubClassOf(froo:F5_Item froo:F54_Utilized_Information_Carrier)

# Class: frbr:Endeavour (endeavour)

EquivalentClasses(frbr:Endeavour know:Endeavour)

# Class: frbr:Manifestation (manifestation)

EquivalentClasses(frbr:Manifestation ObjectUnionOf(froo:F3_Manifestation_Product_Type froo:F4_Manifestation_Singleton))

# Class: :Manifestation (Manifestation)

AnnotationAssertion(rdfs:label :Manifestation "Manifestation"@en)
AnnotationAssertion(skos:definition :Manifestation "In accordance with the FRBR universe, an instance of Manifestation is a “species”, as opposed to the carriers, which are “specimens” of it. A Manifestation defines all of the features or traits that the instances will display in order to be recognised as individual realizations of that content.")
SubClassOf(:Manifestation know:KnowledgeEndeavour)

# Class: :SelfContainedManifestation (Self-Contained Manifestation)

AnnotationAssertion(rdfs:label :SelfContainedManifestation "Self-Contained Manifestation")
AnnotationAssertion(skos:definition :SelfContainedManifestation "A Self-Contained Manifestation is such that, for each Expression E it embodies, if that Expression E depends on another Expression F, that second Expression F is also embodied in the same Manifestation as E.")
SubClassOf(:SelfContainedManifestation :Manifestation)

# Class: know:CompositeKnowledgeResource (Composite Knowledge Resource)

SubClassOf(know:CompositeKnowledgeResource ObjectSomeValuesFrom(frbr:part know:KnowledgeResource))

# Class: know:ConcreteExpression (Concrete Knowledge Expression)

EquivalentClasses(know:ConcreteExpression ObjectIntersectionOf(froo:F2_Expression ObjectSomeValuesFrom(know:uses-concrete-syntax know:Serialization)))
SubClassOf(know:ConcreteExpression froo:F2_Expression)

# Class: know:Knowledge (Knowledge)

SubClassOf(know:Knowledge frbr:Subject)

# Class: know:KnowledgeArtifact (Knowledge Artifact)

SubClassOf(know:KnowledgeArtifact ObjectUnionOf(froo:F4_Manifestation_Singleton froo:F54_Utilized_Information_Carrier))
SubClassOf(know:KnowledgeArtifact ObjectSomeValuesFrom(frbr:exemplarOf know:Manifestation))

# Class: know:KnowledgeEndeavour (Knowledge Endeavour)

SubClassOf(know:KnowledgeEndeavour know:Endeavour)

# Class: know:KnowledgeExpression (Knowledge Expression)

SubClassOf(know:KnowledgeExpression frbr:Expression)

# Class: know:KnowledgeFragment (Knowledge Fragment)

SubClassOf(know:KnowledgeFragment froo:F23_Expression_Fragment)

# Class: know:KnowledgeResource (Knowledge Resource)

EquivalentClasses(know:KnowledgeResource ObjectIntersectionOf(know:AbstractExpression ObjectSomeValuesFrom(frbr:realizationOf know:WorkOfKnowledge)))

# Class: know:Manifestation (know:Manifestation)

SubClassOf(know:Manifestation froo:F3_Manifestation_Product_Type)
SubClassOf(know:Manifestation ObjectSomeValuesFrom(frbr:embodimentOf ObjectIntersectionOf(know:ConcreteExpression ObjectSomeValuesFrom(know:serialization-of know:AbstractExpression))))

# Class: know:SelfContainedKnowledgeArtifact (Self-Contained Knowledge Artifact)

EquivalentClasses(know:SelfContainedKnowledgeArtifact ObjectIntersectionOf(know:KnowledgeArtifact ObjectSomeValuesFrom(frbr:exemplarOf :SelfContainedManifestation)))

# Class: know:Software (know:Software)

SubClassOf(know:Software froo:F25_Performance_Plan)

# Class: know:Software_Execution (Software Execution)

EquivalentClasses(know:Software_Execution ObjectIntersectionOf(froo:F31_Performance ObjectIntersectionOf(ObjectSomeValuesFrom(froo:R25_performed know:Software) ObjectAllValuesFrom(froo:R25_performed know:Software))))
SubClassOf(know:Software_Execution froo:F31_Performance)

# Class: know:WorkOfKnowledge (Work of Knowledge)

SubClassOf(know:WorkOfKnowledge ObjectSomeValuesFrom(frbr:subject know:Knowledge))


SubObjectPropertyOf(ObjectPropertyChain(frbr:embodimentOf know:serialization-of) frbr:embodimentOf)
)