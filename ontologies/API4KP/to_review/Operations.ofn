Prefix(:=<http://www.omg.org/spec/API4KP/Operations/>)
Prefix(dol:=<http://www.omg.org/spec/DOL/DOL-terms/>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(skos:=<http://www.w3.org/2004/02/skos/core#>)
Prefix(api4kp-tr:=<http://www.omg.org/spec/API4KP/Tries/>)
Prefix(aspect:=<http://www.omg.org/spec/API4KP/Aspects/>)
Prefix(api4kp-evt:=<http://www.omg.org/spec/API4KP/Events/>)
Prefix(api4kp-term:=<http://www.omg.org/spec/API4KP/Terminology/>)
Prefix(api4kp-opcls:=<http://www.omg.org/spec/API4KP/OperationAspects/>)


Ontology(<http://www.omg.org/spec/API4KP/Operations/>
<http://www.omg.org/spec/API4KP/20160801/Operations/>
Import(<http://www.omg.org/techprocess/ab/SpecificationMetadata/>)
Import(<http://www.omg.org/spec/DOL/DOL-terms/>)
Import(<http://www.omg.org/spec/API4KP/OperationAspects/>)
Import(<http://www.omg.org/spec/API4KP/Aspects/>)
Annotation(<http://purl.org/dc/terms/license> "http://www.omg.org/techprocess/ab/SpecificationMetadata/MITLicense"^^xsd:anyURI)
Annotation(<http://www.omg.org/techprocess/ab/SpecificationMetadata/contentLanguage> "http://www.omg.org/spec/ODM/"^^xsd:anyURI)
Annotation(<http://www.omg.org/techprocess/ab/SpecificationMetadata/contentLanguage> "http://www.w3.org/standards/techs/owl#w3c_all"^^xsd:anyURI)
Annotation(<http://www.omg.org/techprocess/ab/SpecificationMetadata/copyright> "Copyright (c) 2014 Athan Services
Copyright (c) 2014 Thematix Partners LLC
Copyright (c) 2014 Object Management Group, Inc."^^xsd:string)
Annotation(<http://www.omg.org/techprocess/ab/SpecificationMetadata/fileAbbreviation> "api4kp-op"^^xsd:string)
Annotation(<http://www.omg.org/techprocess/ab/SpecificationMetadata/fileAbstract> "This ontology covers terminology used for describing the operations defined by the API4KP specification."^^xsd:string)
Annotation(<http://www.omg.org/techprocess/ab/SpecificationMetadata/filename> "API4KPTerminologyOperation.rdf"^^xsd:string)
Annotation(rdfs:label "API4KP Operation Terminology Ontology")

Declaration(Class(api4kp-evt:AtomicEvent))
Declaration(Class(api4kp-evt:AtomicEvent-AdditionToKnowledgeExpression))
Declaration(Class(api4kp-evt:ConceptualizingEvent))
Declaration(Class(api4kp-evt:CurriedActionEvent))
Declaration(Class(api4kp-evt:ExpressingEvent))
Declaration(Class(api4kp-evt:HorizontalAssetEvent))
Declaration(Class(api4kp-evt:HorizontalEncodingEvent))
Declaration(Class(api4kp-evt:HorizontalEvent))
Declaration(Class(api4kp-evt:HorizontalExpressionEvent))
Declaration(Class(api4kp-evt:HorizontalItemEvent))
Declaration(Class(api4kp-evt:HorizontalManifestationEvent))
Declaration(Class(api4kp-evt:InStreamingEvent))
Declaration(Class(api4kp-evt:LiftingEvent))
Declaration(Class(api4kp-evt:LoweringEvent))
Declaration(Class(api4kp-evt:ManifestingEvent))
Declaration(Class(api4kp-evt:MarshallingEvent))
Declaration(Class(api4kp-evt:NullaryEvent))
Declaration(Class(api4kp-evt:OutStreamingEvent))
Declaration(Class(api4kp-evt:ParsingEvent))
Declaration(Class(api4kp-evt:SideEffectFreeEvent))
Declaration(Class(api4kp-evt:SideEffectfulEvent))
Declaration(Class(api4kp-evt:UnaryEvent))
Declaration(Class(api4kp-evt:UnmarshallingEvent))
Declaration(Class(:AddingKOperation))
Declaration(Class(:AdditionOperation))
Declaration(Class(:AdditionToKnowledgeExpressionOperation))
Declaration(Class(:AtomicKOperation))
Declaration(Class(:AtomicOperation))
Declaration(Class(:BinaryOperation))
Declaration(Class(:ConceptualizingAction))
Declaration(Class(:CreateEmptyKPOperation))
Declaration(Class(:CreateEmpty_-AtomicOperation))
Declaration(Class(:ExpressingAction))
Declaration(Class(:ExpressionInputOperation))
Declaration(Class(:HigherOrderAtomicKOperation))
Declaration(Class(:HigherOrderOperation))
Declaration(Class(:HorizontalAction-FocusedAssetIn-ResultAssetOut))
Declaration(Class(:HorizontalAssetAction))
Declaration(Class(:HorizontalAtomicKOperation))
Declaration(Class(:HorizontalEncodingAction))
Declaration(Class(:HorizontalExpressionAction))
Declaration(Class(:HorizontalItemAction))
Declaration(Class(:HorizontalKnowledgeExpressionOperation))
Declaration(Class(:HorizontalManifestationAction))
Declaration(Class(:HorizontalOperation))
Declaration(Class(:IdempotentOperation))
Declaration(Class(:ImmutableKBaseOutputOperation))
Declaration(Class(:InStreamAction))
Declaration(Class(:InStreamingAction))
Declaration(Class(:KPlatformOutputOperation))
Declaration(Class(:KnowledgeOperation))
Declaration(Class(:KnowledgeSourceInputOperation))
Declaration(Class(:KnowledgeSourceOutputOperation))
Declaration(Class(:LiftingAtomicKOperation))
Declaration(Class(:LiftingOperation))
Declaration(Class(:LoweringAtomicKOperation))
Declaration(Class(:LoweringOperation))
Declaration(Class(:ManifestingAction))
Declaration(Class(:MarshallingAction))
Declaration(Class(:MoreThanBinaryOperation))
Declaration(Class(:NonVoidOperation))
Declaration(Class(:NullaryOperation))
Declaration(Class(:NullaryVoidAction))
Declaration(Class(:OutStreamingAction))
Declaration(Class(:ParsingAction))
Declaration(Class(:Put))
Declaration(Class(:QueryingOperation))
Declaration(Class(:QueryingOperation-KnowledgeResourceToImmutableKB))
Declaration(Class(:QueryingResourceAction))
Declaration(Class(:ResultResourceOutputOperation))
Declaration(Class(:SideEffectFreeOperation))
Declaration(Class(:SideEffectfulKOperation))
Declaration(Class(:SideEffectfulOperation))
Declaration(Class(:UnaryOperation))
Declaration(Class(:UnmarshallingAction))
Declaration(Class(:Update))
Declaration(Class(:Void))
Declaration(Class(:VoidOperation))
Declaration(Class(api4kp-term:Expression))
Declaration(Class(api4kp-term:ImmutableEntity))
Declaration(Class(api4kp-term:ImmutableKnowledgeBase))
Declaration(Class(api4kp-term:KnowledgeAsset))
Declaration(Class(api4kp-term:KnowledgeEncoding))
Declaration(Class(api4kp-term:KnowledgeExpression))
Declaration(Class(api4kp-term:KnowledgeItem))
Declaration(Class(api4kp-term:KnowledgeManifestation))
Declaration(Class(api4kp-term:KnowledgePlatform))
Declaration(Class(api4kp-term:KnowledgeResource))
Declaration(Class(api4kp-term:KnowledgeSource))
Declaration(Class(api4kp-term:Operation))
Declaration(Class(api4kp-term:QueryResource))
Declaration(Class(api4kp-term:ResultAsset))
Declaration(Class(api4kp-term:ResultResource))
Declaration(Class(dol:KnowledgeSource))
Declaration(Class(dol:QuerySource))
Declaration(ObjectProperty(api4kp-evt:hasInput))
Declaration(ObjectProperty(api4kp-evt:hasOutput))
Declaration(ObjectProperty(:adds))
Declaration(ObjectProperty(:addsTo))
Declaration(ObjectProperty(:appliesQuery))
Declaration(ObjectProperty(:appliesQueryTo))
Declaration(ObjectProperty(:hasInput))
Declaration(ObjectProperty(:hasOutput))
Declaration(ObjectProperty(:hasOutputFromConceptualizing))
Declaration(ObjectProperty(:hasOutputFromInStreaming))
Declaration(ObjectProperty(:hasOutputFromParsing))
Declaration(ObjectProperty(:hasOutputFromUnmarshalling))
Declaration(ObjectProperty(:isInputOf))
Declaration(ObjectProperty(:isOutputOf))
Declaration(ObjectProperty(api4kp-term:hasEvent))
Declaration(ObjectProperty(api4kp-tr:hasEvent))
Declaration(ObjectProperty(api4kp-tr:hasOutput))
Declaration(AnnotationProperty(aspect:hasAspect))

############################
#   Object Properties
############################

# Object Property: :adds (adds resource)

AnnotationAssertion(rdfs:label :adds "adds resource")
AnnotationAssertion(skos:note :adds "need property chain")
SubObjectPropertyOf(:adds :hasInput)
ObjectPropertyDomain(Annotation(skos:note "This relates either a binary adding operation to its first argument or a higher-order adding operation to its only input.") :adds ObjectIntersectionOf(:AdditionOperation ObjectUnionOf(:BinaryOperation :HigherOrderOperation)))
ObjectPropertyRange(Annotation(skos:editorialNote "We need to think about what it means to add to an immutable KP and what an immutable KP is in relation to a mutable KP.") :adds ObjectIntersectionOf(api4kp-term:ImmutableEntity ObjectUnionOf(api4kp-term:KnowledgePlatform dol:KnowledgeSource)))

# Object Property: :addsTo (adds resource to)

AnnotationAssertion(rdfs:label :addsTo "adds resource to")
AnnotationAssertion(skos:note :addsTo "
      <rdf:type rdf:resource=\"http://www.w3.org/2002/07/owl#FunctionalProperty\"/>            
    ")
AnnotationAssertion(skos:note :addsTo "need property chain")
SubObjectPropertyOf(:addsTo :hasInput)
ObjectPropertyDomain(Annotation(skos:note "This relates either a binary adding operation to its second argument or a horizontal adding operation to its only input.") :addsTo ObjectIntersectionOf(:AdditionOperation ObjectUnionOf(:BinaryOperation :HorizontalOperation)))
ObjectPropertyRange(Annotation(skos:editorialNote "We need to think about what it means to add to an immutable KP and what an immutable KP is in relation to a mutable KP.") :addsTo ObjectIntersectionOf(api4kp-term:ImmutableEntity ObjectUnionOf(api4kp-term:KnowledgePlatform dol:KnowledgeSource)))

# Object Property: :appliesQuery (applies query resource)

AnnotationAssertion(rdfs:label :appliesQuery "applies query resource")
AnnotationAssertion(skos:definition :appliesQuery "TBD"^^xsd:string)
AnnotationAssertion(skos:note :appliesQuery "need property chain")
SubObjectPropertyOf(:appliesQuery :hasInput)
ObjectPropertyDomain(:appliesQuery :QueryingOperation)
ObjectPropertyRange(:appliesQuery dol:QuerySource)

# Object Property: :appliesQueryTo (applies query to resource)

AnnotationAssertion(rdfs:label :appliesQueryTo "applies query to resource")
AnnotationAssertion(skos:definition :appliesQueryTo "TBD"^^xsd:string)
AnnotationAssertion(skos:note :appliesQueryTo "
      <rdf:type rdf:resource=\"http://www.w3.org/2002/07/owl#FunctionalProperty\"/>            
    ")
AnnotationAssertion(skos:note :appliesQueryTo "need property chain")
SubObjectPropertyOf(:appliesQueryTo :hasInput)
ObjectPropertyDomain(:appliesQueryTo :QueryingOperation)
ObjectPropertyRange(:appliesQueryTo dol:KnowledgeSource)

# Object Property: :hasInput (has input)

AnnotationAssertion(rdfs:label :hasInput "has input")
AnnotationAssertion(skos:definition :hasInput "input of an operation"^^xsd:string)
InverseObjectProperties(:hasInput :isInputOf)
ObjectPropertyDomain(:hasInput :KnowledgeOperation)

# Object Property: :hasOutput (has output)

AnnotationAssertion(rdfs:label :hasOutput "has output")
AnnotationAssertion(skos:definition :hasOutput "output of an operation event"^^xsd:string)
AnnotationAssertion(skos:note :hasOutput "
      <rdf:type rdf:resource=\"http://www.w3.org/2002/07/owl#FunctionalProperty\"/>            
    ")
InverseObjectProperties(:hasOutput :isOutputOf)
ObjectPropertyDomain(:hasOutput :KnowledgeOperation)

# Object Property: :hasOutputFromConceptualizing (has output from conceptualizing)

AnnotationAssertion(rdfs:label :hasOutputFromConceptualizing "has output from conceptualizing")
AnnotationAssertion(skos:note :hasOutputFromConceptualizing "need property chain")
SubObjectPropertyOf(:hasOutputFromConceptualizing :hasOutput)
ObjectPropertyDomain(:hasOutputFromConceptualizing :ConceptualizingAction)
ObjectPropertyRange(:hasOutputFromConceptualizing api4kp-term:KnowledgeAsset)

# Object Property: :hasOutputFromInStreaming (has output from instreaming)

AnnotationAssertion(rdfs:label :hasOutputFromInStreaming "has output from instreaming")
AnnotationAssertion(skos:note :hasOutputFromInStreaming "need property chain")
SubObjectPropertyOf(:hasOutputFromInStreaming :hasOutput)
ObjectPropertyDomain(:hasOutputFromInStreaming :InStreamAction)
ObjectPropertyRange(:hasOutputFromInStreaming api4kp-term:KnowledgeEncoding)

# Object Property: :hasOutputFromParsing (has output from parsing)

AnnotationAssertion(rdfs:label :hasOutputFromParsing "has output from parsing")
AnnotationAssertion(skos:note :hasOutputFromParsing "need property chain")
SubObjectPropertyOf(:hasOutputFromParsing :hasOutput)
ObjectPropertyDomain(:hasOutputFromParsing :ParsingAction)
ObjectPropertyRange(:hasOutputFromParsing api4kp-term:KnowledgeExpression)

# Object Property: :hasOutputFromUnmarshalling (has output from unmarshalling)

AnnotationAssertion(rdfs:label :hasOutputFromUnmarshalling "has output from unmarshalling")
AnnotationAssertion(skos:note :hasOutputFromUnmarshalling "need property chain")
SubObjectPropertyOf(:hasOutputFromUnmarshalling :hasOutput)
ObjectPropertyDomain(:hasOutputFromUnmarshalling :UnmarshallingAction)
ObjectPropertyRange(:hasOutputFromUnmarshalling api4kp-term:KnowledgeManifestation)

# Object Property: :isInputOf (is input of)

AnnotationAssertion(rdfs:label :isInputOf "is input of")

# Object Property: :isOutputOf (is output of)

AnnotationAssertion(rdfs:label :isOutputOf "is output of")



############################
#   Classes
############################

# Class: :AddingKOperation (adding operation)

AnnotationAssertion(aspect:hasAspect :AddingKOperation api4kp-opcls:SemanticClassifierAspect)
AnnotationAssertion(rdfs:label :AddingKOperation "adding operation")
AnnotationAssertion(skos:definition :AddingKOperation "KnowledgeOperation having only events of type AddingKEvent.")
SubClassOf(:AddingKOperation :BinaryOperation)
SubClassOf(:AddingKOperation :KnowledgeOperation)

# Class: :AdditionOperation (:AdditionOperation)

AnnotationAssertion(aspect:hasAspect :AdditionOperation api4kp-opcls:SemanticClassifierAspect)
SubClassOf(:AdditionOperation api4kp-term:Operation)

# Class: :AdditionToKnowledgeExpressionOperation (atomic operation - addition to knowledge expression)

AnnotationAssertion(rdfs:label :AdditionToKnowledgeExpressionOperation "atomic operation - addition to knowledge expression")
AnnotationAssertion(skos:definition :AdditionToKnowledgeExpressionOperation "'addition to' atomic operation that maps knowledge expressions into knowledge expressions."^^xsd:string)
SubClassOf(:AdditionToKnowledgeExpressionOperation :AdditionOperation)
SubClassOf(:AdditionToKnowledgeExpressionOperation :AtomicOperation)
SubClassOf(:AdditionToKnowledgeExpressionOperation :ExpressionInputOperation)
SubClassOf(:AdditionToKnowledgeExpressionOperation :HorizontalOperation)
SubClassOf(:AdditionToKnowledgeExpressionOperation :KnowledgeSourceInputOperation)
SubClassOf(:AdditionToKnowledgeExpressionOperation :KnowledgeSourceOutputOperation)
SubClassOf(:AdditionToKnowledgeExpressionOperation ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:AtomicEvent-AdditionToKnowledgeExpression))

# Class: :AtomicKOperation (action)

AnnotationAssertion(aspect:hasAspect :AtomicKOperation api4kp-opcls:SystemLevelClassifierAspect)
AnnotationAssertion(rdfs:label :AtomicKOperation "action")
AnnotationAssertion(skos:note :AtomicKOperation "nullary or unary atomic knowledge operation"^^xsd:string)
SubClassOf(:AtomicKOperation :KnowledgeOperation)
SubClassOf(:AtomicKOperation ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:AtomicEvent))

# Class: :AtomicOperation (:AtomicOperation)

AnnotationAssertion(aspect:hasAspect :AtomicOperation api4kp-opcls:SystemLevelClassifierAspect)
SubClassOf(:AtomicOperation api4kp-term:Operation)

# Class: :BinaryOperation (:BinaryOperation)

AnnotationAssertion(aspect:hasAspect :BinaryOperation api4kp-opcls:ArityClassifierAspect)
SubClassOf(:BinaryOperation api4kp-term:Operation)

# Class: :ConceptualizingAction (conceptualizing action)

AnnotationAssertion(rdfs:label :ConceptualizingAction "conceptualizing action")
AnnotationAssertion(skos:definition :ConceptualizingAction "lifting action that transforms knowledge expressions to knowledge assets."^^xsd:string)
SubClassOf(:ConceptualizingAction :LiftingAtomicKOperation)
SubClassOf(:ConceptualizingAction ObjectAllValuesFrom(:hasInput api4kp-term:KnowledgeExpression))
SubClassOf(:ConceptualizingAction ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeAsset))
SubClassOf(:ConceptualizingAction ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:ConceptualizingEvent))

# Class: :CreateEmptyKPOperation (create empty KP operation)

AnnotationAssertion(rdfs:label :CreateEmptyKPOperation "create empty KP operation"@en)
AnnotationAssertion(skos:note :CreateEmptyKPOperation "This needs some additional work. We should define the operation outputs in terms of event outputs.")
SubClassOf(:CreateEmptyKPOperation :CreateEmpty_-AtomicOperation)
SubClassOf(:CreateEmptyKPOperation :KPlatformOutputOperation)
SubClassOf(:CreateEmptyKPOperation ObjectAllValuesFrom(api4kp-tr:hasOutput api4kp-term:KnowledgePlatform))

# Class: :CreateEmpty_-AtomicOperation (nullary nonvoid action)

AnnotationAssertion(rdfs:label :CreateEmpty_-AtomicOperation "nullary nonvoid action"@en)
SubClassOf(:CreateEmpty_-AtomicOperation :AtomicKOperation)
SubClassOf(:CreateEmpty_-AtomicOperation :NullaryOperation)
SubClassOf(:CreateEmpty_-AtomicOperation :SideEffectFreeOperation)

# Class: :ExpressingAction (expressing action)

AnnotationAssertion(rdfs:label :ExpressingAction "expressing action")
SubClassOf(:ExpressingAction :LoweringAtomicKOperation)
SubClassOf(:ExpressingAction ObjectAllValuesFrom(:hasInput api4kp-term:KnowledgeAsset))
SubClassOf(:ExpressingAction ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeExpression))
SubClassOf(:ExpressingAction ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:ExpressingEvent))

# Class: :ExpressionInputOperation (:ExpressionInputOperation)

AnnotationAssertion(aspect:hasAspect :ExpressionInputOperation api4kp-opcls:InputTypeClassifierAspect)
SubClassOf(:ExpressionInputOperation :UnaryOperation)
SubClassOf(:ExpressionInputOperation ObjectAllValuesFrom(:hasInput api4kp-term:Expression))

# Class: :HigherOrderAtomicKOperation (higher-order action)

AnnotationAssertion(rdfs:label :HigherOrderAtomicKOperation "higher-order action"@en)
AnnotationAssertion(skos:definition :HigherOrderAtomicKOperation "side-effect-free action whose input or output (or both) is an action"^^xsd:string)
EquivalentClasses(:HigherOrderAtomicKOperation ObjectIntersectionOf(:AtomicKOperation :HigherOrderOperation))
SubClassOf(:HigherOrderAtomicKOperation ObjectAllValuesFrom(:hasOutput :AtomicKOperation))
SubClassOf(:HigherOrderAtomicKOperation ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:CurriedActionEvent))

# Class: :HigherOrderOperation (:HigherOrderOperation)

SubClassOf(:HigherOrderOperation :NonVoidOperation)
SubClassOf(:HigherOrderOperation :UnaryOperation)
DisjointClasses(:HigherOrderOperation :HorizontalOperation)

# Class: :HorizontalAction-FocusedAssetIn-ResultAssetOut (horizontal action - focused asset in - answer substitution collection out)

AnnotationAssertion(rdfs:label :HorizontalAction-FocusedAssetIn-ResultAssetOut "horizontal action - focused asset in - answer substitution collection out")
AnnotationAssertion(skos:definition :HorizontalAction-FocusedAssetIn-ResultAssetOut "horizontal action that maps knowledge bases to result assets."^^xsd:string)
SubClassOf(:HorizontalAction-FocusedAssetIn-ResultAssetOut :HorizontalAssetAction)
SubClassOf(:HorizontalAction-FocusedAssetIn-ResultAssetOut ObjectSomeValuesFrom(:hasInput api4kp-term:KnowledgeAsset))
SubClassOf(:HorizontalAction-FocusedAssetIn-ResultAssetOut ObjectSomeValuesFrom(:hasOutput api4kp-term:ResultAsset))

# Class: :HorizontalAssetAction (horizontal asset action)

AnnotationAssertion(rdfs:label :HorizontalAssetAction "horizontal asset action")
AnnotationAssertion(skos:definition :HorizontalAssetAction "horizontal action whose inputs and outputs are knowledge assets."^^xsd:string)
SubClassOf(:HorizontalAssetAction :HorizontalAtomicKOperation)
SubClassOf(:HorizontalAssetAction ObjectAllValuesFrom(:hasInput api4kp-term:KnowledgeAsset))
SubClassOf(:HorizontalAssetAction ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeAsset))
SubClassOf(:HorizontalAssetAction ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:HorizontalAssetEvent))

# Class: :HorizontalAtomicKOperation (horizontal action)

AnnotationAssertion(rdfs:label :HorizontalAtomicKOperation "horizontal action")
AnnotationAssertion(skos:definition :HorizontalAtomicKOperation "side-effect-free action where the output is at the same knowledge source level as the input"^^xsd:string)
EquivalentClasses(:HorizontalAtomicKOperation ObjectIntersectionOf(:AtomicKOperation :HorizontalOperation))
SubClassOf(:HorizontalAtomicKOperation ObjectAllValuesFrom(:hasInput api4kp-term:KnowledgeResource))
SubClassOf(:HorizontalAtomicKOperation ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeResource))
SubClassOf(:HorizontalAtomicKOperation ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:HorizontalEvent))
DisjointUnion(:HorizontalAtomicKOperation :HorizontalAssetAction :HorizontalEncodingAction :HorizontalExpressionAction :HorizontalItemAction :HorizontalManifestationAction)

# Class: :HorizontalEncodingAction (horizontal encoding action)

AnnotationAssertion(rdfs:label :HorizontalEncodingAction "horizontal encoding action")
AnnotationAssertion(skos:definition :HorizontalEncodingAction "horizontal action whose inputs and outputs are knowledge expressions."^^xsd:string)
SubClassOf(:HorizontalEncodingAction :HorizontalAtomicKOperation)
SubClassOf(:HorizontalEncodingAction ObjectAllValuesFrom(:hasInput api4kp-term:KnowledgeEncoding))
SubClassOf(:HorizontalEncodingAction ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeEncoding))
SubClassOf(:HorizontalEncodingAction ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:HorizontalEncodingEvent))

# Class: :HorizontalExpressionAction (horizontal expression action)

AnnotationAssertion(rdfs:label :HorizontalExpressionAction "horizontal expression action")
AnnotationAssertion(skos:definition :HorizontalExpressionAction "horizontal action whose inputs and outputs are knowledge expressions."^^xsd:string)
SubClassOf(:HorizontalExpressionAction :HorizontalAtomicKOperation)
SubClassOf(:HorizontalExpressionAction ObjectAllValuesFrom(:hasInput api4kp-term:KnowledgeExpression))
SubClassOf(:HorizontalExpressionAction ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeExpression))
SubClassOf(:HorizontalExpressionAction ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:HorizontalExpressionEvent))

# Class: :HorizontalItemAction (horizontal item action)

AnnotationAssertion(rdfs:label :HorizontalItemAction "horizontal item action")
AnnotationAssertion(skos:definition :HorizontalItemAction "horizontal action whose inputs and outputs are knowledge expressions."^^xsd:string)
SubClassOf(:HorizontalItemAction :HorizontalAtomicKOperation)
SubClassOf(:HorizontalItemAction ObjectAllValuesFrom(:hasInput api4kp-term:KnowledgeItem))
SubClassOf(:HorizontalItemAction ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeItem))
SubClassOf(:HorizontalItemAction ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:HorizontalItemEvent))

# Class: :HorizontalKnowledgeExpressionOperation (:HorizontalKnowledgeExpressionOperation)

AnnotationAssertion(aspect:hasAspect :HorizontalKnowledgeExpressionOperation api4kp-opcls:InputOutputTypeRelationClassifierAspect)
SubClassOf(:HorizontalKnowledgeExpressionOperation :HorizontalOperation)
SubClassOf(:HorizontalKnowledgeExpressionOperation ObjectAllValuesFrom(:hasInput api4kp-term:KnowledgeExpression))
SubClassOf(:HorizontalKnowledgeExpressionOperation ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeExpression))

# Class: :HorizontalManifestationAction (horizontal manifestation action)

AnnotationAssertion(rdfs:label :HorizontalManifestationAction "horizontal manifestation action")
AnnotationAssertion(skos:definition :HorizontalManifestationAction "horizontal action whose inputs and outputs are knowledge expressions."^^xsd:string)
SubClassOf(:HorizontalManifestationAction :HorizontalAtomicKOperation)
SubClassOf(:HorizontalManifestationAction ObjectAllValuesFrom(:hasInput api4kp-term:KnowledgeManifestation))
SubClassOf(:HorizontalManifestationAction ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeManifestation))
SubClassOf(:HorizontalManifestationAction ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:HorizontalManifestationEvent))

# Class: :HorizontalOperation (:HorizontalOperation)

AnnotationAssertion(aspect:hasAspect :HorizontalOperation api4kp-opcls:InputOutputTypeRelationClassifierAspect)
AnnotationAssertion(skos:definition :HorizontalOperation "Unary operation where the input and output are on the same abstraction level.")
SubClassOf(:HorizontalOperation :NonVoidOperation)
SubClassOf(:HorizontalOperation :UnaryOperation)

# Class: :IdempotentOperation (idempotent action)

AnnotationAssertion(aspect:hasAspect :IdempotentOperation api4kp-opcls:SemanticClassifierAspect)
AnnotationAssertion(rdfs:label :IdempotentOperation "idempotent action")
AnnotationAssertion(skos:definition :IdempotentOperation "side-effect free (?) unary operation that  is equal to its composition with itself (A = A o A)")
SubClassOf(:IdempotentOperation :UnaryOperation)

# Class: :ImmutableKBaseOutputOperation (:ImmutableKBaseOutputOperation)

AnnotationAssertion(aspect:hasAspect :ImmutableKBaseOutputOperation api4kp-opcls:OutputTypeClassifierAspect)
SubClassOf(:ImmutableKBaseOutputOperation :KnowledgeOperation)
SubClassOf(:ImmutableKBaseOutputOperation :NonVoidOperation)

# Class: :InStreamingAction (instreaming action)

AnnotationAssertion(rdfs:label :InStreamingAction "instreaming action")
AnnotationAssertion(skos:definition :InStreamingAction "lifting action that maps knowledge items into knowledge encodings."^^xsd:string)
SubClassOf(:InStreamingAction :LiftingAtomicKOperation)
SubClassOf(:InStreamingAction ObjectAllValuesFrom(:hasInput api4kp-term:KnowledgeItem))
SubClassOf(:InStreamingAction ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeEncoding))
SubClassOf(:InStreamingAction ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:InStreamingEvent))

# Class: :KPlatformOutputOperation (:KPlatformOutputOperation)

AnnotationAssertion(aspect:hasAspect :KPlatformOutputOperation api4kp-opcls:OutputTypeClassifierAspect)
AnnotationAssertion(skos:definition :KPlatformOutputOperation "An operation that has a Knowledge Platform as output.")
SubClassOf(:KPlatformOutputOperation :KnowledgeOperation)
SubClassOf(:KPlatformOutputOperation :NonVoidOperation)

# Class: :KnowledgeOperation (knowledge operation)

AnnotationAssertion(rdfs:label :KnowledgeOperation "knowledge operation")
AnnotationAssertion(skos:definition :KnowledgeOperation "function (possibly with side-effects) having a knowledge source, environment or operation type in its signature"^^xsd:string)
AnnotationAssertion(skos:editorialNote :KnowledgeOperation "is there a super-class for Operation in some OMG standard?"^^xsd:string)
AnnotationAssertion(skos:example :KnowledgeOperation "checking for compliance with plans")
AnnotationAssertion(skos:example :KnowledgeOperation "initiating an ECA Rulebase")
AnnotationAssertion(skos:example :KnowledgeOperation "publishing or subscribing to a stream of RDF graphs")
AnnotationAssertion(skos:example :KnowledgeOperation "revising an ontology of guidelines")
AnnotationAssertion(skos:example :KnowledgeOperation "submitting a SPARQL query")
AnnotationAssertion(skos:note :KnowledgeOperation "Option 1. the definition as \"function\" means that its a black-box standard. We may define the post-conditions by a reference decomposition into actions, but there is no normative requirement for applications to execute according to that decomposition.
      
      Option 2. at the other extreme, the decomposition could also be consider normative.
      
      Option 3. something in between."^^xsd:string)
AnnotationAssertion(skos:note :KnowledgeOperation "side-effects means effects beyond the output value returned")
AnnotationAssertion(skos:scopeNote :KnowledgeOperation "Each API4KP Interface is a subclass of Operation."^^xsd:string)
AnnotationAssertion(skos:scopeNote :KnowledgeOperation "This class contains only API4KP Operation."^^xsd:string)
SubClassOf(:KnowledgeOperation api4kp-term:Operation)

# Class: :KnowledgeSourceInputOperation (:KnowledgeSourceInputOperation)

AnnotationAssertion(aspect:hasAspect :KnowledgeSourceInputOperation api4kp-opcls:InputTypeClassifierAspect)
SubClassOf(:KnowledgeSourceInputOperation :UnaryOperation)
SubClassOf(:KnowledgeSourceInputOperation ObjectAllValuesFrom(:hasInput dol:KnowledgeSource))

# Class: :KnowledgeSourceOutputOperation (:KnowledgeSourceOutputOperation)

AnnotationAssertion(aspect:hasAspect :KnowledgeSourceOutputOperation api4kp-opcls:OutputTypeClassifierAspect)
SubClassOf(:KnowledgeSourceOutputOperation api4kp-term:Operation)
SubClassOf(:KnowledgeSourceOutputOperation ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeSource))

# Class: :LiftingAtomicKOperation (lifting action)

AnnotationAssertion(rdfs:label :LiftingAtomicKOperation "lifting action")
AnnotationAssertion(skos:definition :LiftingAtomicKOperation "action that is a lifting operation"^^xsd:string)
EquivalentClasses(:LiftingAtomicKOperation ObjectIntersectionOf(:AtomicKOperation :LiftingOperation))
SubClassOf(:LiftingAtomicKOperation ObjectAllValuesFrom(:hasInput api4kp-term:KnowledgeResource))
SubClassOf(:LiftingAtomicKOperation ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeResource))
SubClassOf(:LiftingAtomicKOperation ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:LiftingEvent))
DisjointUnion(:LiftingAtomicKOperation :ConceptualizingAction :InStreamingAction :ParsingAction :UnmarshallingAction)

# Class: :LiftingOperation (:LiftingOperation)

AnnotationAssertion(aspect:hasAspect :LiftingOperation api4kp-opcls:InputOutputTypeRelationClassifierAspect)
AnnotationAssertion(skos:definition :LiftingOperation "unary operation where the output is at a higher abstraction level than the input")
SubClassOf(:LiftingOperation :NonVoidOperation)
SubClassOf(:LiftingOperation :UnaryOperation)

# Class: :LoweringAtomicKOperation (lowering action)

AnnotationAssertion(rdfs:label :LoweringAtomicKOperation "lowering action")
AnnotationAssertion(skos:definition :LoweringAtomicKOperation "side-effect-free action where the output is at a lower knowledge source level than the input"^^xsd:string)
EquivalentClasses(:LoweringAtomicKOperation ObjectIntersectionOf(:AtomicKOperation :LoweringOperation))
SubClassOf(:LoweringAtomicKOperation ObjectAllValuesFrom(:hasInput api4kp-term:KnowledgeResource))
SubClassOf(:LoweringAtomicKOperation ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeResource))
SubClassOf(:LoweringAtomicKOperation ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:LoweringEvent))
DisjointUnion(:LoweringAtomicKOperation :ExpressingAction :ManifestingAction :MarshallingAction :OutStreamingAction)

# Class: :LoweringOperation (:LoweringOperation)

AnnotationAssertion(aspect:hasAspect :LoweringOperation api4kp-opcls:InputOutputTypeRelationClassifierAspect)
SubClassOf(:LoweringOperation :NonVoidOperation)
SubClassOf(:LoweringOperation :UnaryOperation)

# Class: :ManifestingAction (manifesting action)

AnnotationAssertion(rdfs:label :ManifestingAction "manifesting action")
SubClassOf(:ManifestingAction :LoweringAtomicKOperation)
SubClassOf(:ManifestingAction ObjectAllValuesFrom(:hasInput api4kp-term:KnowledgeExpression))
SubClassOf(:ManifestingAction ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeManifestation))
SubClassOf(:ManifestingAction ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:ManifestingEvent))

# Class: :MarshallingAction (marshalling action)

AnnotationAssertion(rdfs:label :MarshallingAction "marshalling action")
SubClassOf(:MarshallingAction :LoweringAtomicKOperation)
SubClassOf(:MarshallingAction ObjectAllValuesFrom(:hasInput api4kp-term:KnowledgeManifestation))
SubClassOf(:MarshallingAction ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeEncoding))
SubClassOf(:MarshallingAction ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:MarshallingEvent))

# Class: :MoreThanBinaryOperation (:MoreThanBinaryOperation)

SubClassOf(:MoreThanBinaryOperation api4kp-term:Operation)

# Class: :NonVoidOperation (:NonVoidOperation)

AnnotationAssertion(aspect:hasAspect :NonVoidOperation api4kp-opcls:OutputTypeClassifierAspect)
SubClassOf(:NonVoidOperation api4kp-term:Operation)
DisjointClasses(:NonVoidOperation :VoidOperation)

# Class: :NullaryOperation (nullary operation)

AnnotationAssertion(aspect:hasAspect :NullaryOperation api4kp-opcls:ArityClassifierAspect)
AnnotationAssertion(rdfs:label :NullaryOperation "nullary operation"@en)
SubClassOf(:NullaryOperation api4kp-term:Operation)
SubClassOf(:NullaryOperation ObjectAllValuesFrom(api4kp-tr:hasEvent api4kp-evt:NullaryEvent))

# Class: :NullaryVoidAction (nullary void action)

AnnotationAssertion(rdfs:label :NullaryVoidAction "nullary void action"@en)
SubClassOf(:NullaryVoidAction :NullaryOperation)
SubClassOf(:NullaryVoidAction :VoidOperation)

# Class: :OutStreamingAction (outstreaming action)

AnnotationAssertion(rdfs:label :OutStreamingAction "outstreaming action")
AnnotationAssertion(skos:definition :OutStreamingAction "lifting action that maps knowledge items into knowledge encodings."^^xsd:string)
SubClassOf(:OutStreamingAction :LoweringAtomicKOperation)
SubClassOf(:OutStreamingAction ObjectAllValuesFrom(:hasInput api4kp-term:KnowledgeEncoding))
SubClassOf(:OutStreamingAction ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeItem))
SubClassOf(:OutStreamingAction ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:OutStreamingEvent))

# Class: :ParsingAction (parsing action)

AnnotationAssertion(rdfs:label :ParsingAction "parsing action")
SubClassOf(:ParsingAction :LiftingAtomicKOperation)
SubClassOf(:ParsingAction ObjectAllValuesFrom(:hasInput api4kp-term:KnowledgeManifestation))
SubClassOf(:ParsingAction ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeExpression))
SubClassOf(:ParsingAction ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:ParsingEvent))

# Class: :Put (put)

AnnotationAssertion(rdfs:label :Put "put")
AnnotationAssertion(skos:definition :Put "void action whose input is a matable knowledge source and has the side-effect of setting the mutable knowledge source to a particular, fully-specified state")
SubClassOf(:Put :VoidOperation)

# Class: :QueryingOperation-KnowledgeResourceToImmutableKB (operation applying query resources to immutable KBs)

AnnotationAssertion(rdfs:label :QueryingOperation-KnowledgeResourceToImmutableKB "operation applying query resources to immutable KBs")
AnnotationAssertion(skos:definition :QueryingOperation-KnowledgeResourceToImmutableKB "operation applying query resources to immutable KBs returning a result resource"^^xsd:string)
SubClassOf(:QueryingOperation-KnowledgeResourceToImmutableKB :BinaryOperation)
SubClassOf(:QueryingOperation-KnowledgeResourceToImmutableKB :KnowledgeOperation)
SubClassOf(:QueryingOperation-KnowledgeResourceToImmutableKB :ResultResourceOutputOperation)
SubClassOf(:QueryingOperation-KnowledgeResourceToImmutableKB ObjectAllValuesFrom(:appliesQuery api4kp-term:QueryResource))
SubClassOf(:QueryingOperation-KnowledgeResourceToImmutableKB ObjectAllValuesFrom(:appliesQueryTo api4kp-term:ImmutableKnowledgeBase))
SubClassOf(:QueryingOperation-KnowledgeResourceToImmutableKB ObjectAllValuesFrom(:hasOutput api4kp-term:ResultResource))

# Class: :QueryingResourceAction (querying action)

AnnotationAssertion(rdfs:label :QueryingResourceAction "querying action")
AnnotationAssertion(skos:definition :QueryingResourceAction "higher-order action that maps queries to horizontal operations from knowledge bases to result assests."^^xsd:string)
SubClassOf(:QueryingResourceAction :HigherOrderAtomicKOperation)
SubClassOf(:QueryingResourceAction ObjectSomeValuesFrom(:hasInput api4kp-term:QueryResource))
SubClassOf(:QueryingResourceAction ObjectSomeValuesFrom(:hasOutput :HorizontalAction-FocusedAssetIn-ResultAssetOut))

# Class: :ResultResourceOutputOperation (:ResultResourceOutputOperation)

AnnotationAssertion(aspect:hasAspect :ResultResourceOutputOperation api4kp-opcls:OutputTypeClassifierAspect)
SubClassOf(:ResultResourceOutputOperation :KnowledgeOperation)

# Class: :SideEffectFreeOperation (side-effect-free operation)

AnnotationAssertion(aspect:hasAspect :SideEffectFreeOperation api4kp-opcls:SideEffectClassifierAspect)
AnnotationAssertion(rdfs:label :SideEffectFreeOperation "side-effect-free operation")
AnnotationAssertion(skos:definition :SideEffectFreeOperation "knowledge operation with no effects beyond the output value returned")
AnnotationAssertion(skos:editorialNote :SideEffectFreeOperation "TODO: Use the same pattern as we did with SideEffectfulOperation/SideEffectfulKnowledgeOperation")
SubClassOf(:SideEffectFreeOperation api4kp-term:Operation)
SubClassOf(:SideEffectFreeOperation ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:SideEffectFreeEvent))

# Class: :SideEffectfulKOperation (:SideEffectfulKOperation)

AnnotationAssertion(skos:note :SideEffectfulKOperation "It is an API4KP design decision that all sideeffectful KnowledgeOperations are VoidOperations.")
EquivalentClasses(:SideEffectfulKOperation ObjectIntersectionOf(:KnowledgeOperation :SideEffectfulOperation))
SubClassOf(:SideEffectfulKOperation :VoidOperation)

# Class: :SideEffectfulOperation (side-effectful operation)

AnnotationAssertion(aspect:hasAspect :SideEffectfulOperation api4kp-opcls:SideEffectClassifierAspect)
AnnotationAssertion(rdfs:label :SideEffectfulOperation "side-effectful operation")
AnnotationAssertion(skos:definition :SideEffectfulOperation "knowledge operation with effects beyond the output value returned")
SubClassOf(:SideEffectfulOperation ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:SideEffectfulEvent))

# Class: :UnaryOperation (unary operation)

AnnotationAssertion(aspect:hasAspect :UnaryOperation api4kp-opcls:ArityClassifierAspect)
AnnotationAssertion(rdfs:label :UnaryOperation "unary operation")
AnnotationAssertion(skos:definition :UnaryOperation "knowledge operation with one input"^^xsd:string)
SubClassOf(:UnaryOperation api4kp-term:Operation)
SubClassOf(:UnaryOperation ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:UnaryEvent))

# Class: :UnmarshallingAction (unmarshalling action)

AnnotationAssertion(rdfs:label :UnmarshallingAction "unmarshalling action")
AnnotationAssertion(skos:definition :UnmarshallingAction "lifting action that maps knowledge encodings into knowledge manifestations."^^xsd:string)
SubClassOf(:UnmarshallingAction :LiftingAtomicKOperation)
SubClassOf(:UnmarshallingAction ObjectAllValuesFrom(:hasInput api4kp-term:KnowledgeEncoding))
SubClassOf(:UnmarshallingAction ObjectAllValuesFrom(:hasOutput api4kp-term:KnowledgeManifestation))
SubClassOf(:UnmarshallingAction ObjectAllValuesFrom(api4kp-term:hasEvent api4kp-evt:UnmarshallingEvent))

# Class: :Update (update)

AnnotationAssertion(rdfs:label :Update "update")
AnnotationAssertion(skos:definition :Update "void action whose input is a mutable knowledge source and has the side-effect of setting the mutable knowledge to a new state that is the result of applying a side-effect-free action to the current state")
SubClassOf(:Update :VoidOperation)

# Class: :VoidOperation (void action)

AnnotationAssertion(aspect:hasAspect :VoidOperation api4kp-opcls:OutputTypeClassifierAspect)
AnnotationAssertion(rdfs:label :VoidOperation "void action"@en)
AnnotationAssertion(skos:definition :VoidOperation "side-effectful action with no output"^^xsd:string)
SubClassOf(:VoidOperation api4kp-term:Operation)
SubClassOf(:VoidOperation ObjectAllValuesFrom(:hasOutput :Void))

# Class: api4kp-term:Operation (api4kp-term:Operation)

DisjointUnion(api4kp-term:Operation :BinaryOperation :MoreThanBinaryOperation :NullaryOperation :UnaryOperation)
DisjointUnion(api4kp-term:Operation :NonVoidOperation :VoidOperation)
DisjointUnion(api4kp-term:Operation :SideEffectFreeOperation :SideEffectfulOperation)


SubClassOf(ObjectIntersectionOf(:AtomicKOperation :NonVoidOperation) :SideEffectFreeOperation)
SubClassOf(ObjectIntersectionOf(:AtomicKOperation :VoidOperation) :SideEffectfulOperation)
DisjointClasses(:HigherOrderOperation :HorizontalOperation :ImmutableKBaseOutputOperation :KPlatformOutputOperation :LiftingOperation :LoweringOperation)
DisjointClasses(:HorizontalOperation :LiftingOperation :LoweringOperation)
SubObjectPropertyOf(ObjectPropertyChain(api4kp-term:hasEvent api4kp-evt:hasInput) :hasInput)
SubObjectPropertyOf(ObjectPropertyChain(api4kp-term:hasEvent api4kp-evt:hasOutput) :hasOutput)
)