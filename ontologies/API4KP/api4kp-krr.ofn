Prefix(:=<http://www.omg.org/spec/API4KP/KR/>)
Prefix(sm:=<http://www.omg.org/techprocess/ab/SpecificationMetadata/>)
Prefix(krr:=<http://www.omg.org/spec/API4KP/KR/>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(frbr:=<http://purl.org/vocab/frbr/core#>)
Prefix(frkr:=<http://www.omg.org/spec/API4KP/FRBR-KR#>)
Prefix(froo:=<http://iflastandards.info/ns/fr/frbr/frbroo/>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(skos:=<http://www.w3.org/2004/02/skos/core#>)
Prefix(DOL-terms:=<http://www.omg.org/spec/DOL/DOL-terms/>)


Ontology(<http://www.omg.org/spec/API4KP/KR/>
<http://www.omg.org/spec/API4KP/2017/12/KR/>
Import(<http://www.omg.org/techprocess/ab/SpecificationMetadata/>)
Import(<http://www.omg.org/spec/EDMC-FIBO/FND/Utilities/AnnotationVocabulary/>)
Annotation(<http://purl.org/dc/terms/license> "http://www.omg.org/techprocess/ab/SpecificationMetadata/MITLicense"^^xsd:anyURI)
Annotation(sm:contentLanguage "http://www.omg.org/spec/ODM/"^^xsd:anyURI)
Annotation(sm:contentLanguage "http://www.w3.org/standards/techs/owl#w3c_all"^^xsd:anyURI)
Annotation(sm:copyright "Copyright (c) 2014-2017 Arizona State University
Copyright (c) 2014-2017 Athan Services
Copyright (c) 2014-2017 Mayo Clinic
Copyright (c) 2014-2017 Thematix Partners LLC
Copyright (c) 2014-2017 Object Management Group, Inc."^^xsd:string)
Annotation(sm:fileAbbreviation "api4kp-kr"^^xsd:string)
Annotation(sm:fileAbstract "This ontology covers the primary 'knowledge representation and reasoning' terminology used for describing the  concepts used by the API4KP specification."^^xsd:string)
Annotation(sm:filename "api4kp-kr.rdf"^^xsd:string)
Annotation(rdfs:label "API4KP 'Knowledge Representation and Reasoning' Terminology Ontology")

Declaration(Class(frkr:CompositeKnowledgeResource))
Declaration(Class(frkr:ConcreteExpression))
Declaration(Class(frkr:ConstructedExpression))
Declaration(Class(frkr:KnowledgeArtifact))
Declaration(Class(frkr:KnowledgeRepresentationAndReasoningLanguage))
Declaration(Class(frkr:KnowledgeResource))
Declaration(Class(frkr:MachineReadableLanguage))
Declaration(Class(frkr:Serialization))
Declaration(Class(frkr:WorkOfKnowledge))
Declaration(Class(krr:BasicEnvironment))
Declaration(Class(krr:BasicMachinableKnowledgeResource))
Declaration(Class(krr:CategoricalEnvironment))
Declaration(Class(krr:ComposableEnvironment))
Declaration(Class(krr:EmptyEnvironment))
Declaration(Class(krr:Environment))
Declaration(Class(krr:EnvironmentWithIdentities))
Declaration(Class(krr:FocusedEnvironment))
Declaration(Class(krr:ImmutableEntity))
Declaration(Class(krr:ImmutableKnowledgeBase))
Declaration(Class(krr:KnowledgeBase))
Declaration(Class(krr:KnowledgeEndeavor))
Declaration(Class(krr:KnowledgeEnvironment))
Declaration(Class(krr:KnowledgeRepresentationAndReasoningLanguage))
Declaration(Class(krr:KnowledgeSerialization))
Declaration(Class(krr:KnowledgeSource))
Declaration(Class(krr:LanguageEnvironment))
Declaration(Class(krr:MachinableKnowledgeArtifact))
Declaration(Class(krr:MachinableKnowledgeResource))
Declaration(Class(krr:Mutable))
Declaration(Class(krr:MutableKnowledgeBase))
Declaration(Class(krr:MutableSource))
Declaration(Class(krr:NativeKnowledgeResource))
Declaration(Class(krr:NativeMachinableKnowledgeResource))
Declaration(Class(krr:NonemptyEnvironment))
Declaration(Class(krr:PieceOfKnowledge))
Declaration(Class(krr:PreservingEnvironment))
Declaration(Class(krr:QueryLanguage))
Declaration(Class(krr:Serialization))
Declaration(Class(krr:SerializedMachinableKnowledgeExpression))
Declaration(Class(krr:Source))
Declaration(Class(krr:StructuredMachinableKnowledgeResource))
Declaration(Class(DOL-terms:Language))
Declaration(Class(DOL-terms:Mapping))
Declaration(ObjectProperty(frkr:serialization-of))
Declaration(ObjectProperty(frkr:serialized-into))
Declaration(ObjectProperty(frkr:supports-serialization))
Declaration(ObjectProperty(frkr:uses-concrete-syntax))
Declaration(ObjectProperty(krr:accordingTo))
Declaration(ObjectProperty(krr:allPreserve))
Declaration(ObjectProperty(krr:conceptualizes))
Declaration(ObjectProperty(krr:expresses))
Declaration(ObjectProperty(krr:hasEnvironmentMapping))
Declaration(ObjectProperty(krr:hasEnvironmentMember))
Declaration(ObjectProperty(krr:hasFocusMember))
Declaration(ObjectProperty(krr:hasPart))
Declaration(ObjectProperty(krr:hasSetOfMappings))
Declaration(ObjectProperty(krr:hasSnapshot))
Declaration(ObjectProperty(krr:hasStructuralComponent))
Declaration(ObjectProperty(krr:hasStructureType))
Declaration(ObjectProperty(krr:hasSubenvironment))
Declaration(ObjectProperty(krr:isEnvironmentMappingOf))
Declaration(ObjectProperty(krr:isSerializationOf))
Declaration(ObjectProperty(krr:isSubenvironmentOf))
Declaration(ObjectProperty(krr:lifts))
Declaration(ObjectProperty(krr:lowers))
Declaration(ObjectProperty(krr:manifests))
Declaration(ObjectProperty(krr:parses))
Declaration(ObjectProperty(krr:preserves))
Declaration(ObjectProperty(krr:prototypes))
Declaration(ObjectProperty(krr:reproduces))
Declaration(ObjectProperty(krr:usesSerialization))
Declaration(ObjectProperty(DOL-terms:usesLanguage))
Declaration(AnnotationProperty(<http://purl.org/dc/terms/license>))
Declaration(AnnotationProperty(<http://swrl.stanford.edu/ontologies/3.3/swrla.owl#isRuleEnabled>))
Declaration(AnnotationProperty(sm:contentLanguage))
Declaration(AnnotationProperty(sm:copyright))
Declaration(AnnotationProperty(sm:fileAbbreviation))
Declaration(AnnotationProperty(sm:fileAbstract))
Declaration(AnnotationProperty(sm:filename))
Declaration(AnnotationProperty(sm:specificationURL))
Declaration(AnnotationProperty(skos:altLabel))
Declaration(AnnotationProperty(skos:definition))
Declaration(AnnotationProperty(skos:editorialNote))
Declaration(AnnotationProperty(skos:example))
Declaration(AnnotationProperty(skos:note))
Declaration(AnnotationProperty(skos:scopeNote))

############################
#   Object Properties
############################

# Object Property: krr:accordingTo (according to)

AnnotationAssertion(rdfs:label krr:accordingTo "according to")
AnnotationAssertion(skos:definition krr:accordingTo "relationship between a collection and an environment whereby the results of application of a mapping of the environment to a member of the collection are also members of the environment"^^xsd:string)
ObjectPropertyRange(krr:accordingTo krr:Environment)

# Object Property: krr:allPreserve (all preserve)

AnnotationAssertion(rdfs:label krr:allPreserve "all preserve")
ObjectPropertyDomain(krr:allPreserve krr:PreservingEnvironment)

# Object Property: krr:conceptualizes (conceptualizes)

AnnotationAssertion(rdfs:label krr:conceptualizes "conceptualizes")
AnnotationAssertion(skos:definition krr:conceptualizes "inverse of 'expresses'"^^xsd:string)
SubObjectPropertyOf(krr:conceptualizes krr:lifts)
InverseObjectProperties(krr:conceptualizes krr:expresses)

# Object Property: krr:expresses (expresses)

AnnotationAssertion(rdfs:label krr:expresses "expresses")
AnnotationAssertion(skos:altLabel krr:expresses "is expression of")
AnnotationAssertion(skos:definition krr:expresses "piece of knowledge that would be obtained by conceptualizing the machine readable knowledge resource."^^xsd:string)
SubObjectPropertyOf(krr:expresses krr:lowers)
ObjectPropertyDomain(krr:expresses krr:MachinableKnowledgeResource)
ObjectPropertyRange(krr:expresses krr:PieceOfKnowledge)

# Object Property: krr:hasEnvironmentMapping (has environment mapping)

AnnotationAssertion(rdfs:label krr:hasEnvironmentMapping "has environment mapping")
InverseObjectProperties(krr:hasEnvironmentMapping krr:isEnvironmentMappingOf)
ObjectPropertyRange(krr:hasEnvironmentMapping DOL-terms:Mapping)

# Object Property: krr:hasEnvironmentMember (has environment member)

AnnotationAssertion(rdfs:label krr:hasEnvironmentMember "has environment member")
ObjectPropertyDomain(krr:hasEnvironmentMember krr:NonemptyEnvironment)
ObjectPropertyRange(krr:hasEnvironmentMember owl:Thing)

# Object Property: krr:hasFocusMember (krr:hasFocusMember)

SubObjectPropertyOf(krr:hasFocusMember krr:hasEnvironmentMember)

# Object Property: krr:hasPart (has part)

AnnotationAssertion(rdfs:label krr:hasPart "has part")
AnnotationAssertion(skos:definition krr:hasPart "most general mereological relationship")

# Object Property: krr:hasSetOfMappings (has set of mappings)

AnnotationAssertion(rdfs:label krr:hasSetOfMappings "has set of mappings")

# Object Property: krr:hasSnapshot (has snapshot)

AnnotationAssertion(rdfs:label krr:hasSnapshot "has snapshot")
AnnotationAssertion(skos:definition krr:hasSnapshot "relationship between a mutable source and its state at one timepoint."^^xsd:string)
ObjectPropertyDomain(krr:hasSnapshot krr:Mutable)
ObjectPropertyRange(krr:hasSnapshot krr:ImmutableEntity)

# Object Property: krr:hasStructuralComponent (has structural component)

AnnotationAssertion(rdfs:label krr:hasStructuralComponent "has structural component")
AnnotationAssertion(skos:definition krr:hasStructuralComponent "functional parthood relationship where the role of the target component X is determined by the mutual relationship of that component X and other parts of the same parent composite")
SubObjectPropertyOf(krr:hasStructuralComponent krr:hasPart)

# Object Property: krr:hasSubenvironment (has subenvironment)

AnnotationAssertion(rdfs:label krr:hasSubenvironment "has subenvironment")
InverseObjectProperties(krr:hasSubenvironment krr:isSubenvironmentOf)

# Object Property: krr:isEnvironmentMappingOf (is environment mapping of)

AnnotationAssertion(rdfs:label krr:isEnvironmentMappingOf "is environment mapping of")

# Object Property: krr:isSerializationOf (is serialization of)

AnnotationAssertion(rdfs:label krr:isSerializationOf "is serialization of")
AnnotationAssertion(skos:definition krr:isSerializationOf "language that is manifested by the serialization"^^xsd:string)
SubObjectPropertyOf(krr:isSerializationOf frkr:supports-serialization)
ObjectPropertyDomain(krr:isSerializationOf DOL-terms:Language)
ObjectPropertyRange(krr:isSerializationOf krr:Serialization)

# Object Property: krr:isSubenvironmentOf (is subenvironment of)

AnnotationAssertion(rdfs:label krr:isSubenvironmentOf "is subenvironment of"@en)
AnnotationAssertion(skos:definition krr:isSubenvironmentOf "relationship between two environments that is a partial order where the language and logic graphs of the first enviroment are subgraphs, resp., of the language and logic graphs of the second environment"^^xsd:string)
TransitiveObjectProperty(krr:isSubenvironmentOf)
ObjectPropertyDomain(krr:isSubenvironmentOf krr:Environment)
ObjectPropertyRange(krr:isSubenvironmentOf krr:Environment)

# Object Property: krr:lifts (lifts)

AnnotationAssertion(rdfs:label krr:lifts "lifts")
AnnotationAssertion(skos:definition krr:lifts "relation between two knowledge endeavors where the first is an abstraction of the second by one level (e.g. if the first is an encoding, the second is an item, etc.).  Lifts relations are limited to one of the following: prototypes, decodes, parses, conceptualizes"^^xsd:string)
AnnotationAssertion(skos:note krr:lifts "OWL does not let us declare this to be functional, while keeping the property chains that link Events and Operations.")
InverseObjectProperties(krr:lifts krr:lowers)
ObjectPropertyDomain(krr:lifts krr:KnowledgeEndeavor)
ObjectPropertyRange(krr:lifts krr:KnowledgeEndeavor)

# Object Property: krr:lowers (lowers)

AnnotationAssertion(rdfs:label krr:lowers "lowers")
AnnotationAssertion(skos:definition krr:lowers "relation between two knowledge endeavors where the first is a deabstraction of the second by one level (e.g. if the first is an item, the second is an encoding, etc.).  Lowers relations are limited to one of the following: reproduces, encodes, manifests, expresses"^^xsd:string)
AnnotationAssertion(skos:note krr:lowers "
      <rdf:type rdf:resource=\"http://www.w3.org/2002/07/owl#FunctionalProperty\"/>
    ")
AnnotationAssertion(skos:note krr:lowers "OWL does not let us declare this to be functional, while keeping the property chains that link Events and Operations.")

# Object Property: krr:manifests (manifests)

AnnotationAssertion(rdfs:label krr:manifests "manifests")
AnnotationAssertion(skos:definition krr:manifests "machine readable knowledge resource that would be obtained from parsing the knowledge manifestation"^^xsd:string)
SubObjectPropertyOf(krr:manifests frkr:serialization-of)
SubObjectPropertyOf(krr:manifests krr:lowers)
InverseObjectProperties(krr:manifests krr:parses)
ObjectPropertyDomain(krr:manifests krr:SerializedMachinableKnowledgeExpression)
ObjectPropertyRange(krr:manifests krr:MachinableKnowledgeResource)

# Object Property: krr:parses (parses)

AnnotationAssertion(rdfs:label krr:parses "parses")
AnnotationAssertion(skos:definition krr:parses "inverse of 'manifests'"^^xsd:string)
SubObjectPropertyOf(krr:parses frkr:serialized-into)
SubObjectPropertyOf(krr:parses krr:lifts)

# Object Property: krr:preserves (preserves)

AnnotationAssertion(rdfs:label krr:preserves "preserves")
ObjectPropertyDomain(krr:preserves DOL-terms:Mapping)

# Object Property: krr:prototypes (prototypes)

AnnotationAssertion(rdfs:label krr:prototypes "prototypes")
AnnotationAssertion(skos:definition krr:prototypes "inverse of 'reproduces'"^^xsd:string)
SubObjectPropertyOf(krr:prototypes krr:lifts)
InverseObjectProperties(krr:prototypes krr:reproduces)

# Object Property: krr:reproduces (reproduces)

AnnotationAssertion(rdfs:label krr:reproduces "reproduces")
AnnotationAssertion(skos:definition krr:reproduces "knowledge encoding that would be obtained from instreaming the machine readable knowledge artifact"^^xsd:string)
SubObjectPropertyOf(krr:reproduces krr:lowers)
ObjectPropertyDomain(krr:reproduces krr:MachinableKnowledgeArtifact)
ObjectPropertyRange(krr:reproduces krr:SerializedMachinableKnowledgeExpression)

# Object Property: krr:usesSerialization (uses serialization)

AnnotationAssertion(rdfs:label krr:usesSerialization "uses serialization")
AnnotationAssertion(skos:definition krr:usesSerialization "serialization used by a knowledge manifestation"^^xsd:string)
SubObjectPropertyOf(krr:usesSerialization frkr:uses-concrete-syntax)
ObjectPropertyDomain(krr:usesSerialization krr:SerializedMachinableKnowledgeExpression)
ObjectPropertyRange(krr:usesSerialization krr:Serialization)



############################
#   Classes
############################

# Class: frkr:KnowledgeRepresentationAndReasoningLanguage (frkr:KnowledgeRepresentationAndReasoningLanguage)

EquivalentClasses(frkr:KnowledgeRepresentationAndReasoningLanguage krr:KnowledgeRepresentationAndReasoningLanguage)

# Class: frkr:Serialization (frkr:Serialization)

EquivalentClasses(frkr:Serialization krr:Serialization)

# Class: krr:BasicEnvironment (basic environment)

AnnotationAssertion(rdfs:label krr:BasicEnvironment "basic environment")
AnnotationAssertion(skos:definition krr:BasicEnvironment "a focused environment having exactly one member")
SubClassOf(krr:BasicEnvironment krr:FocusedEnvironment)
SubClassOf(krr:BasicEnvironment ObjectExactCardinality(1 krr:hasEnvironmentMapping))

# Class: krr:BasicMachinableKnowledgeResource (basic machine readable knowledge resource)

AnnotationAssertion(rdfs:label krr:BasicMachinableKnowledgeResource "basic machine readable knowledge resource")
AnnotationAssertion(skos:definition krr:BasicMachinableKnowledgeResource "unstructured native machine readable knowledge resource")
AnnotationAssertion(skos:example krr:BasicMachinableKnowledgeResource "KE1: the instance of the OWL 2 DL abstract syntax for the latest version of a biomedical ontology from an ontology series KA1 defining observable entities, such as the 2015 international version of the SNOMED-CT knowledge base\\footnote{http://browser.ihtsdotools.org/} (see also the definition of Basic Knowledge Asset).
This ontology differs from other versions of the series only in the natural language definitions.")
AnnotationAssertion(skos:note krr:BasicMachinableKnowledgeResource "well-formed, stand-alone formula in the abstract syntax of a machine-readable language")
AnnotationAssertion(skos:scopeNote krr:BasicMachinableKnowledgeResource "The use of \"basic\" in API4KP differs from its usage in DOL - a DOL basic OMS  (ontologies, models and specifications) is a set, and corresponds to a Set-structured piece of knowledge in API4KP.")
EquivalentClasses(krr:BasicMachinableKnowledgeResource ObjectIntersectionOf(krr:MachinableKnowledgeResource ObjectExactCardinality(0 krr:hasStructureType)))
DisjointClasses(krr:BasicMachinableKnowledgeResource krr:StructuredMachinableKnowledgeResource)

# Class: krr:CategoricalEnvironment (categorical environment)

AnnotationAssertion(rdfs:label krr:CategoricalEnvironment "categorical environment")
AnnotationAssertion(skos:definition krr:CategoricalEnvironment "a composable environment with identies whose composition operation is associative")
AnnotationAssertion(skos:definition krr:CategoricalEnvironment "environment with an associative composition operation for mappings, that is closed under composition and contains an identity mapping for every member")
SubClassOf(krr:CategoricalEnvironment krr:EnvironmentWithIdentities)

# Class: krr:ComposableEnvironment (composable environment)

AnnotationAssertion(rdfs:label krr:ComposableEnvironment "composable environment")
AnnotationAssertion(skos:definition krr:ComposableEnvironment "an environment having a composition operation where the composition of its mappings is a mapping of the environment whenever the composition is well-defined")
AnnotationAssertion(skos:editorialNote krr:ComposableEnvironment "The composition M2 o M1 of two mappings M1 and M2 is well-defined when M1 maps to the same thing that M2 maps from. (The codomain of M1 is the domain of M2).")
SubClassOf(krr:ComposableEnvironment krr:Environment)

# Class: krr:EmptyEnvironment (empty environment)

AnnotationAssertion(rdfs:label krr:EmptyEnvironment "empty environment")
SubClassOf(krr:EmptyEnvironment krr:Environment)
SubClassOf(krr:EmptyEnvironment ObjectExactCardinality(0 krr:hasEnvironmentMapping))
DisjointClasses(krr:EmptyEnvironment krr:NonemptyEnvironment)

# Class: krr:Environment (environment)

AnnotationAssertion(rdfs:label krr:Environment "environment")
AnnotationAssertion(skos:definition krr:Environment "mathematical structure of mappings and members, where the domain and codomains of the mappings are members of the environment")
AnnotationAssertion(skos:example krr:Environment "a KRR language environment containing semantics-preserving translations from RDF and OWL into CL, assisting in the integrated interpretation of a stream of RDF graphs and OWL ontologies")
SubClassOf(krr:Environment krr:ImmutableEntity)

# Class: krr:EnvironmentWithIdentities (environment with identity)

AnnotationAssertion(rdfs:label krr:EnvironmentWithIdentities "environment with identity")
AnnotationAssertion(skos:definition krr:EnvironmentWithIdentities "a composable environment having an identity mapping for each member")
AnnotationAssertion(skos:editorialNote krr:EnvironmentWithIdentities "an identity mapping is a mapping whose domain and codomain are the same, and when composed with another mapping is equal to the original mapping")
SubClassOf(krr:EnvironmentWithIdentities krr:ComposableEnvironment)

# Class: krr:FocusedEnvironment (focused environment)

AnnotationAssertion(rdfs:label krr:FocusedEnvironment "focused environment")
AnnotationAssertion(skos:definition krr:FocusedEnvironment "a nonempty environment which has a member F (called the focus or focus member) such that for every other member A, there is a mapping in the environment from A to F"^^xsd:string)
SubClassOf(krr:FocusedEnvironment krr:NonemptyEnvironment)

# Class: krr:ImmutableEntity (immutable entity)

AnnotationAssertion(sm:specificationURL krr:ImmutableEntity "http://www.oed.com/view/Entry/92020")
AnnotationAssertion(rdfs:label krr:ImmutableEntity "immutable entity")
AnnotationAssertion(skos:definition krr:ImmutableEntity "an entity that is not subject to or susceptible of change")
DisjointClasses(krr:ImmutableEntity krr:Mutable)

# Class: krr:ImmutableKnowledgeBase (immutable knowledgebase)

AnnotationAssertion(rdfs:comment krr:ImmutableKnowledgeBase "An KB can be immutable by nature. Otherwise, any snapshot of a KB at a given point in time (including the time of its creation) is considered immutable.")
AnnotationAssertion(rdfs:label krr:ImmutableKnowledgeBase "immutable knowledgebase")
AnnotationAssertion(skos:definition krr:ImmutableKnowledgeBase "Knowledge Base that is immutable")
EquivalentClasses(krr:ImmutableKnowledgeBase krr:PieceOfKnowledge)
SubClassOf(krr:ImmutableKnowledgeBase krr:KnowledgeBase)

# Class: krr:KnowledgeBase (knowledge base)

AnnotationAssertion(rdfs:comment krr:KnowledgeBase "A knowledge base is formed by one or more pieces of knowledge, related in different way, such that each piece plays some kind of role.")
AnnotationAssertion(rdfs:label krr:KnowledgeBase "knowledge base")
AnnotationAssertion(skos:definition krr:KnowledgeBase "A functional complex of pieces of knowledge")
SubClassOf(krr:KnowledgeBase krr:KnowledgeSource)

# Class: krr:KnowledgeEndeavor (knowledge endeavor)

AnnotationAssertion(rdfs:comment krr:KnowledgeEndeavor "Knowledge Endeavors are per se immutable. Should any part change as a result of some (cognitive) activity, a new distinct Endeavor is created, that is a new version (derivative) of the original one")
AnnotationAssertion(rdfs:label krr:KnowledgeEndeavor "knowledge endeavor")
AnnotationAssertion(skos:definition krr:KnowledgeEndeavor "a knowledge source that is an immutable entity"^^xsd:string)
AnnotationAssertion(skos:note krr:KnowledgeEndeavor "May be identified to be at one of the following levels of abstraction; piece of knowledge, machine readable knowledge resource, knowledge manifestation, or machine readable knowledge artifact.")
EquivalentClasses(krr:KnowledgeEndeavor ObjectIntersectionOf(krr:ImmutableEntity krr:KnowledgeSource))
DisjointUnion(krr:KnowledgeEndeavor krr:MachinableKnowledgeArtifact krr:MachinableKnowledgeResource krr:PieceOfKnowledge krr:SerializedMachinableKnowledgeExpression)

# Class: krr:KnowledgeEnvironment (knowledge environment)

AnnotationAssertion(rdfs:label krr:KnowledgeEnvironment "knowledge environment")
AnnotationAssertion(skos:definition krr:KnowledgeEnvironment "focused, categorical, preserving language environment where the focus is a KRR language")
AnnotationAssertion(skos:scopeNote krr:KnowledgeEnvironment "The special case where all languages in an knowledge environment are KRR languages supporting model-theoretic semantics without side-effects (logics), and the preserving property is characterized by a logical graph reduces to a heterogeneous logical environment as defined in DOL.")
SubClassOf(krr:KnowledgeEnvironment krr:CategoricalEnvironment)
SubClassOf(krr:KnowledgeEnvironment krr:FocusedEnvironment)
SubClassOf(krr:KnowledgeEnvironment krr:LanguageEnvironment)
SubClassOf(krr:KnowledgeEnvironment krr:PreservingEnvironment)

# Class: krr:KnowledgeRepresentationAndReasoningLanguage (knowledge representation and reasoning language)

AnnotationAssertion(rdfs:label krr:KnowledgeRepresentationAndReasoningLanguage "knowledge representation and reasoning language")
AnnotationAssertion(skos:definition krr:KnowledgeRepresentationAndReasoningLanguage "OMS language, query language, or result language"^^xsd:string)
SubClassOf(krr:KnowledgeRepresentationAndReasoningLanguage DOL-terms:Language)

# Class: krr:KnowledgeSerialization (knowledge serialization)

AnnotationAssertion(rdfs:label krr:KnowledgeSerialization "knowledge serialization")
AnnotationAssertion(skos:definition krr:KnowledgeSerialization "system of converting an expression into an character sequence."^^xsd:string)
SubClassOf(krr:KnowledgeSerialization krr:Serialization)
SubClassOf(krr:KnowledgeSerialization ObjectSomeValuesFrom(krr:isSerializationOf krr:KnowledgeRepresentationAndReasoningLanguage))

# Class: krr:KnowledgeSource (knowledge source)

AnnotationAssertion(rdfs:label krr:KnowledgeSource "knowledge source")
AnnotationAssertion(skos:definition krr:KnowledgeSource "a source of information, suitable to be expressed in a machine-readable language, that has (possibly ambiguous) semantics")
AnnotationAssertion(skos:example krr:KnowledgeSource "a database with a mapping to an ontology")
AnnotationAssertion(skos:example krr:KnowledgeSource "a stateful representation of a patient's history with OWL snapshots")
AnnotationAssertion(skos:example krr:KnowledgeSource "a stream of RDF graphs providing data from biomedical devices")
AnnotationAssertion(skos:scopeNote krr:KnowledgeSource "May be either mutable or immutable (unlike DOL OMSs, which are all immutable).")
AnnotationAssertion(skos:scopeNote krr:KnowledgeSource "OntoIOp sensitive"^^xsd:string)
SubClassOf(krr:KnowledgeSource krr:Source)

# Class: krr:LanguageEnvironment (language environment)

AnnotationAssertion(rdfs:label krr:LanguageEnvironment "language environment")
AnnotationAssertion(skos:definition krr:LanguageEnvironment "environment whose members are languages")
SubClassOf(krr:LanguageEnvironment krr:Environment)
SubClassOf(krr:LanguageEnvironment ObjectAllValuesFrom(krr:hasEnvironmentMember krr:KnowledgeRepresentationAndReasoningLanguage))

# Class: krr:MachinableKnowledgeArtifact (machine readable knowledge artifact)

AnnotationAssertion(rdfs:label krr:MachinableKnowledgeArtifact "machine readable knowledge artifact")
AnnotationAssertion(skos:definition krr:MachinableKnowledgeArtifact "physical instance of a knowledge encoding, e.g. snapshot of a file on a hard drive, a Java String in memory."^^xsd:string)
AnnotationAssertion(skos:example krr:MachinableKnowledgeArtifact "Example: my copy in my Download folder of the encoding in UTF-8 of the serialization in Manchester syntax of an OWL ontology. "^^xsd:string)
SubClassOf(krr:MachinableKnowledgeArtifact frkr:KnowledgeArtifact)
SubClassOf(krr:MachinableKnowledgeArtifact krr:KnowledgeEndeavor)

# Class: krr:MachinableKnowledgeResource (machine readable knowledge resource)

AnnotationAssertion(rdfs:label krr:MachinableKnowledgeResource "machine readable knowledge resource")
AnnotationAssertion(skos:altLabel krr:MachinableKnowledgeResource "(krr) knowledge expression")
AnnotationAssertion(skos:definition krr:MachinableKnowledgeResource "Set of Expressions in one or more machine readable languages, in the context of a Logical Environment determining how these Expressions are jointly interpreted."^^xsd:string)
AnnotationAssertion(skos:example krr:MachinableKnowledgeResource "Examples;
Example A: OWL Ground fact expressing that Socrates is a philosopher.
Example B: Common Logic sentence expressing that Socrates is a philosopher.
Example C: RDF graph expressing that the author of Moby Dick is Herman Melville.
Example D: SPARQL query for the names of philosphers.

Example E: A and B, together with a mapping that allows OWL to be converted to Common Logic."^^xsd:string)
EquivalentClasses(krr:MachinableKnowledgeResource ObjectSomeValuesFrom(DOL-terms:usesLanguage frkr:MachineReadableLanguage))
SubClassOf(krr:MachinableKnowledgeResource frkr:ConstructedExpression)
SubClassOf(krr:MachinableKnowledgeResource frkr:KnowledgeResource)
SubClassOf(krr:MachinableKnowledgeResource krr:KnowledgeEndeavor)
SubClassOf(krr:MachinableKnowledgeResource ObjectAllValuesFrom(krr:hasPart krr:MachinableKnowledgeResource))

# Class: krr:Mutable (mutable entity)

AnnotationAssertion(rdfs:label krr:Mutable "mutable entity")
SubClassOf(krr:Mutable ObjectSomeValuesFrom(krr:hasSnapshot krr:ImmutableEntity))

# Class: krr:MutableKnowledgeBase (mutable knowledge base)

AnnotationAssertion(rdfs:label krr:MutableKnowledgeBase "mutable knowledge base")
EquivalentClasses(krr:MutableKnowledgeBase ObjectIntersectionOf(krr:MutableSource ObjectSomeValuesFrom(krr:hasSnapshot krr:ImmutableKnowledgeBase)))
SubClassOf(krr:MutableKnowledgeBase krr:KnowledgeBase)

# Class: krr:MutableSource (mutable source)

AnnotationAssertion(rdfs:label krr:MutableSource "mutable source")
AnnotationAssertion(skos:definition krr:MutableSource "container that has, at any point in time, an explicit state that is fully represented by a knowledge endeavor. The language, structure and content of a mutable knowledge source may change over time, but the abstraction level is unchanging.")
AnnotationAssertion(skos:example krr:MutableSource "the snapshot of a patient's current condition (with timestamp)")
AnnotationAssertion(skos:scopeNote krr:MutableSource "API4KP does not commit to any particular topology of time. E.g. Linear, branching and braided time indices are possible.")
EquivalentClasses(krr:MutableSource ObjectIntersectionOf(krr:Mutable krr:Source ObjectSomeValuesFrom(krr:hasSnapshot ObjectIntersectionOf(krr:ImmutableEntity krr:Source))))

# Class: krr:NativeKnowledgeResource (native knowledge endeavor)

AnnotationAssertion(rdfs:label krr:NativeKnowledgeResource "native knowledge endeavor")
SubClassOf(krr:NativeKnowledgeResource krr:KnowledgeEndeavor)

# Class: krr:NativeMachinableKnowledgeResource (native machine readable knowledge resource)

AnnotationAssertion(rdfs:label krr:NativeMachinableKnowledgeResource "native machine readable knowledge resource")
AnnotationAssertion(skos:definition krr:NativeMachinableKnowledgeResource "sequence of expressions (like non-logical symbols, sentences and structuring elements) from a given KR language.")
EquivalentClasses(krr:NativeMachinableKnowledgeResource ObjectIntersectionOf(krr:MachinableKnowledgeResource krr:NativeKnowledgeResource))
SubClassOf(krr:NativeMachinableKnowledgeResource ObjectExactCardinality(1 DOL-terms:usesLanguage krr:KnowledgeRepresentationAndReasoningLanguage))

# Class: krr:NonemptyEnvironment (nonempty environment)

AnnotationAssertion(rdfs:label krr:NonemptyEnvironment "nonempty environment")
SubClassOf(krr:NonemptyEnvironment krr:Environment)
SubClassOf(krr:NonemptyEnvironment ObjectSomeValuesFrom(krr:hasEnvironmentMapping DOL-terms:Mapping))

# Class: krr:PieceOfKnowledge (piece of knowledge)

AnnotationAssertion(rdfs:label krr:PieceOfKnowledge "piece of knowledge")
AnnotationAssertion(skos:definition krr:PieceOfKnowledge "equivalence class (according to an environment) of machine readable knowledge resources.

Note:  intuitively, a piece of knowledge is information that may be (equivalently) expressed in one or more KR languages."^^xsd:string)
AnnotationAssertion(skos:example krr:PieceOfKnowledge "Example: assertion that Socrates is a philospher.
Example: assertion that the author of Moby Dick is Herman Melville.
Example: query for the names of philosphers.
Example: a sequence of strings that are asserted to be names of philosphers in some KB."^^xsd:string)
EquivalentClasses(krr:PieceOfKnowledge ObjectIntersectionOf(krr:KnowledgeEndeavor ObjectSomeValuesFrom(krr:conceptualizes krr:MachinableKnowledgeResource)))
SubClassOf(krr:PieceOfKnowledge frkr:WorkOfKnowledge)
SubClassOf(krr:PieceOfKnowledge krr:KnowledgeEndeavor)
SubClassOf(krr:PieceOfKnowledge ObjectExactCardinality(1 krr:accordingTo krr:KnowledgeEnvironment))

# Class: krr:PreservingEnvironment (preserving environment)

AnnotationAssertion(rdfs:label krr:PreservingEnvironment "preserving environment")
AnnotationAssertion(skos:definition krr:PreservingEnvironment "environment where every mapping preserves a specified property")
SubClassOf(krr:PreservingEnvironment krr:Environment)

# Class: krr:QueryLanguage (query language)

AnnotationAssertion(rdfs:label krr:QueryLanguage "query language")
AnnotationAssertion(skos:definition krr:QueryLanguage "language consisting of a set of query expressions, one or more serializations of these Expressions, and one or more Entailment Regimes (http://www.w3.org/TR/sparql11-entailment/#entRegimeParts) defined in terms of formal, logic-based semantics. "^^xsd:string)
AnnotationAssertion(skos:scopeNote krr:QueryLanguage "Note: the set of expressions of a query language may be defined by a grammar, or it may be defined in terms of expressions of an OMS language together with a sequence of non-logical constants that will be treated as the distinguished query variables. Additional features of a query language are perfomatives used to indicate how query results should be returned."^^xsd:string)
SubClassOf(krr:QueryLanguage krr:KnowledgeRepresentationAndReasoningLanguage)

# Class: krr:Serialization (serialization)

AnnotationAssertion(rdfs:isDefinedBy krr:Serialization "http://www.omg.org/spec/OntoIOp/Terminology")
AnnotationAssertion(rdfs:label krr:Serialization "serialization")
AnnotationAssertion(skos:definition krr:Serialization "system for transforming from an expression to a character sequence"^^xsd:string)
AnnotationAssertion(skos:scopeNote krr:Serialization "OntoIOp sensitive"^^xsd:string)
SubClassOf(krr:Serialization ObjectSomeValuesFrom(krr:isSerializationOf DOL-terms:Language))

# Class: krr:SerializedMachinableKnowledgeExpression (serialized machine readable knowledge expression)

AnnotationAssertion(rdfs:label krr:SerializedMachinableKnowledgeExpression "serialized machine readable knowledge expression")
AnnotationAssertion(skos:definition krr:SerializedMachinableKnowledgeExpression "character sequence, or collection of character sequences, each being the serialization of a machine readable knowledge resource in a knowledge serialization."^^xsd:string)
AnnotationAssertion(skos:example krr:SerializedMachinableKnowledgeExpression "Example: character sequence in Manchester OWL syntax that is the serialization of an OWL Ground fact expressing that Socrates is a philosopher.
Example: character sequence in OWL RDF/XML syntax that is the serialization of an OWL Ground fact expressing that Socrates is a philosopher.
Example: character sequence in CLIF syntax that is the serialization of a Common Logic sentence expressing that Socrates is a philosopher.
Example: character sequence in RDF/XML that is the serialization of an RDF graph expressing that the author of Moby Dick is Herman Melville.
Example: character sequence in Turtle that is the serialization of an RDF graph expressing that the author of Moby Dick is Herman Melville.
Example: SPARQL query String for the names of philosphers."^^xsd:string)
SubClassOf(krr:SerializedMachinableKnowledgeExpression frkr:ConcreteExpression)
SubClassOf(krr:SerializedMachinableKnowledgeExpression frkr:ConstructedExpression)
SubClassOf(krr:SerializedMachinableKnowledgeExpression krr:KnowledgeEndeavor)
SubClassOf(krr:SerializedMachinableKnowledgeExpression ObjectSomeValuesFrom(krr:manifests krr:MachinableKnowledgeResource))
SubClassOf(krr:SerializedMachinableKnowledgeExpression ObjectSomeValuesFrom(krr:usesSerialization krr:KnowledgeSerialization))

# Class: krr:Source (source)

AnnotationAssertion(rdfs:label krr:Source "source")

# Class: krr:StructuredMachinableKnowledgeResource (structured machine readable knowledge resource)

AnnotationAssertion(rdfs:label krr:StructuredMachinableKnowledgeResource "structured machine readable knowledge resource")
AnnotationAssertion(skos:definition krr:StructuredMachinableKnowledgeResource "collection of machine readable knowledge resources, which are not necessarily in the same language and may themselves have structure.")
AnnotationAssertion(skos:example krr:StructuredMachinableKnowledgeResource "KE2: a heterogeneous collection of streaming data and RDF graphs, together with static OWL ontologies and CL texts, and ECA rules describing actions of a CDS")
AnnotationAssertion(skos:example krr:StructuredMachinableKnowledgeResource "KE3: the OWL 2 DL ontology series KA1, viewed as a collection of expressions rather than an equivalence class")
EquivalentClasses(krr:StructuredMachinableKnowledgeResource ObjectIntersectionOf(krr:MachinableKnowledgeResource ObjectExactCardinality(1 krr:hasStructureType)))
SubClassOf(krr:StructuredMachinableKnowledgeResource frkr:CompositeKnowledgeResource)
SubClassOf(krr:StructuredMachinableKnowledgeResource ObjectAllValuesFrom(krr:hasStructuralComponent krr:MachinableKnowledgeResource))
SubClassOf(krr:StructuredMachinableKnowledgeResource ObjectExactCardinality(1 krr:hasStructureType))


SubObjectPropertyOf(ObjectPropertyChain(krr:isEnvironmentMappingOf krr:allPreserve) krr:preserves)
)