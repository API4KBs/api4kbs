### Release Candidate Pipeline
### Develop Snapshot Branch to Release-X.X.X

pool:
  vmImage: 'ubuntu-latest'

variables: 
- group: kmdp-platform-variables
- name: repoName
  value: 'API4KP'

steps:

# STARTER STEP
- script: |
    echo Starting KMDP Release Candidate!
  displayName: 'Pipeline Started'

# STEP 1: Read POM File and Set GAV Variables
- task: PowerShell@2
  displayName: 'Read POM and Set GAV Variables'
  inputs:
    targetType: 'inline'
    script: |
      [xml]$pomXml = Get-Content .\pom.xml
      # version
      Write-Host GroupId: $pomXml.project.groupId
      Write-Host ArtifactId: $pomXml.project.artifactId
      Write-Host Version: $pomXml.project.version
      $groupId=$pomXml.project.groupId
      $artifactId=$pomXml.project.artifactId
      $version=$pomXml.project.version
      $projectVersion=$version.replace("-SNAPSHOT","")
      Write-Host "##vso[task.setvariable variable=projectSnapShotVersion]$version"
      Write-Host "##vso[task.setvariable variable=projectVersion]$projectVersion"
      Write-Host "##vso[task.setvariable variable=projectGroupId]$groupId"
      Write-Host "##vso[task.setvariable variable=projectArtifactId]$artifactId"

# STEP 2: Write out all variables for validation
- task: PowerShell@2
  displayName: 'Write Env Variables'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host --------------------------------
      Write-Host POM Variables:
      Write-Host Project Group ID: $env:GROUP_ID
      Write-Host Project Artifact ID: $env:ARTIFACT_ID
      Write-Host Project Snapshot Version: $env:PROJECT_SNAPSHOT_VERSION
      Write-Host Project Version: $env:PROJECT_VERSION
      Write-Host --------------------------------
      Write-Host Variable Group:
      Write-Host Dev Version: $env:DEV_VERSION
      Write-Host Next Version: $env:NEXT_VERSION
      Write-Host Master Version: $env:MASTER_VERSION
      Write-Host Release Version: $env:RELEASE_VERSION
  env: 
    PROJECT_VERSION: $(projectVersion)
    ARTIFACT_ID: $(projectArtifactId)
    PROJECT_SNAPSHOT_VERSION: $(projectSnapShotVersion)
    GROUP_ID: $(projectGroupId)
    NEXT_VERSION: $(nextVersion)
    DEV_VERSION: $(devVersion)
    MASTER_VERSION: $(masterVersion)
    RELEASE_VERSION: $(releaseVersion)

# STEP 3: Check out develop branch to create release candidate from
- task: PowerShell@2
  displayName: 'Checkout Develop Branch'
  inputs:
    targetType: 'inline'
    script: |
        git config --global user.email "$env:USER_EMAIL"
        git config --global user.name "$env:USER_NAME"
        git checkout develop
        git branch -a
  env:
    USER_EMAIL: $(userEmail)
    USER_NAME: $(userName)

# STEP 4: Create the release candidate branch off of develop
- task: PowerShell@2
  displayName: 'Create Release Candidate Branch'
  inputs:
    targetType: 'inline'
    script: |
        git checkout -b "release-$env:PROJECT_VERSION"
  env:
    PROJECT_VERSION: $(projectVersion)

# STEP 5: Update POM Version in Release Candidate Branch
- task: PowerShell@2
  displayName: 'Maven Versions:Set POM Release Branch'
  inputs:
    targetType: 'inline'
    script: |
        mvn versions:set "-DnewVersion=$env:PROJECT_VERSION"
  env:
    PROJECT_VERSION: $(projectVersion)

# STEP 6: Commit the new candidate release branch
- task: PowerShell@2
  displayName: 'Git Commit and Push Candidate Release'
  inputs:
    targetType: 'inline'
    script: |
      git add .
      git commit -a -m "candidate release $env:PROJECT_VERSION"
      git push --set-upstream "https://kmd:$env:SYSTEM_ACCESSTOKEN@dev.azure.com/mclm/KMD/_git/$env:REPO_NAME" "release-$env:PROJECT_VERSION"
  env:
    PROJECT_VERSION: $(projectVersion)
    SYSTEM_ACCESSTOKEN: $(system.accesstoken)
    REPO_NAME: $(repoName)

# STEP 7: Rebase candidate branch to the develop branch
- task: PowerShell@2
  displayName: 'Rebase Develop Branch'
  inputs:
    targetType: 'inline'
    script: |
      git checkout develop
      git rebase "release-$env:PROJECT_VERSION"
  env:
   PROJECT_VERSION: $(projectVersion)

# STEP 8: Update new -SNAPSHOT version in Develop branch
- task: PowerShell@2
  displayName: 'Maven Versions:Set Develop POM'
  inputs:
    targetType: 'inline'
    script: |
        mvn versions:set "-DnewVersion=$env:NEXT_VERSION-SNAPSHOT"
  env:
    NEXT_VERSION: $(nextVersion)

## Commit to the develop branch
- task: PowerShell@2
  displayName: 'Git Commit and Push Develop Branch'
  inputs:
    targetType: 'inline'
    script: |
      git add .
      git commit -a -m "[skip ci] update develop branch for new version: $env:NEXT_VERSION-SNAPSHOT"
      git push "https://kmd:$env:SYSTEM_ACCESSTOKEN@dev.azure.com/mclm/KMD/_git/$env:REPO_NAME"
  env:
    NEXT_VERSION: $(nextVersion)
    SYSTEM_ACCESSTOKEN: $(system.accesstoken)
    REPO_NAME: $(repoName)

# ENDING STEP
- script: |
    echo Ending Release Candidate!
  displayName: 'End Pipeline Step' 